# Fixed point transfer instructions
adE "mov 0x27, r7" e727 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _regv (bv 32 0x27)) (branch (var _priv) (set r7b (var _regv)) (set r7 (var _regv))))
adE "mov.w @(0x1fe,pc), r9" 99ff 0x66 (seq (set _temp (loadw 0 16 (+ (+ (bv 32 0x66) (bv 32 0x4)) (* (bv 32 0xff) (bv 32 0x2))))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set r9 (var _sign)))
adE "mov.l @(0x3fc,pc), r6" d6ff 0x98 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _regv (loadw 0 32 (+ (+ (& (bv 32 0x98) (bv 32 0xfffffffc)) (bv 32 0x4)) (* (bv 32 0xff) (bv 32 0x4))))) (branch (var _priv) (set r6b (var _regv)) (set r6 (var _regv))))
adE "mov r1, r11" 6b13 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set r11 (ite (var _priv) (var r1b) (var r1))))
adE "mov.b r10, @r12" 2ca0 0x108 (storew 0 (var r12) (cast 8 false (var r10)))
adE "mov.w r1, @r15" 2f11 0x108 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (var r15) (cast 16 false (ite (var _priv) (var r1b) (var r1)))))
adE "mov.l r14, @r2" 22e2 0x108 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (ite (var _priv) (var r2b) (var r2)) (var r14)))
adE "mov.b @r1, r2" 6210 0x108 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _temp (loadw 0 8 (ite (var _priv) (var r1b) (var r1)))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set _regv (var _sign)) (branch (var _priv) (set r2b (var _regv)) (set r2 (var _regv))))
adE "mov.w @r14, r15" 6fe1 0x108 (seq (set _temp (loadw 0 16 (var r14))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set r15 (var _sign)))
adE "mov.l @r14, r15" 6fe2 0x108 (set r15 (loadw 0 32 (var r14)))
adE "mov.b r1, @-r2" 2214 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _regv (- (ite (var _priv) (var r2b) (var r2)) (bv 32 0x1))) (branch (var _priv) (set r2b (var _regv)) (set r2 (var _regv))) (storew 0 (ite (var _priv) (var r2b) (var r2)) (cast 8 false (ite (var _priv) (var r1b) (var r1)))))
adE "mov.w r8, @-r9" 2985 0x0 (seq (set r9 (- (var r9) (bv 32 0x2))) (storew 0 (var r9) (cast 16 false (var r8))))
adE "mov.l r10, @-r11" 2ba6 0x0 (seq (set r11 (- (var r11) (bv 32 0x4))) (storew 0 (var r11) (var r10)))
adE "mov.b @r0+, r1" 6104 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _temp (loadw 0 8 (ite (var _priv) (var r0b) (var r0)))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set _regv (var _sign)) (branch (var _priv) (set r1b (var _regv)) (set r1 (var _regv))) (set _regv (+ (ite (var _priv) (var r0b) (var r0)) (bv 32 0x1))) (branch (var _priv) (set r0b (var _regv)) (set r0 (var _regv))))
adE "mov.w @r11+, r12" 6cb5 0x0 (seq (set _temp (loadw 0 16 (var r11))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set r12 (var _sign)) (set r11 (+ (var r11) (bv 32 0x2))))
adE "mov.l @r11+, r12" 6cb6 0x0 (seq (set r12 (loadw 0 32 (var r11))) (set r11 (+ (var r11) (bv 32 0x4))))
adE "mov.b r0, @(0x0f,r15)" 80ff 0x10 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (+ (var r15) (* (bv 32 0xf) (bv 32 0x1))) (cast 8 false (ite (var _priv) (var r0b) (var r0)))))
adE "mov.w r0, @(0x1e,r0)" 810f 0x10 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (+ (ite (var _priv) (var r0b) (var r0)) (* (bv 32 0xf) (bv 32 0x2))) (cast 16 false (ite (var _priv) (var r0b) (var r0)))))
adE "mov.l r9, @(0x38,r15)" 1f9e 0x0 (storew 0 (+ (var r15) (* (bv 32 0xe) (bv 32 0x4))) (var r9))
adE "mov.b @(0x0f,r1), r0" 841f 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _temp (loadw 0 8 (+ (ite (var _priv) (var r1b) (var r1)) (* (bv 32 0xf) (bv 32 0x1))))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set _regv (var _sign)) (branch (var _priv) (set r0b (var _regv)) (set r0 (var _regv))))
adE "mov.w @(0x00,r9), r0" 8590 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _temp (loadw 0 16 (+ (var r9) (* (bv 32 0x0) (bv 32 0x2))))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set _regv (var _sign)) (branch (var _priv) (set r0b (var _regv)) (set r0 (var _regv))))
adE "mov.l @(0x10,r15), r15" 5ff4 0x0 (set r15 (loadw 0 32 (+ (var r15) (* (bv 32 0x4) (bv 32 0x4)))))
adE "mov.b r2, @(r0,r1)" 0124 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (+ (ite (var _priv) (var r0b) (var r0)) (ite (var _priv) (var r1b) (var r1))) (cast 8 false (ite (var _priv) (var r2b) (var r2)))))
adE "mov.w r15, @(r0,r0)" 00f5 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (+ (ite (var _priv) (var r0b) (var r0)) (ite (var _priv) (var r0b) (var r0))) (cast 16 false (var r15))))
adE "mov.l r15, @(r0,r14)" 0ef6 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (+ (ite (var _priv) (var r0b) (var r0)) (var r14)) (var r15)))
adE "mov.b @(r0,r1), r2" 021c 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _temp (loadw 0 8 (+ (ite (var _priv) (var r0b) (var r0)) (ite (var _priv) (var r1b) (var r1))))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set _regv (var _sign)) (branch (var _priv) (set r2b (var _regv)) (set r2 (var _regv))))
adE "mov.w @(r0,r0), r15" 0f0d 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _temp (loadw 0 16 (+ (ite (var _priv) (var r0b) (var r0)) (ite (var _priv) (var r0b) (var r0))))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set r15 (var _sign)))
adE "mov.l @(r0,r14), r15" 0fee 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set r15 (loadw 0 32 (+ (ite (var _priv) (var r0b) (var r0)) (var r14)))))
adE "mov.b r0, @(0x00f,gbr)" c00f 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (+ (var gbr) (* (bv 32 0xf) (bv 32 0x1))) (cast 8 false (ite (var _priv) (var r0b) (var r0)))))
adE "mov.w r0, @(0x0fe,gbr)" c17f 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (+ (var gbr) (* (bv 32 0x7f) (bv 32 0x2))) (cast 16 false (ite (var _priv) (var r0b) (var r0)))))
adE "mov.l r0, @(0x3fc,gbr)" c2ff 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (storew 0 (+ (var gbr) (* (bv 32 0xff) (bv 32 0x4))) (ite (var _priv) (var r0b) (var r0))))
adE "mov.b @(0x00f,gbr), r0" c40f 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _temp (loadw 0 8 (+ (var gbr) (* (bv 32 0xf) (bv 32 0x1))))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set _regv (var _sign)) (branch (var _priv) (set r0b (var _regv)) (set r0 (var _regv))))
adE "mov.w @(0x0fe,gbr), r0" c57f 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _temp (loadw 0 16 (+ (var gbr) (* (bv 32 0x7f) (bv 32 0x2))))) (set _sign (cast 32 (msb (var _temp)) (var _temp))) (set _regv (var _sign)) (branch (var _priv) (set r0b (var _regv)) (set r0 (var _regv))))
adE "mov.l @(0x3fc,gbr), r0" c6ff 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _regv (loadw 0 32 (+ (var gbr) (* (bv 32 0xff) (bv 32 0x4))))) (branch (var _priv) (set r0b (var _regv)) (set r0 (var _regv))))
adE "mova @(0x3fc,pc), r0" c7ff 0x420 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _regv (loadw 0 32 (+ (+ (& (bv 32 0x420) (bv 32 0xfffffffc)) (bv 32 0x4)) (* (bv 32 0xff) (bv 32 0x4))))) (branch (var _priv) (set r0b (var _regv)) (set r0 (var _regv))))
adE "movt r14" 0e29 0x100 (set r14 (cast 32 false (ite (var sr_t) (bv 32 0x1) (bv 32 0x0))))
adE "swap.b r0, r1" 6108 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _regv (| (& (ite (var _priv) (var r0b) (var r0)) (bv 32 0xffff0000)) (| (<< (& (ite (var _priv) (var r0b) (var r0)) (bv 32 0xff)) (bv 32 0x8) false) (& (>> (ite (var _priv) (var r0b) (var r0)) (bv 32 0x8) false) (bv 32 0xff))))) (branch (var _priv) (set r1b (var _regv)) (set r1 (var _regv))))
adE "swap.w r15, r7" 67f9 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _regv (| (<< (var r15) (bv 32 0x10) false) (>> (var r15) (bv 32 0x10) false))) (branch (var _priv) (set r7b (var _regv)) (set r7 (var _regv))))
adE "xtrct r9, r10" 2a9d 0x0 (set r10 (| (<< (var r9) (bv 32 0x10) false) (>> (var r10) (bv 32 0x10) false)))

# Arithmetic operation instructions
adE "add r0, r1" 310c 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set _regv (+ (ite (var _priv) (var r0b) (var r0)) (ite (var _priv) (var r1b) (var r1)))) (branch (var _priv) (set r1b (var _regv)) (set r1 (var _regv))))
adE "add 0x42, r9" 7942 0x0 (set r9 (+ (bv 32 0x42) (var r9)))
adE "addc r10, r11" 3bae 0x100 (seq (set sum (+ (+ (var r10) (var r11)) (cast 32 false (ite (var sr_t) (bv 32 0x1) (bv 32 0x0))))) (set sr_t (|| (|| (&& (msb (var r10)) (msb (var r11))) (&& (! (msb (var sum))) (msb (var r11)))) (&& (msb (var r10)) (! (msb (var sum)))))) (set r11 (var sum)))
adE "addv r1, r0" 301f 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set sum (+ (ite (var _priv) (var r1b) (var r1)) (ite (var _priv) (var r0b) (var r0)))) (set sr_t (|| (&& (&& (! (msb (var sum))) (msb (ite (var _priv) (var r1b) (var r1)))) (msb (ite (var _priv) (var r0b) (var r0)))) (&& (&& (msb (var sum)) (! (msb (ite (var _priv) (var r1b) (var r1))))) (! (msb (ite (var _priv) (var r0b) (var r0))))))) (set _regv (var sum)) (branch (var _priv) (set r0b (var _regv)) (set r0 (var _regv))))
adE "cmp/eq 0x99, r0" 8899 0x10 (seq (set _priv (&& (var sr_d) (var sr_r))) (set sr_t (== (bv 32 0x99) (ite (var _priv) (var r0b) (var r0)))))
adE "cmp/eq r9, r14" 3e90 0x0 (set sr_t (== (var r9) (var r14)))
adE "cmp/hs r13, r11" 3bd2 0x10 (set sr_t (|| (! (ule (var r11) (var r13))) (== (var r11) (var r13))))
adE "cmp/ge r1, r10" 3a13 0x44 (seq (set _priv (&& (var sr_d) (var sr_r))) (set sr_t (|| (! (sle (var r10) (ite (var _priv) (var r1b) (var r1)))) (== (var r10) (ite (var _priv) (var r1b) (var r1))))))
adE "cmp/hi r6, r3" 3366 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set sr_t (! (ule (ite (var _priv) (var r3b) (var r3)) (ite (var _priv) (var r6b) (var r6))))))
adE "cmp/gt r10, r12" 3ca7 0x0 (set sr_t (! (sle (var r12) (var r10))))
adE "cmp/pz r1" 4111 0x0 (seq (set _priv (&& (var sr_d) (var sr_r))) (set sr_t (|| (! (sle (ite (var _priv) (var r1b) (var r1)) (bv 32 0x0))) (== (ite (var _priv) (var r1b) (var r1)) (bv 32 0x0)))))
adE "cmp/pl r15" 4f15 0x0 (set sr_t (! (sle (var r15) (bv 32 0x0))))
adE "cmp/str r9, r10" 2a9c 0x0 (seq (set xor (^ (var r9) (var r10))) (set eq (== (& (var xor) (bv 32 0xff)) (bv 32 0x0))) (set xor (>> (var xor) (bv 32 0x8) false)) (set eq (|| (var eq) (== (& (var xor) (bv 32 0xff)) (bv 32 0x0)))) (set xor (>> (var xor) (bv 32 0x8) false)) (set eq (|| (var eq) (== (& (var xor) (bv 32 0xff)) (bv 32 0x0)))) (set xor (>> (var xor) (bv 32 0x8) false)) (set eq (|| (var eq) (== (& (var xor) (bv 32 0xff)) (bv 32 0x0)))) (set sr_t (var eq)))

# Misc
adE "bt 0x00000004" 8900 0x0 (branch (var sr_t) (jmp (+ (+ (bv 32 0x0) (bv 32 0x4)) (<< (bv 32 0x0) (bv 32 0x1) false))) nop)
adE "bt 0xd3adb008" 89fe 0xd3adb008 (branch (var sr_t) (jmp (+ (+ (bv 32 0xd3adb008) (bv 32 0x4)) (<< (bv 32 0xfffffffe) (bv 32 0x1) false))) nop)
adE "bra 0x00000004"	0xa000
adE "bra 0x00000006"	0xa001
adE "bsr 0x00000004"	0xb000
adE "bsr 0x00000002"	0xbfff
adE "bsr 0x0000000e"	0xbffd 0x10
adE "tst 0xff, r0"	0xc8ff
adE "mov.w @(0x000,pc), r0"	0x9000
adE "mov.w @(0x1fe,pc), r0"	0x90ff
adE "mov.l @(0x000,pc), r0"	0xd000
adE "mov.l @(0x3fc,pc), r0"	0xd0ff
adE "mov.w @(0x000,gbr), r0"	0xc500
adE "mov.w @(0x1fe,gbr), r0"	0xc5ff
adE "mov.l @(0x000,gbr), r0"	0xc600
adE "mov.l @(0x3fc,gbr), r0"	0xc6ff
