ad "and x1, x2, 3" 41044092
a "and x1, x2, x3" 4100038a
a "and x1, x2, x3, lsl 8" 4120038a
a "and x1, x2, x3, lsr 8" 4120438a
a "and x1, x2, x3, asr 16" 4140838a
a "and x1, x2, x3, ror 3" 410cc38a
a "and w1, w2, 3" 41040012
a "and w1, w2, w3" 4100030a
a "and w1, w2, w3, lsl 8" 4120030a
a "and w1, w2, w3, lsr 8" 4120430a
a "and w1, w2, w3, asr 16" 4140830a
a "and w1, w2, w3, ror 3" 410cc30a
a "ands w1, w2, 3" 41040072
a "ands x1, x2, 3" 410440f2
a "ands w1, w2, w3, ror 3" 410cc36a
a "ands x1, x2, x3, ror 3" 410cc3ea
a "bic x1, x2, x3" 4100238a
a "bic x1, x2, x3, lsl 8" 4120238a
a "bic x1, x2, x3, lsr 8" 4120638a
a "bic x1, x2, x3, asr 16" 4140a38a
a "bic x1, x2, x3, ror 3" 410ce38a
a "bics x1, x2, x3, ror 3" 410ce3ea
a "bic w1, w2, w3" 4100230a
a "bic w1, w2, w3, ror 3" 410ce30a
a "bics w1, w2, w3, ror 3" 410ce36a
a "orr w0, w13, w20" a001142a
a "orr w22, w3, 0x2" 76001f32
a "orr x0, x13, x20" a00114aa
a "orr x1, x23, x0" e10200aa
a "orr x2, x3, 0x3" 620440b2
a "orr x2, x3, 0x7" 620840b2
a "orr x2, x3, x20" 620014aa
a "orr x22, x3, 0x2" 76007fb2
a "orn w0, w13, w20" a001342a
a "orn x0, x13, x20" a00134aa
a "orn x0, x13, x20, ror 15" a03df4aa
a "eor w22, w3, 0x2" 76001f52
a "eor w0, w13, w20" a001144a
a "eor x0, x13, x20" a00114ca
a "eor x0, x13, x20, ror 15" a03dd4ca
a "eon w0, w13, w20" a001344a
a "eon x0, x13, x20" a00134ca
a "eon x0, x13, x20, ror 15" a03df4ca
a "adrp x5, 0x0" 05000090
ad "adrp x0, 0x11341000" e07fff90 0x12345678
ad "adrp x0, 0x18343000" e0ff02d0 0x12345678
a "add x0, x1, x2" 2000028b
a "add x0, xzr, x30" e0031e8b
a "b 0x0" 00000014
a "b ." 00000014
a "b 0x7efd4" f5fb0114
a "b 0x7fffff8" feffff15
a "b 0x8" 02000014
a "b 0xff4" fd030014
a "b 0x100005fcc" f9010014 0x1000057e8
a "b 0x100005004" 07feff17 0x1000057e8
a "b.eq -0x100024" e0fe7f54
a "b.eq -0x24" e0feff54
a "b.eq 0x1000378d4" a0c61b54 0x100000000
a "b.eq 0x324" 20190054
a "b.hs -0x100024" e2fe7f54
a "b.hs -0x24" e2feff54
a "b.hs 0x1000378d4" a2c61b54 0x100000000
a "b.hs 0x324" 22190054
a "bl 0x8" 02000094
a "bl 0xfd4" f5030094
a "blr x7" e0003fd6
a "blr x12" 80013fd6
a "blr x30" c0033fd6
a "br x0" 00001fd6
a "br x4" 80001fd6
a "br x9" 20011fd6
a "br x30" c0031fd6
a "dmb ish" bf3b03d5
a "dmb ishld" bf3903d5
a "dmb ishst" bf3a03d5
a "dmb ld" bf3d03d5
a "dmb nsh" bf3703d5
a "dmb nshld" bf3503d5
a "dmb nshst" bf3603d5
a "dmb osh" bf3303d5
a "dmb oshld" bf3103d5
a "dmb oshst" bf3203d5
a "dmb st" bf3e03d5
a "dmb sy" bf3f03d5
a "dsb ish" 9f3b03d5
a "dsb ishld" 9f3903d5
a "dsb ishst" 9f3a03d5
a "dsb ld" 9f3d03d5
a "dsb nsh" 9f3703d5
a "dsb nshld" 9f3503d5
a "dsb nshst" 9f3603d5
a "dsb osh" 9f3303d5
a "dsb oshld" 9f3103d5
a "dsb oshst" 9f3203d5
a "dsb st" 9f3e03d5
a "dsb sy" 9f3f03d5
a "isb sy" df3f03d5
a "ldr w2, [x7, -10]" e2605fb8
a "ldr w2, [x7, -133]" e2b057b8
a "ldr w2, [x7, -256]" e20050b8
a "ldr w2, [x7, 113]" e21047b8
a "ldr w2, [x7, 236]" e2ec40b9
a "ldr w2, [x8, -10]" 02615fb8
a "ldr w2, [x8, -133]" 02b157b8
a "ldr w2, [x8, -256]" 020150b8
a "ldr w2, [x8, 113]" 021147b8
a "ldr w2, [x8, 236]" 02ed40b9
a "ldr w3, [x7, -10]" e3605fb8
a "ldr w3, [x7, -133]" e3b057b8
a "ldr w3, [x7, -256]" e30050b8
a "ldr w3, [x7, 113]" e31047b8
a "ldr w3, [x7, 236]" e3ec40b9
a "ldr w3, [x8, -10]" 03615fb8
a "ldr w3, [x8, -133]" 03b157b8
a "ldr w3, [x8, -256]" 030150b8
a "ldr w3, [x8, 113]" 031147b8
a "ldr w3, [x8, 236]" 03ed40b9
a "ldr x4, [x6, 0x14]" c44041f8
a "ldr x5, [x1, -0x20]" 25005ef8
a "ldr x5, [x1, -0x32]" 25e05cf8
a "ldr x8, [x3, 0x10]" 680840f9
a "ldr x8, [x3, x1]" 686861f8
ad "ldrb w2, [x7, -0xa]!" e26c5f38
ad "ldrb w2, [x7, -0x85]!" e2bc5738
ad "ldrb w2, [x7, -0x100]!" e20c5038
ad "ldrb w2, [x7, 0x71]!" e21c4738
ad "ldrb w2, [x7, 0xec]!" e2cc4e38
ad "ldrb w2, [x8, -0xa]!" 026d5f38
ad "ldrb w2, [x8, -0x85]!" 02bd5738
ad "ldrb w2, [x8, -0x100]!" 020d5038
ad "ldrb w2, [x8], 0x70" 02054738
ad "ldrb w2, [x8], 0xec" 02c54e38
ad "ldrb w3, [x7, -0xa]!" e36c5f38
ad "ldrb w4, [x7, -0x85]!" e4bc5738
ad "ldrb w5, [x7, -0x100]!" e50c5038
ad "ldrb w6, [x7], 0x71" e6144738
ad "ldrb w7, [x7]" e7004039
ad "ldrb w7, [x7, 0xfff]" e7fc7f39
ad "ldrb w8, [x30, -0xa]!" c86f5f38
ad "ldrb w9, [x29, -0x85]!" a9bf5738
ad "ldrb w10, [x28, -0x100]!" 8a0f5038
ad "ldrb w11, [x27, 0x71]" 6bc74139
ad "ldrb w12, [x26], 0xec" 4cc74e38
ad "ldrb w13, [x25, x2]" 2d6b6238
ad "ldrb w5, [x24, x0, lsl 0]" 057b6038
ad "ldrh w2, [x23, -0xa]!" e26e5f78
ad "ldrh w2, [x22, -0x85]!" c2be5778
ad "ldrh w2, [x21, -0x100]!" a20e5078
ad "ldrh w18, [x26]" 52034079
ad "ldrh w2, [x20, 0x71]!" 821e4778
ad "ldrh w2, [x19], 0xec" 62c64e78
ad "ldrh w2, [x18, -0xa]!" 426e5f78
ad "ldrh w2, [x17, -0x85]!" 22be5778
ad "ldrh w2, [x16, -0x100]!" 020e5078
ad "ldrh w2, [x15, 0x71]!" e21d4778
ad "ldrh w2, [x14, 0xf08]" c2115e79
ad "ldrh w3, [x13, -0xa]!" a36d5f78
ad "ldrh w3, [x12, -0x85]!" 83bd5778
ad "ldrh w3, [x8, x6]" 03696678
ad "ldrh w3, [x8, x6, lsl 1]" 03796678
ad "ldrsb w2, [x7, -0xa]!" e26cdf38
ad "ldrsb x2, [x0, -0x85]!" 02bc9738
ad "ldrsb w2, [x1, -0x100]!" 220cd038
ad "ldrsb x2, [sp, 0x71]!" e21f8738
ad "ldrsb w2, [x3, 0xec]!" 62ccce38
ad "ldrsb x2, [x4, -0xa]!" 826c9f38
ad "ldrsb w2, [x5, -0x85]!" a2bcd738
ad "ldrsb x2, [x6, -0x100]!" c20c9038
ad "ldrsb w11, [x12]" 8b01c039
ad "ldrsb w2, [x7, 0xfff]" e2fcff39
ad "ldrsb x2, [x8], 0xf0" 02058f38
ad "ldrsb w3, [x9, -0xa]!" 236ddf38
ad "ldrsb x3, [x10, -0x85]!" 43bd9738
ad "ldrsb w3, [x11, -0x100]!" 630dd038
ad "ldrsb x3, [x12], 0x70" 83058738
ad "ldrsb w0, [x13, w14, uxtw 0]" a059ee38
ad "ldrsb w0, [x15, x16, lsl 0]" e079f038
ad "ldrsb w0, [x17, w18, sxtw]" 20caf238
ad "ldrsb w0, [x19, x20, sxtx 0]" 60faf438
ad "ldrsb w0, [x21, x22]" a06af638
ad "ldrsh w2, [x7, -0xa]!" e26cdf78
ad "ldrsh x2, [x7, -0x85]!" e2bc9778
ad "ldrsh w2, [x7, -0x100]!" e20cd078
ad "ldrsh w2, [x7, 0x71]!" e21cc778
ad "ldrsh x2, [x7, 0xec]!" e2cc8e78
ad "ldrsh x2, [x8, -0xa]!" 026d9f78
ad "ldrsh w2, [x8], 0x71" 0215c778
ad "ldrsh x2, [x8], 0xec" 02c58e78
ad "ldrsh x0, [x1]" 20008079
ad "ldrsh w3, [x7, 0x72]" e3e4c079
ad "ldrsh x3, [x7, 0x1ffe]" e3fcbf79
ad "ldrsh w3, [x8, x3]" 0369e378
ad "ldrsh w1, [x2, w3, uxtw 1]" 4158e378
ad "ldrsw x15, [sp, -0xc]!" ef4f9fb8
ad "ldrsw x15, [sp, 0xc]!" efcf80b8
ad "ldrsw x0, [x1]" 200080b9
ad "ldrsw x15, [sp, 0xc]" ef0f80b9
ad "ldrsw x15, [sp], 0xc" efc780b8
ad "ldrsw x15, [sp, 0x3ffc]" efffbfb9
ad "ldrsw x8, [x12, x9]" 8869a9b8
ad "ldrsw x8, [x12, w9, uxtw]" 8849a9b8
ad "ldrsw x8, [x12, x9, lsl 2]" 8879a9b8
ad "ldrsw x8, [x12, x9, sxtx 2]" 88f9a9b8
ad "ldrsw x5, 0xffffc" e5ff7f98
ad "ldrsw x5, 0xfffffffffff00000" 05008098
ad "mov x20, x0" f40300aa
ad "mov w2, wsp" e2030011
ad "mov sp, x20" 9f020091
ad "mov w5, w18" e503122a
ad "mov x23, x4" f70304aa
a "mov x9, 0x5" a90080d2
dB "mov x9, 0x5" a90080d2
a "mov w7, 0xffff" e7ff9f52
dB "mov w12, 0xffff" e7ff9fd2
a "mov w15, 0xacdb0000" 6f9bb552
dB "mov w15, 0xacdb0000" 6f9bb552
a "mov w15, 0xffff0000" efffbf52
dB "mov w15, 0xffff0000" efffbf52
a "mov x30, 0x884800000000" 1e09d1d2
dB "mov x30, 0x884800000000" 1e09d1d2
a "mov x29, 0xffff00000000" fdffdfd2
dB "mov x29, 0xffff00000000" fdffdfd2
a "mov x27, 0x3721000000000000" 3be4e6d2
dB "mov x27, 0x3721000000000000" 3be4e6d2
a "mov x26, 0xffff000000000000" faffffd2
dB "mov x26, 0xffff000000000000" faffffd2
a "mov w25, 0xffffcfc7" 19078612
dB "mov w25, 0xffffcfc7" 19078612
a "mov w24, 0xffffffff" 18008012
dB "mov w24, 0xffffffff" 18008012
a "mov w23, 0xdeadffff" 572aa412
dB "mov w23, 0xdeadffff" 572aa412
a "mov x22, 0xffffffffffff1024" 76fb9d92
dB "mov x22, 0xffffffffffff1024" 76fb9d92
a "mov x21, 0xffffffff2048ffff" f5f6bb92
dB "mov x21, 0xffffffff2048ffff" f5f6bb92
a "mov x20, 0xffff4096ffffffff" 34edd792
dB "mov x20, 0xffff4096ffffffff" 34edd792
a "mov x19, 0x8192ffffffffffff" b3cdef92
dB "mov x19, 0x8192ffffffffffff" b3cdef92
a "mov x18, 0xffffffffffffffff" 12008092
dB "mov x18, 0xffffffffffffffff" 12008092
a "mov w17, 0x00fc00fc" f1970e32
dB "mov w17, 0x00fc00fc" f1970e32
a "mov x16, 0xaaaaaaaaaaaaaaaa" f0f301b2
dB "mov x16, 0xaaaaaaaaaaaaaaaa" f0f301b2
ad "movk x16, 0xf" f00180f2
ad "movk w13, 0xffff, lsl 16" edffbf72
a "movn x6, 0x2" 46008092 # alias
ad "movn x7, 0, lsl 16" 0700a092
a "movn x22, 0xabcd, lsl 48" b679f592 # alias
ad "movn w9, 0, lsl 16" 0900a012
a "movz x1, 0x5" a10080d2 # alias
ad "movz w10, 0, lsl 16" 0a00a052
a "movz x17, 0x5fff, lsl 32" f1ffcbd2 # alias
ad "movz x11, 0, lsl 32" 0b00c0d2
a "nop" 1f2003d5
a "str w2, [x7, -10]" e2601fb8
a "str w2, [x7, -133]" e2b017b8
a "str w2, [x7, -256]" e20010b8
a "str w2, [x7, 113]" e21007b8
a "str w2, [x7, 236]" e2ec00b9
a "str w2, [x8, -10]" 02611fb8
a "str w2, [x8, -133]" 02b117b8
a "str w2, [x8, -256]" 020110b8
a "str w2, [x8, 113]" 021107b8
a "str w2, [x8, 236]" 02ed00b9
a "str w3, [x7, -10]" e3601fb8
a "str w3, [x7, -133]" e3b017b8
a "str w3, [x7, -256]" e30010b8
a "str w3, [x7, 113]" e31007b8
a "str w3, [x7, 236]" e3ec00b9
a "str w3, [x8, -10]" 03611fb8
a "str w3, [x8, -133]" 03b117b8
a "str w3, [x8, -256]" 030110b8
a "str w3, [x8, 113]" 031107b8
a "str w3, [x8, 236]" 03ed00b9
ad "strb w2, [x7, -0xa]!" e26c1f38
ad "strb w2, [x7, -0x85]!" e2bc1738
ad "strb w2, [x7, -0x100]!" e20c1038
ad "strb w2, [x7, 0x71]!" e21c0738
ad "strb w24, [x23]" f8020039
ad "strb w2, [x7, 0xfff]" e2fc3f39
ad "strb w2, [x8], 0xff" 02f50f38
ad "strb w3, [x8, x4]" 03692438
ad "strb w10, [sp, w15, uxtw]" ea4b2f38
ad "strb w23, [x28, x17, lsl 0]" 977b3138
ad "strb w2, [x3, w1, sxtw 0]" 62d82138
ad "strb w4, [x5, x6, sxtx]" a4e82638
ad "strh w2, [x7, -0xa]!" e26c1f78
ad "strh w2, [x7, -0x100]!" e20c1078
ad "strh w2, [x7, 0xff]!" e2fc0f78
ad "strh w5, [x14]" c5010079
ad "strh w2, [x7, 0x1ffe]" e2fc3f79
ad "strh w3, [x8, x2]" 03692278
ad "strh w20, [sp, w19, uxtw]" f44b3378
ad "strh w28, [sp, x26, lsl 1]" fc7b3a78
ad "strh w18, [x30, w0, sxtw]" d2cb2078
ad "strh w16, [x25, x5, sxtx 1]" 30fb2578
a "stur w2, [x7, -10]" e2601fb8
a "stur w2, [x7, -133]" e2b017b8
a "stur w2, [x7, -256]" e20010b8
a "stur w2, [x7, 113]" e21007b8
a "stur w2, [x7, 236]" e2c00eb8
a "stur w2, [x8, -10]" 02611fb8
a "stur w2, [x8, -133]" 02b117b8
a "stur w2, [x8, -256]" 020110b8
a "stur w2, [x8, 113]" 021107b8
a "stur w2, [x8, 236]" 02c10eb8
a "stur w3, [x7, -10]" e3601fb8
a "stur w3, [x7, -133]" e3b017b8
a "stur w3, [x7, -256]" e30010b8
a "stur w3, [x7, 113]" e31007b8
a "stur w3, [x7, 236]" e3c00eb8
a "stur w3, [x8, -10]" 03611fb8
a "stur w3, [x8, -133]" 03b117b8
a "stur w3, [x8, -256]" 030110b8
a "stur w3, [x8, 113]" 031107b8
a "stur w3, [x8, 236]" 03c10eb8
a "sub x0, xzr, x2" e00302cb
a "svc 6" c10000d4
a "mrs x3, SP_EL0" 034138d5
a "msr 0xc208, x3" 034118d5
a "msr SP_EL0, x3" 034118d5
a "msr sp_el0, x3" 034118d5
a "cbnz w3, 0x1fffd4" a3feff35
a "cbz x3, 0x1fffe8" 43ffffb4
d "addg x0, sp, 0x80, 0x4" e0138891
dE "addg x12, x8, 0x0, 0x2" 91a0090c
d "subg x0, sp, 0x20, 0xf" e03f82d1
d "irg sp, x0" 1f10df9a
d "irg x13, x3, x7" 6d10c79a
d "subp x13, x7, sp" ed00df9a
d "gmi x13, x3, x7" 6d14c79a
d "subps x13, x3, x7" 6d00c7ba
d "cmpp sp, x13" ff03cdba
d "stg x13, [x3], 0x0" 6d0420d9
d "stg x13, [x3, 0x10]" 6d1820d9
d "stg x13, [x3, 0x10]!" 6d1c20d9
d "stzgm x12, [x0]" 0c0020d9
d "ldg x13, [x3, 0x10]" 6d1060d9
d "ldg x13, [x3, 0x0]" 6d0060d9
d "stzg x13, [x3], 0x10" 6d1460d9
d "stzg x13, [x3, 0x0]" 6d0860d9
d "stzg x13, [x3, 0x0]!" 6d0c60d9
d "st2g sp, [sp], 0x20" ff27a0d9
d "stgm x0, [x1]" 2000a0d9
d "stz2g sp, [sp], 0x50" ff57e0d9
d "ldgm x10, [x0]" 0a00e0d9
d "stgp x1, x3, [x3], 0x70" 618c8368
d "bti" 1f2403d5
d "bti c" 5f2403d5
d "bti j" 9f2403d5
d "bti jc" df2403d5
a "sbfm w0, w1, 31, 5" 20141f13 # alias
a "sbfm x3, x2, 8, 63" 43fc4893
a "ubfm w0, w1, 2, 31" 207c0253 # alias
a "ubfm x2, x3, 63, 7" 621c7fd3
ad "sbfiz w4, w5, 0x1f, 1" a4000113
ad "sbfiz x6, x7, 1, 0x3f" e6f87f93
ad "ubfiz w8, w9, 1, 0xf" 28391f53
ad "ubfiz x10, x11, 6, 0x13" 6a497ad3
ad "sbfx w12, w13, 0xf, 0x10" ac790f13
ad "sbfx x14, x15, 0x21, 0x1b" eeed6193
ad "ubfx w16, w17, 0x1d, 2" 307a1d53
ad "ubfx x18, x19, 2, 0x39" 72ea42d3
a "add x0, x0, 1" 00040091
a "add x0, x0, 1, lsl 12" 00044091
a "add x0, x0, 2, lsl 12" 00084091
a "add x0, x0, x1, lsl 1" 0004018b
a "add x0, x0, x1, lsl 2" 0008018b
a "add x0, x0, x1, lsl 12" 0030018b
a "add x0, x0, x1, lsr 1" 0004418b
a "add x0, x0, x1, lsr 2" 0008418b
a "add x0, x0, x1, lsr 12" 0030418b
a "add x0, x0, x1, asr 1" 0004818b
a "add x0, x0, x1, asr 2" 0008818b
a "add x0, x0, x1, asr 12" 0030818b
d "add x0, x0, 1" 00040091 0x0 (set x0 (+ (var x0) (bv 64 0x1)))
d "add x1, x2, 0x42" 41080191 0x0 (set x1 (+ (var x2) (bv 64 0x42)))
d "add x1, x2, x3" 4100038b 0x0 (set x1 (+ (var x2) (var x3)))
d "add sp, sp, x5" ff63258b 0x0 (set sp (+ (var sp) (var x5)))
d "add w2, w3, w4" 6200040b 0x0 (set x2 (cast 64 false (+ (cast 32 false (var x3)) (cast 32 false (var x4)))))
d "add wsp, wsp, w4" ff43240b 0x0 (set sp (cast 64 false (+ (cast 32 false (var sp)) (cast 32 false (var x4)))))
d "add x6, x7, 0x42" e6080191 0x0 (set x6 (+ (var x7) (bv 64 0x42)))
d "add w6, w7, 0x42" e6080111 0x0 (set x6 (cast 64 false (+ (cast 32 false (var x7)) (bv 32 0x42))))
d "adds x6, x7, x8" e60008ab 0x0 (seq (set a (var x7)) (set b (var x8)) (set x6 (+ (var x7) (var x8))) (set cf (msb (+ (cast 65 false (var a)) (cast 65 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var x6))))) (set zf (is_zero (var x6))) (set nf (msb (var x6))))
d "adds w8, w9, w10" 28010a2b 0x0 (seq (set a (cast 32 false (var x9))) (set b (cast 32 false (var x10))) (set x8 (cast 64 false (+ (cast 32 false (var x9)) (cast 32 false (var x10))))) (set cf (msb (+ (cast 33 false (var a)) (cast 33 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (cast 32 false (var x8)))))) (set zf (is_zero (cast 32 false (var x8)))) (set nf (msb (cast 32 false (var x8)))))
d "sub x9, x10, x11" 49010bcb 0x0 (set x9 (- (var x10) (var x11)))
d "subs x12, x13, x14" ac010eeb 0x0 (seq (set a (var x13)) (set b (var x14)) (set x12 (- (var x13) (var x14))) (set cf (ule (var b) (var a))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var x12))))) (set zf (is_zero (var x12))) (set nf (msb (var x12))))
d "sub w11, w12, w13" 8b010d4b 0x0 (set x11 (cast 64 false (- (cast 32 false (var x12)) (cast 32 false (var x13)))))
d "sub x1, x19, 8, lsl 12" 612240d1 0x0 (set x1 (- (var x19) (bv 64 0x8000)))
d "adc x15, x16, x17" 0f02119a 0x0 (set x15 (+ (+ (var x16) (var x17)) (ite (var cf) (bv 64 0x1) (bv 64 0x0))))
d "adc w14, w15, w16" ee01101a 0x0 (set x14 (cast 64 false (+ (+ (cast 32 false (var x15)) (cast 32 false (var x16))) (ite (var cf) (bv 32 0x1) (bv 32 0x0)))))
d "sbc x18, x19, x20" 720214da 0x0 (set x18 (- (- (var x19) (var x20)) (ite (var cf) (bv 64 0x0) (bv 64 0x1))))
d "sbcs x21, x22, x23" d50217fa 0x0 (seq (set a (var x22)) (set b (var x23)) (set x21 (- (- (var x22) (var x23)) (ite (var cf) (bv 64 0x0) (bv 64 0x1)))) (set cf (msb (+ (+ (cast 65 false (var a)) (cast 65 false (~ (var b)))) (ite (var cf) (bv 65 0x1) (bv 65 0x0))))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var x21))))) (set zf (is_zero (var x21))) (set nf (msb (var x21))))
d "sbcs w17, w18, w19" 5102137a 0x0 (seq (set a (cast 32 false (var x18))) (set b (cast 32 false (var x19))) (set x17 (cast 64 false (- (- (cast 32 false (var x18)) (cast 32 false (var x19))) (ite (var cf) (bv 32 0x0) (bv 32 0x1))))) (set cf (msb (+ (+ (cast 33 false (var a)) (cast 33 false (~ (var b)))) (ite (var cf) (bv 33 0x1) (bv 33 0x0))))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (cast 32 false (var x17)))))) (set zf (is_zero (cast 32 false (var x17)))) (set nf (msb (cast 32 false (var x17)))))
d "adcs x24, x25, x26" 38031aba 0x0 (seq (set a (var x25)) (set b (var x26)) (set x24 (+ (+ (var x25) (var x26)) (ite (var cf) (bv 64 0x1) (bv 64 0x0)))) (set cf (msb (+ (+ (cast 65 false (var a)) (cast 65 false (var b))) (ite (var cf) (bv 65 0x1) (bv 65 0x0))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var x24))))) (set zf (is_zero (var x24))) (set nf (msb (var x24))))
d "adcs w20, w21, w22" b402163a 0x0 (seq (set a (cast 32 false (var x21))) (set b (cast 32 false (var x22))) (set x20 (cast 64 false (+ (+ (cast 32 false (var x21)) (cast 32 false (var x22))) (ite (var cf) (bv 32 0x1) (bv 32 0x0))))) (set cf (msb (+ (+ (cast 33 false (var a)) (cast 33 false (var b))) (ite (var cf) (bv 33 0x1) (bv 33 0x0))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (cast 32 false (var x20)))))) (set zf (is_zero (cast 32 false (var x20)))) (set nf (msb (cast 32 false (var x20)))))
d "add x27, x28, w29, uxtb" 9b033d8b 0x0 (set x27 (+ (var x28) (cast 64 false (cast 8 false (var x29)))))
d "add x27, x28, w29, uxtb 3" 9b0f3d8b 0x0 (set x27 (+ (var x28) (<< (cast 64 false (cast 8 false (var x29))) (bv 6 0x3) false)))
d "add x27, x28, w29, uxth" 9b233d8b 0x0 (set x27 (+ (var x28) (cast 64 false (cast 16 false (var x29)))))
d "add x27, x28, w29, uxtw" 9b433d8b 0x0 (set x27 (+ (var x28) (cast 64 false (cast 32 false (var x29)))))
d "add x27, x28, x29, uxtx" 9b633d8b 0x0 (set x27 (+ (var x28) (var x29)))
d "add x27, x28, x29, uxtx 2" 9b6b3d8b 0x0 (set x27 (+ (var x28) (<< (var x29) (bv 6 0x2) false)))
d "add x1, x2, w3, sxtb" 4180238b 0x0 (set x1 (+ (var x2) (cast 64 (msb (cast 8 false (var x3))) (cast 8 false (var x3)))))
d "add x1, x2, w3, sxtb 1" 4184238b 0x0 (set x1 (+ (var x2) (<< (cast 64 (msb (cast 8 false (var x3))) (cast 8 false (var x3))) (bv 6 0x1) false)))
d "add x1, x2, w3, sxth" 41a0238b 0x0 (set x1 (+ (var x2) (cast 64 (msb (cast 16 false (var x3))) (cast 16 false (var x3)))))
d "add x1, x2, w3, sxtw" 41c0238b 0x0 (set x1 (+ (var x2) (cast 64 (msb (cast 32 false (var x3))) (cast 32 false (var x3)))))
d "add x1, x2, x3, sxtx" 41e0238b 0x0 (set x1 (+ (var x2) (cast 64 (msb (var x3)) (var x3))))
d "add x1, x2, x3, sxtx 4" 41f0238b 0x0 (set x1 (+ (var x2) (<< (cast 64 (msb (var x3)) (var x3)) (bv 6 0x4) false)))
d "add x1, sp, x3, lsl 2" e16b238b 0x0 (set x1 (+ (var sp) (<< (var x3) (bv 6 0x2) false)))
d "add x1, sp, x3" e163238b 0x0 (set x1 (+ (var sp) (var x3)))
d "add w27, w28, w29, uxtb" 9b033d0b 0x0 (set x27 (cast 64 false (+ (cast 32 false (var x28)) (cast 32 false (cast 8 false (var x29))))))
d "add w27, w28, w29, uxtb 2" 9b0b3d0b 0x0 (set x27 (cast 64 false (+ (cast 32 false (var x28)) (<< (cast 32 false (cast 8 false (var x29))) (bv 6 0x2) false))))
d "add w27, w28, w29, uxth" 9b233d0b 0x0 (set x27 (cast 64 false (+ (cast 32 false (var x28)) (cast 32 false (cast 16 false (var x29))))))
d "add w27, w28, w29, uxtw" 9b433d0b 0x0 (set x27 (cast 64 false (+ (cast 32 false (var x28)) (cast 32 false (var x29)))))
d "add w27, w28, w29, uxtw 1" 9b473d0b 0x0 (set x27 (cast 64 false (+ (cast 32 false (var x28)) (<< (cast 32 false (var x29)) (bv 6 0x1) false))))
d "add w27, w28, w29, uxtx" 9b633d0b 0x0 (set x27 (cast 64 false (+ (cast 32 false (var x28)) (cast 32 false (cast 64 false (var x29))))))
d "add w30, w1, w2, sxtb" 3e80220b 0x0 (set x30 (cast 64 false (+ (cast 32 false (var x1)) (cast 32 (msb (cast 8 false (var x2))) (cast 8 false (var x2))))))
d "add w30, w1, w2, sxth" 3ea0220b 0x0 (set x30 (cast 64 false (+ (cast 32 false (var x1)) (cast 32 (msb (cast 16 false (var x2))) (cast 16 false (var x2))))))
d "add w30, w1, w2, sxtw" 3ec0220b 0x0 (set x30 (cast 64 false (+ (cast 32 false (var x1)) (cast 32 (msb (cast 32 false (var x2))) (cast 32 false (var x2))))))
d "add w30, w1, w2, sxtx" 3ee0220b 0x0 (set x30 (cast 64 false (+ (cast 32 false (var x1)) (cast 32 (msb (cast 64 false (var x2))) (cast 64 false (var x2))))))
d "add w30, w1, w2, sxth 3" 3eac220b 0x0 (set x30 (cast 64 false (+ (cast 32 false (var x1)) (<< (cast 32 (msb (cast 16 false (var x2))) (cast 16 false (var x2))) (bv 6 0x3) false))))
d "add x1, x2, x2, lsl 24" 4160028b 0x0 (set x1 (+ (var x2) (<< (var x2) (bv 6 0x18) false)))
d "add x1, x2, x2, lsr 13" 4134428b 0x0 (set x1 (+ (var x2) (>> (var x2) (bv 6 0xd) false)))
d "add x1, x2, x2, asr 15" 413c828b 0x0 (set x1 (+ (var x2) (>> (var x2) (bv 6 0xf) (msb (var x2)))))
d "add w1, w2, w2, lsl 10" 4128020b 0x0 (set x1 (cast 64 false (+ (cast 32 false (var x2)) (<< (cast 32 false (var x2)) (bv 6 0xa) false))))
d "add w1, w2, w2, lsr 12" 4130420b 0x0 (set x1 (cast 64 false (+ (cast 32 false (var x2)) (>> (cast 32 false (var x2)) (bv 6 0xc) false))))
d "add w1, w2, w2, asr 31" 417c820b 0x0 (set x1 (cast 64 false (+ (cast 32 false (var x2)) (>> (cast 32 false (var x2)) (bv 6 0x1f) (msb (cast 32 false (var x2)))))))
d "adr x2, 0x10042" 02020050 0x10000 (set x2 (bv 64 0x10042))
ad "adrp x2, 0x4000" 020000b0 0x3210 (set x2 (bv 64 0x4000))
d "and x1, x2, x3" 4100038a 0x0 (set x1 (& (var x2) (var x3)))
d "and w1, w2, w3" 4100030a 0x0 (set x1 (cast 64 false (& (cast 32 false (var x2)) (cast 32 false (var x3)))))
d "ands x1, x2, x3" 410003ea 0x0 (seq (set x1 (& (var x2) (var x3))) (set zf (is_zero (var x1))) (set nf (msb (var x1))) (set cf false) (set vf false))
d "ands w1, w2, w3" 4100036a 0x0 (seq (set x1 (cast 64 false (& (cast 32 false (var x2)) (cast 32 false (var x3))))) (set zf (is_zero (cast 32 false (var x1)))) (set nf (msb (cast 32 false (var x1)))) (set cf false) (set vf false))
d "asr x1, x2, x3" 4128c39a 0x0 (set x1 (>> (var x2) (cast 6 false (var x3)) (msb (var x2))))
d "asr w1, w2, w3" 4128c31a 0x0 (set x1 (cast 64 false (>> (cast 32 false (var x2)) (cast 5 false (var x3)) (msb (cast 32 false (var x2))))))
d "asr w1, w2, 3" 417c0313 0x0 (set x1 (cast 64 false (>> (cast 32 false (var x2)) (bv 5 0x3) (msb (cast 32 false (var x2))))))
d "lsl x1, x2, x3" 4120c39a 0x0 (set x1 (<< (var x2) (cast 6 false (var x3)) false))
d "lsl w1, w2, w3" 4120c31a 0x0 (set x1 (cast 64 false (<< (cast 32 false (var x2)) (cast 5 false (var x3)) false)))
d "lsl w1, w2, 0x1f" 41000153 0x0 (set x1 (cast 64 false (<< (cast 32 false (var x2)) (bv 5 0x1f) false)))
d "lsr x1, x2, x3" 4124c39a 0x0 (set x1 (>> (var x2) (cast 6 false (var x3)) false))
d "lsr w1, w2, w3" 4124c31a 0x0 (set x1 (cast 64 false (>> (cast 32 false (var x2)) (cast 5 false (var x3)) false)))
d "lsr x1, x2, 0xd" 41fc4dd3 0x0 (set x1 (>> (var x2) (bv 6 0xd) false))
d "ror x1, x2, 0x2a" 41a8c293 0x0 (set x1 (| (>> (var x2) (bv 6 0x2a) false) (<< (var x2) (~- (bv 6 0x2a)) false)))
d "ror x1, x2, x3" 412cc39a 0x0 (set x1 (| (>> (var x2) (cast 6 false (var x3)) false) (<< (var x2) (~- (cast 6 false (var x3))) false)))
d "b 0x1c0ffe0" f83f3014 0x1000000 (jmp (bv 64 0x1c0ffe0))
d "blr x3" 60003fd6 0x0 (seq (set x30 (bv 64 0x4)) (jmp (var x3)))
ad "b.eq 0x11234" a0910054 0x10000 (branch (var zf) (jmp (bv 64 0x11234)) nop)
ad "b.ne 0x11234" a1910054 0x10000 (branch (! (var zf)) (jmp (bv 64 0x11234)) nop)
ad "b.hs 0x11234" a2910054 0x10000 (branch (var cf) (jmp (bv 64 0x11234)) nop)
ad "b.lo 0x11234" a3910054 0x10000 (branch (! (var cf)) (jmp (bv 64 0x11234)) nop)
ad "b.mi 0x11234" a4910054 0x10000 (branch (var nf) (jmp (bv 64 0x11234)) nop)
ad "b.pl 0x11234" a5910054 0x10000 (branch (! (var nf)) (jmp (bv 64 0x11234)) nop)
ad "b.vs 0x11234" a6910054 0x10000 (branch (var vf) (jmp (bv 64 0x11234)) nop)
ad "b.vc 0x11234" a7910054 0x10000 (branch (! (var vf)) (jmp (bv 64 0x11234)) nop)
ad "b.hi 0x11234" a8910054 0x10000 (branch (&& (var cf) (! (var zf))) (jmp (bv 64 0x11234)) nop)
ad "b.ls 0x11234" a9910054 0x10000 (branch (|| (! (var cf)) (var zf)) (jmp (bv 64 0x11234)) nop)
ad "b.ge 0x11234" aa910054 0x10000 (branch (! (^^ (var nf) (var vf))) (jmp (bv 64 0x11234)) nop)
ad "b.lt 0x11234" ab910054 0x10000 (branch (^^ (var nf) (var vf)) (jmp (bv 64 0x11234)) nop)
ad "b.gt 0x11234" ac910054 0x10000 (branch (! (|| (^^ (var nf) (var vf)) (var zf))) (jmp (bv 64 0x11234)) nop)
ad "b.le 0x11234" ad910054 0x10000 (branch (|| (^^ (var nf) (var vf)) (var zf)) (jmp (bv 64 0x11234)) nop)
ad "b.al 0x11234" ae910054 0x10000 (jmp (bv 64 0x11234))
ad "b.nv 0x11234" af910054 0x10000 (jmp (bv 64 0x11234))
a "b.cs 0x11234" a2910054 0x10000# same as b.hs
a "b.cc 0x11234" a3910054 0x10000# same as b.lo
# Capstone v5 required for these:
# d "bfc x1, 3, 5" e1137db3 0x0 (set x1 (& (var x1) (bv 64 0xf8)))
# d "bfc w1, 3, 5" e1131d33 0x0 (set x1 (cast 64 false (& (cast 32 false (var x1)) (bv 32 0xf8))))
d "bfi x1, x2, 0x16, 0xe" 41346ab3 0x0 (set x1 (| (& (var x1) (bv 64 0xfffffff0003fffff)) (<< (& (var x2) (bv 64 0x3fff)) (bv 6 0x16) false)))
d "bfi w1, w2, 0xa, 0xe" 41341633 0x0 (set x1 (cast 64 false (| (& (cast 32 false (var x1)) (bv 32 0xff0003ff)) (<< (& (cast 32 false (var x2)) (bv 32 0x3fff)) (bv 6 0xa) false))))
d "bfxil x1, x2, 0xd, 0x1e" 41a84db3 0x0 (set x1 (| (& (var x1) (bv 64 0xffffffffc0000000)) (>> (& (var x2) (bv 64 0x7ffffffe000)) (bv 6 0xd) false)))
d "bfxil w1, w2, 0xd, 0xa" 41580d33 0x0 (set x1 (cast 64 false (| (& (cast 32 false (var x1)) (bv 32 0xfffffc00)) (>> (& (cast 32 false (var x2)) (bv 32 0x7fe000)) (bv 6 0xd) false))))
d "bic x0, x1, x2" 2000228a 0x0 (set x0 (& (var x1) (~ (var x2))))
d "bic x0, x0, x2" 0000228a 0x0 (set x0 (& (var x0) (~ (var x2))))
d "bic w0, w1, w2" 2000220a 0x0 (set x0 (cast 64 false (& (cast 32 false (var x1)) (~ (cast 32 false (var x2))))))
d "bics x0, x1, x2" 200022ea 0x0 (seq (set x0 (& (var x1) (~ (var x2)))) (set zf (is_zero (var x0))) (set nf (msb (var x0))) (set cf false) (set vf false))
d "bics w0, w1, w2" 2000226a 0x0 (seq (set x0 (cast 64 false (& (cast 32 false (var x1)) (~ (cast 32 false (var x2)))))) (set zf (is_zero (cast 32 false (var x0)))) (set nf (msb (cast 32 false (var x0)))) (set cf false) (set vf false))
d "bics xzr, x2, x3" 5f0023ea 0x0 (seq (set zf (is_zero (& (var x2) (~ (var x3))))) (set nf (msb (& (var x2) (~ (var x3))))) (set cf false) (set vf false))
d "bics wzr, w0, w21" 1f00356a 0x0 (seq (set zf (is_zero (& (cast 32 false (var x0)) (~ (cast 32 false (var x21)))))) (set nf (msb (& (cast 32 false (var x0)) (~ (cast 32 false (var x21)))))) (set cf false) (set vf false))
d "bl 0xfac0" b0feff97 0x10000 (seq (set x30 (bv 64 0x10004)) (jmp (bv 64 0xfac0)))
d "blr x2" 40003fd6 0x10000 (seq (set x30 (bv 64 0x10004)) (jmp (var x2)))
d "cbz x1, 0x1100" 010800b4 0x1000 (branch (is_zero (var x1)) (jmp (bv 64 0x1100)) nop)
d "cbz w1, 0x1100" 01080034 0x1000 (branch (is_zero (cast 32 false (var x1))) (jmp (bv 64 0x1100)) nop)
d "cbnz x1, 0x1100" 010800b5 0x1000 (branch (! (is_zero (var x1))) (jmp (bv 64 0x1100)) nop)
d "cbnz w1, 0x1100" 01080035 0x1000 (branch (! (is_zero (cast 32 false (var x1)))) (jmp (bv 64 0x1100)) nop)
d "cmp x1, x2" 3f0002eb 0x0 (seq (set a (var x1)) (set b (var x2)) (set r (- (var a) (var b))) (set cf (ule (var b) (var a))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var r))))) (set zf (is_zero (var r))) (set nf (msb (var r))))
d "cmp w1, w2" 3f00026b 0x0 (seq (set a (cast 32 false (var x1))) (set b (cast 32 false (var x2))) (set r (- (var a) (var b))) (set cf (ule (var b) (var a))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var r))))) (set zf (is_zero (var r))) (set nf (msb (var r))))
d "cmn x1, x2" 3f0002ab 0x0 (seq (set a (var x1)) (set b (var x2)) (set r (+ (var a) (var b))) (set cf (msb (+ (cast 65 false (var a)) (cast 65 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var r))))) (set zf (is_zero (var r))) (set nf (msb (var r))))
d "cmn w1, w2" 3f00022b 0x0 (seq (set a (cast 32 false (var x1))) (set b (cast 32 false (var x2))) (set r (+ (var a) (var b))) (set cf (msb (+ (cast 33 false (var a)) (cast 33 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var r))))) (set zf (is_zero (var r))) (set nf (msb (var r))))
d "ccmp x1, x2, 1, eq" 210042fa 0x0 (branch (var zf) (seq (set a (var x1)) (set b (var x2)) (set r (- (var a) (var b))) (set cf (ule (var b) (var a))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var r))))) (set zf (is_zero (var r))) (set nf (msb (var r)))) (seq (set nf false) (set zf false) (set cf false) (set vf true)))
d "ccmp w1, w2, 2, ne" 2210427a 0x0 (branch (! (var zf)) (seq (set a (cast 32 false (var x1))) (set b (cast 32 false (var x2))) (set r (- (var a) (var b))) (set cf (ule (var b) (var a))) (set vf (&& (^^ (msb (var a)) (msb (var b))) (^^ (msb (var a)) (msb (var r))))) (set zf (is_zero (var r))) (set nf (msb (var r)))) (seq (set nf false) (set zf false) (set cf true) (set vf false)))
d "ccmn x1, x2, 4, hi" 248042ba 0x0 (branch (&& (var cf) (! (var zf))) (seq (set a (var x1)) (set b (var x2)) (set r (+ (var a) (var b))) (set cf (msb (+ (cast 65 false (var a)) (cast 65 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var r))))) (set zf (is_zero (var r))) (set nf (msb (var r)))) (seq (set nf false) (set zf true) (set cf false) (set vf false)))
d "ccmn w1, w2, 4, lo" 2430423a 0x0 (branch (! (var cf)) (seq (set a (cast 32 false (var x1))) (set b (cast 32 false (var x2))) (set r (+ (var a) (var b))) (set cf (msb (+ (cast 33 false (var a)) (cast 33 false (var b))))) (set vf (&& (! (^^ (msb (var a)) (msb (var b)))) (^^ (msb (var a)) (msb (var r))))) (set zf (is_zero (var r))) (set nf (msb (var r)))) (seq (set nf false) (set zf true) (set cf false) (set vf false)))
d "cinc x0, x1, eq" 2014819a 0x0 (set x0 (ite (var zf) (+ (var x1) (bv 64 0x1)) (var x1)))
d "csinc x0, x1, x2, eq" 2004829a 0x0 (set x0 (ite (var zf) (var x1) (+ (var x2) (bv 64 0x1))))
d "csinc x0, x1, x2, al" 20e4829a 0x0 (set x0 (var x1))
d "csinc w0, w1, w2, ne" 2014821a 0x0 (set x0 (cast 64 false (ite (! (var zf)) (cast 32 false (var x1)) (+ (cast 32 false (var x2)) (bv 32 0x1)))))
d "cinc w0, w1, ne" 2004811a 0x0 (set x0 (cast 64 false (ite (! (var zf)) (+ (cast 32 false (var x1)) (bv 32 0x1)) (cast 32 false (var x1)))))
d "cinv x0, x1, mi" 205081da 0x0 (set x0 (ite (var nf) (~ (var x1)) (var x1)))
d "csinv x0, x1, x2, mi" 204082da 0x0 (set x0 (ite (var nf) (var x1) (~ (var x2))))
d "csinv w0, w1, w2, pl" 2050825a 0x0 (set x0 (cast 64 false (ite (! (var nf)) (cast 32 false (var x1)) (~ (cast 32 false (var x2))))))
# Capstone v5 required for these, cs4 disassembles them wrong:
# d "csinv x1, xzr, xzr, al" e1e39fda 0x0 (set x1 (bv 64 0x0))
# d "csinv w1, wzr, wzr, al" e1e39f5a 0x0 (set x1 (cast 64 false (bv 32 0x0)))
d "csneg w0, w1, w2, vs" 2064825a 0x0 (set x0 (cast 64 false (ite (var vf) (cast 32 false (var x1)) (~- (cast 32 false (var x2))))))
d "cneg x0, x1, vc" 206481da 0x0 (set x0 (ite (! (var vf)) (~- (var x1)) (var x1)))
d "cls x2, x3" 6214c0da 0x0 (seq (set v (var x3)) (set i (bv 64 0xffffffffffffffff)) (set msb (msb (var v))) (repeat (! (^^ (msb (var v)) (var msb))) (seq (set v (<< (var v) (bv 6 0x1) (! (var msb)))) (set i (+ (var i) (bv 64 0x1))))) (set x2 (var i)))
d "cls w2, w3" 6214c05a 0x0 (seq (set v (cast 32 false (var x3))) (set i (bv 32 0xffffffff)) (set msb (msb (var v))) (repeat (! (^^ (msb (var v)) (var msb))) (seq (set v (<< (var v) (bv 6 0x1) (! (var msb)))) (set i (+ (var i) (bv 32 0x1))))) (set x2 (cast 64 false (var i))))
d "clz x2, x3" 6210c0da 0x0 (seq (set v (var x3)) (set i (bv 64 0x40)) (repeat (! (is_zero (var v))) (seq (set v (>> (var v) (bv 6 0x1) false)) (set i (- (var i) (bv 64 0x1))))) (set x2 (var i)))
d "clz w2, w3" 6210c05a 0x0 (seq (set v (cast 32 false (var x3))) (set i (bv 32 0x20)) (repeat (! (is_zero (var v))) (seq (set v (>> (var v) (bv 6 0x1) false)) (set i (- (var i) (bv 32 0x1))))) (set x2 (cast 64 false (var i))))
d "csel x0, x1, x2, eq" 2000829a 0x0 (set x0 (ite (var zf) (var x1) (var x2)))
d "csel w0, w1, w2, al" 20e0821a 0x0 (set x0 (cast 64 false (cast 32 false (var x1))))
d "cset x1, eq" e1179f9a 0x0 (set x1 (ite (var zf) (bv 64 0x1) (bv 64 0x0)))
d "cset w1, eq" e1179f1a 0x0 (set x1 (cast 64 false (ite (var zf) (bv 32 0x1) (bv 32 0x0))))
d "csetm x1, mi" e1539fda 0x0 (set x1 (ite (var nf) (bv 64 0xffffffffffffffff) (bv 64 0x0)))
d "csetm w1, mi" e1539f5a 0x0 (set x1 (cast 64 false (ite (var nf) (bv 32 0xffffffff) (bv 32 0x0))))
d "eor x0, x1, x2" 200002ca 0x0 (set x0 (^ (var x1) (var x2)))
d "eor w0, w1, w2" 2000024a 0x0 (set x0 (cast 64 false (^ (cast 32 false (var x1)) (cast 32 false (var x2)))))
d "eor x0, x0, x2" 000002ca 0x0 (set x0 (^ (var x0) (var x2)))
d "eor x0, x0, x2, lsl 2" 000802ca 0x0 (set x0 (^ (var x0) (<< (var x2) (bv 6 0x2) false)))
d "eon x0, x1, x2" 200022ca 0x0 (set x0 (^ (var x1) (~ (var x2))))
d "eon w0, w1, w2" 2000224a 0x0 (set x0 (cast 64 false (^ (cast 32 false (var x1)) (~ (cast 32 false (var x2))))))
d "orn x1, x2, x3" 410023aa 0x0 (set x1 (| (var x2) (~ (var x3))))
d "orn w1, w2, w3" 4100232a 0x0 (set x1 (cast 64 false (| (cast 32 false (var x2)) (~ (cast 32 false (var x3))))))
d "orr x1, x2, x3" 410003aa 0x0 (set x1 (| (var x2) (var x3)))
d "orr w1, w2, w3" 4100032a 0x0 (set x1 (cast 64 false (| (cast 32 false (var x2)) (cast 32 false (var x3)))))
d "extr x0, x1, x2, 5" 2014c293 0x0 (set x0 (cast 64 false (>> (append (var x1) (var x2)) (bv 6 0x5) false)))
d "extr w0, w1, w2, 5" 20148213 0x0 (set x0 (cast 64 false (cast 32 false (>> (append (cast 32 false (var x1)) (cast 32 false (var x2))) (bv 6 0x5) false))))
d "hvc 0x42" 420800d4 0x0 (goto hvc)
d "svc 0x42" 410800d4 0x0 (goto svc)
d "ldr x1, [x2]" 410040f9 0x0 (set x1 (loadw 0 64 (var x2)))
d "ldr w1, [x2]" 410040b9 0x0 (set x1 (cast 64 false (loadw 0 32 (var x2))))
d "ldr x1, [x2, 0x18]" 410c40f9 0x0 (set x1 (loadw 0 64 (+ (var x2) (bv 64 0x18))))
d "ldr x1, [x2, 0x18]!" 418c41f8 0x0 (seq (set x1 (loadw 0 64 (+ (var x2) (bv 64 0x18)))) (set x2 (+ (var x2) (bv 64 0x18))))
d "ldr x1, [x2, -0x18]!" 418c5ef8 0x0 (seq (set x1 (loadw 0 64 (- (var x2) (bv 64 0x18)))) (set x2 (- (var x2) (bv 64 0x18))))
d "ldr x1, [x2], 0x18" 418441f8 0x0 (seq (set x1 (loadw 0 64 (var x2))) (set x2 (+ (var x2) (bv 64 0x18))))
d "ldr x1, [x2], -0x18" 41845ef8 0x0 (seq (set x1 (loadw 0 64 (var x2))) (set x2 (- (var x2) (bv 64 0x18))))
d "ldr x1, 0x1028" 41010058 0x1000 (set x1 (loadw 0 64 (bv 64 0x1028)))
d "ldr w1, 0x1044" 21020018 0x1000 (set x1 (cast 64 false (loadw 0 32 (bv 64 0x1044))))
d "ldrb w1, [x2]" 41004039 0x0 (set x1 (cast 64 false (load 0 (var x2))))
d "ldrh w1, [x2]" 41004079 0x0 (set x1 (cast 64 false (loadw 0 16 (var x2))))
d "ldrb w1, [x2], 3" 41344038 0x0 (seq (set x1 (cast 64 false (load 0 (var x2)))) (set x2 (+ (var x2) (bv 64 0x3))))
d "ldur x1, [x2, -3]" 41d05ff8 0x0 (set x1 (loadw 0 64 (- (var x2) (bv 64 0x3))))
d "ldur w1, [x2, -3]" 41d05fb8 0x0 (set x1 (cast 64 false (loadw 0 32 (- (var x2) (bv 64 0x3)))))
d "ldurb w1, [x2, -3]" 41d05f38 0x0 (set x1 (cast 64 false (load 0 (- (var x2) (bv 64 0x3)))))
d "ldurh w1, [x2, -3]" 41d05f78 0x0 (set x1 (cast 64 false (loadw 0 16 (- (var x2) (bv 64 0x3)))))
d "ldr x8, [x25, x8]" 286b68f8 0x0 (set x8 (loadw 0 64 (+ (var x25) (var x8))))
d "ldr x8, [x25, x8, lsl 3]" 287b68f8 0x0 (set x8 (loadw 0 64 (+ (var x25) (<< (var x8) (bv 6 0x3) false))))
d "ldr x0, [x1, w2, uxtw]" 204862f8 0x0 (set x0 (loadw 0 64 (+ (var x1) (cast 64 false (cast 32 false (var x2))))))
d "ldr x0, [x1, w2, sxtw]" 20c862f8 0x0 (set x0 (loadw 0 64 (+ (var x1) (cast 64 (msb (cast 32 false (var x2))) (cast 32 false (var x2))))))
d "ldr x0, [x1, w2, sxtw 3]" 20d862f8 0x0 (set x0 (loadw 0 64 (+ (var x1) (<< (cast 64 (msb (cast 32 false (var x2))) (cast 32 false (var x2))) (bv 6 0x3) false))))
d "ldr x0, [x1, x2, sxtx]" 20e862f8 0x0 (set x0 (loadw 0 64 (+ (var x1) (cast 64 (msb (var x2)) (var x2)))))
d "ldrsb x0, [x1]" 20008039 0x0 (set x0 (cast 64 (msb (load 0 (var x1))) (load 0 (var x1))))
d "ldrsh x0, [x1]" 20008079 0x0 (set x0 (cast 64 (msb (loadw 0 16 (var x1))) (loadw 0 16 (var x1))))
d "ldrsw x0, [x1]" 200080b9 0x0 (set x0 (cast 64 (msb (loadw 0 32 (var x1))) (loadw 0 32 (var x1))))
d "ldrsb w0, [x1]" 2000c039 0x0 (set x0 (cast 64 false (cast 32 (msb (load 0 (var x1))) (load 0 (var x1)))))
d "ldrsh w0, [x1]" 2000c079 0x0 (set x0 (cast 64 false (cast 32 (msb (loadw 0 16 (var x1))) (loadw 0 16 (var x1)))))
d "ldursb x0, [x1]" 20008038 0x0 (set x0 (cast 64 (msb (load 0 (var x1))) (load 0 (var x1))))
d "ldursh x0, [x1]" 20008078 0x0 (set x0 (cast 64 (msb (loadw 0 16 (var x1))) (loadw 0 16 (var x1))))
d "ldursw x0, [x1]" 200080b8 0x0 (set x0 (cast 64 (msb (loadw 0 32 (var x1))) (loadw 0 32 (var x1))))
d "ldursb w0, [x1]" 2000c038 0x0 (set x0 (cast 64 false (cast 32 (msb (load 0 (var x1))) (load 0 (var x1)))))
d "ldursh w0, [x1]" 2000c078 0x0 (set x0 (cast 64 false (cast 32 (msb (loadw 0 16 (var x1))) (loadw 0 16 (var x1)))))
d "ldar x0, [x1]" 20fcdfc8 0x0 (set x0 (loadw 0 64 (var x1)))
d "ldar w0, [x1]" 20fcdf88 0x0 (set x0 (cast 64 false (loadw 0 32 (var x1))))
d "ldarb w0, [x1]" 20fcdf08 0x0 (set x0 (cast 64 false (load 0 (var x1))))
d "ldarh w0, [x1]" 20fcdf48 0x0 (set x0 (cast 64 false (loadw 0 16 (var x1))))
d "ldaxp x0, x1, [x2]" 40847fc8 0x0 (seq (set addr (var x2)) (set x0 (loadw 0 64 (var addr))) (set x1 (loadw 0 64 (+ (var addr) (bv 64 0x8)))))
d "ldaxp w0, w1, [x2]" 40847f88 0x0 (seq (set addr (var x2)) (set x0 (cast 64 false (loadw 0 32 (var addr)))) (set x1 (cast 64 false (loadw 0 32 (+ (var addr) (bv 64 0x4))))))
d "ldxp x0, x1, [x2]" 40047fc8 0x0 (seq (set addr (var x2)) (set x0 (loadw 0 64 (var addr))) (set x1 (loadw 0 64 (+ (var addr) (bv 64 0x8)))))
d "ldxp w0, w1, [x2]" 40047f88 0x0 (seq (set addr (var x2)) (set x0 (cast 64 false (loadw 0 32 (var addr)))) (set x1 (cast 64 false (loadw 0 32 (+ (var addr) (bv 64 0x4))))))
d "ldaxr x0, [x1]" 20fc5fc8 0x0 (set x0 (loadw 0 64 (var x1)))
d "ldaxr w0, [x1]" 20fc5f88 0x0 (set x0 (cast 64 false (loadw 0 32 (var x1))))
d "ldaxrb w0, [x1]" 20fc5f08 0x0 (set x0 (cast 64 false (load 0 (var x1))))
d "ldaxrh w0, [x1]" 20fc5f48 0x0 (set x0 (cast 64 false (loadw 0 16 (var x1))))
d "ldp x0, x1, [x2]" 400440a9 0x0 (seq (set addr (var x2)) (set x0 (loadw 0 64 (var addr))) (set x1 (loadw 0 64 (+ (var addr) (bv 64 0x8)))))
d "ldp w0, w1, [x2]" 40044029 0x0 (seq (set addr (var x2)) (set x0 (cast 64 false (loadw 0 32 (var addr)))) (set x1 (cast 64 false (loadw 0 32 (+ (var addr) (bv 64 0x4))))))
d "ldnp x0, x1, [x2]" 400440a8 0x0 (seq (set addr (var x2)) (set x0 (loadw 0 64 (var addr))) (set x1 (loadw 0 64 (+ (var addr) (bv 64 0x8)))))
d "ldnp w0, w1, [x2]" 40044028 0x0 (seq (set addr (var x2)) (set x0 (cast 64 false (loadw 0 32 (var addr)))) (set x1 (cast 64 false (loadw 0 32 (+ (var addr) (bv 64 0x4))))))
d "ldpsw x0, x1, [x2]" 40044069 0x0 (seq (set addr (var x2)) (set x0 (cast 64 (msb (loadw 0 32 (var addr))) (loadw 0 32 (var addr)))) (set x1 (cast 64 (msb (loadw 0 32 (+ (var addr) (bv 64 0x4)))) (loadw 0 32 (+ (var addr) (bv 64 0x4))))))
d "ldtr x0, [x1]" 200840f8 0x0 (set x0 (loadw 0 64 (var x1)))
d "ldtr w0, [x1]" 200840b8 0x0 (set x0 (cast 64 false (loadw 0 32 (var x1))))
d "ldtrb w0, [x1]" 20084038 0x0 (set x0 (cast 64 false (load 0 (var x1))))
d "ldtrh w0, [x1]" 20084078 0x0 (set x0 (cast 64 false (loadw 0 16 (var x1))))
d "ldtrsw x0, [x1]" 200880b8 0x0 (set x0 (cast 64 (msb (loadw 0 32 (var x1))) (loadw 0 32 (var x1))))
d "ldtrsb x0, [x1]" 20088038 0x0 (set x0 (cast 64 (msb (load 0 (var x1))) (load 0 (var x1))))
d "ldtrsh x0, [x1]" 20088078 0x0 (set x0 (cast 64 (msb (loadw 0 16 (var x1))) (loadw 0 16 (var x1))))
d "ldtrsb w0, [x1]" 2008c038 0x0 (set x0 (cast 64 false (cast 32 (msb (load 0 (var x1))) (load 0 (var x1)))))
d "ldtrsh w0, [x1]" 2008c078 0x0 (set x0 (cast 64 false (cast 32 (msb (loadw 0 16 (var x1))) (loadw 0 16 (var x1)))))
d "ldxr x0, [x1]" 207c5fc8 0x0 (set x0 (loadw 0 64 (var x1)))
d "ldxr w0, [x1]" 207c5f88 0x0 (set x0 (cast 64 false (loadw 0 32 (var x1))))
d "ldxrb w0, [x1]" 207c5f08 0x0 (set x0 (cast 64 false (load 0 (var x1))))
d "ldxrh w0, [x1]" 207c5f48 0x0 (set x0 (cast 64 false (loadw 0 16 (var x1))))
d "madd x1, x2, x3, x4" 4110039b 0x0 (set x1 (+ (* (var x2) (var x3)) (var x4)))
d "madd w1, w2, w3, w4" 4110031b 0x0 (set x1 (cast 64 false (+ (* (cast 32 false (var x2)) (cast 32 false (var x3))) (cast 32 false (var x4)))))
d "madd w1, wzr, w3, w4" e113031b 0x0 (set x1 (cast 64 false (+ (* (bv 32 0x0) (cast 32 false (var x3))) (cast 32 false (var x4)))))
d "mul x1, x2, x3" 417c039b 0x0 (set x1 (* (var x2) (var x3)))
d "mul w1, w2, w3" 417c031b 0x0 (set x1 (cast 64 false (* (cast 32 false (var x2)) (cast 32 false (var x3)))))
d "msub x1, x2, x3, x4" 4190039b 0x0 (set x1 (- (var x4) (* (var x2) (var x3))))
d "msub w1, w2, w3, w4" 4190031b 0x0 (set x1 (cast 64 false (- (cast 32 false (var x4)) (* (cast 32 false (var x2)) (cast 32 false (var x3))))))
d "mneg x1, x2, x3" 41fc039b 0x0 (set x1 (~- (* (var x2) (var x3))))
d "mneg w1, w2, w3" 41fc031b 0x0 (set x1 (cast 64 false (~- (* (cast 32 false (var x2)) (cast 32 false (var x3))))))
d "mov sp, x2" 5f000091 0x0 (set sp (var x2))
d "mov wsp, w5" bf000011 0x0 (set sp (cast 64 false (cast 32 false (var x5))))
d "mov x1, sp" e1030091 0x0 (set x1 (var sp))
d "mov w3, wsp" e3030011 0x0 (set x3 (cast 64 false (cast 32 false (var sp))))

# Capstone v4 disassembles these as "movn" even though "mov" would be the preferred disassembly
# according to the reference manual. Below are the variants for capstone v5.
# d "movn x1, 0x3" 61008092 0x0 (set x1 (bv 64 0xfffffffffffffffc))
# d "movn w1, 0x123" 61248012 0x0 (set x1 (cast 64 false (bv 32 0xfffffedc)))
# d "movn x1, 0x123, lsl 32" 6124c092 0x0 (set x1 (bv 64 0xfffffedcffffffff))
# d "movn w1, 0x123, lsl 16" 6124a012 0x0 (set x1 (cast 64 false (bv 32 0xfedcffff)))
# d "movz x1, 0x2a" 410580d2 0x0 (set x1 (bv 64 0x2a))
# d "movz w1, 0x2a" 41058052 0x0 (set x1 (cast 64 false (bv 32 0x2a)))
# Capstone v5 variants (these are better, so switch to this once v5 is used in CI)
d "mov x1, -4" 61008092 0x0 (set x1 (bv 64 0xfffffffffffffffc))
d "mov w1, -0x124" 61248012 0x0 (set x1 (cast 64 false (bv 32 0xfffffedc)))
d "mov x1, -0x12300000001" 6124c092 0x0 (set x1 (bv 64 0xfffffedcffffffff))
d "mov w1, -0x1230001" 6124a012 0x0 (set x1 (cast 64 false (bv 32 0xfedcffff)))
d "mov x1, 0x2a" 410580d2 0x0 (set x1 (bv 64 0x2a))
d "mov w1, 0x2a" 41058052 0x0 (set x1 (cast 64 false (bv 32 0x2a)))

d "mov x2, x3" e20303aa 0x0 (set x2 (var x3))
d "mov w2, w3" e203032a 0x0 (set x2 (cast 64 false (cast 32 false (var x3))))
d "movk x0, 0xcafe" c05f99f2 0x0 (set x0 (| (& (var x0) (bv 64 0xffffffffffff0000)) (bv 64 0xcafe)))
d "movk x0, 0xcafe, lsl 16" c05fb9f2 0x0 (set x0 (| (& (var x0) (bv 64 0xffffffff0000ffff)) (bv 64 0xcafe0000)))
d "movk x0, 0xcafe, lsl 32" c05fd9f2 0x0 (set x0 (| (& (var x0) (bv 64 0xffff0000ffffffff)) (bv 64 0xcafe00000000)))
d "movk x0, 0xcafe, lsl 48" c05ff9f2 0x0 (set x0 (| (& (var x0) (bv 64 0xffffffffffff)) (bv 64 0xcafe000000000000)))
d "movk w0, 0xcafe" c05f9972 0x0 (set x0 (cast 64 false (| (& (cast 32 false (var x0)) (bv 32 0xffff0000)) (bv 32 0xcafe))))
d "movk w0, 0xcafe, lsl 16" c05fb972 0x0 (set x0 (cast 64 false (| (& (cast 32 false (var x0)) (bv 32 0xffff)) (bv 32 0xcafe0000))))
d "movn x0, 0, lsl 16" 0000a092 0x0 (set x0 (bv 64 0xffffffffffffffff))
d "movn w0, 0, lsl 16" 0000a012 0x0 (set x0 (cast 64 false (bv 32 0xffffffff)))
d "movz x0, 0, lsl 16" 0000a0d2 0x0 (set x0 (bv 64 0x0))
d "movz w0, 0, lsl 16" 0000a052 0x0 (set x0 (cast 64 false (bv 32 0x0)))
d "msr NZCV, x1" 01421bd5 0x0 (seq (set nf (! (is_zero (& (var x1) (bv 64 0x80000000))))) (set zf (! (is_zero (& (var x1) (bv 64 0x40000000))))) (set cf (! (is_zero (& (var x1) (bv 64 0x20000000))))) (set vf (! (is_zero (& (var x1) (bv 64 0x10000000))))))
d "mrs x1, NZCV" 01423bd5 0x0 (set x1 (| (ite (var nf) (bv 64 0x80000000) (bv 64 0x0)) (| (ite (var zf) (bv 64 0x40000000) (bv 64 0x0)) (| (ite (var cf) (bv 64 0x20000000) (bv 64 0x0)) (ite (var vf) (bv 64 0x10000000) (bv 64 0x0))))))
d "mvn x1, x2" e10322aa 0x0 (set x1 (~ (var x2)))
d "mvn w1, w2" e103222a 0x0 (set x1 (cast 64 false (~ (cast 32 false (var x2)))))
d "mvn x1, x2, lsl 3" e10f22aa 0x0 (set x1 (~ (<< (var x2) (bv 6 0x3) false)))
d "neg x1, x2" e10302cb 0x0 (set x1 (~- (var x2)))
d "neg w1, w2" e103024b 0x0 (set x1 (cast 64 false (~- (cast 32 false (var x2)))))
d "negs x1, x2" e10302eb 0x0 (seq (set b (var x2)) (set x1 (~- (var x2))) (set cf (ule (var b) (bv 64 0x0))) (set vf (&& (^^ (msb (bv 64 0x0)) (msb (var b))) (^^ (msb (bv 64 0x0)) (msb (var x1))))) (set zf (is_zero (var x1))) (set nf (msb (var x1))))
d "negs w1, w2" e103026b 0x0 (seq (set b (cast 32 false (var x2))) (set x1 (cast 64 false (~- (cast 32 false (var x2))))) (set cf (ule (var b) (bv 32 0x0))) (set vf (&& (^^ (msb (bv 32 0x0)) (msb (var b))) (^^ (msb (bv 32 0x0)) (msb (cast 32 false (var x1)))))) (set zf (is_zero (cast 32 false (var x1)))) (set nf (msb (cast 32 false (var x1)))))
d "ngc x1, x2" e10302da 0x0 (set x1 (~- (+ (var x2) (ite (var cf) (bv 64 0x0) (bv 64 0x1)))))
d "ngc w1, w2" e103025a 0x0 (set x1 (cast 64 false (~- (+ (cast 32 false (var x2)) (ite (var cf) (bv 32 0x0) (bv 32 0x1))))))
d "ngcs x1, x2" e10302fa 0x0 (seq (set b (var x2)) (set x1 (~- (+ (var x2) (ite (var cf) (bv 64 0x0) (bv 64 0x1))))) (set cf (ule (var b) (bv 64 0x0))) (set vf (&& (^^ (msb (bv 64 0x0)) (msb (var b))) (^^ (msb (bv 64 0x0)) (msb (var x1))))) (set zf (is_zero (var x1))) (set nf (msb (var x1))))
d "ngcs w1, w2" e103027a 0x0 (seq (set b (cast 32 false (var x2))) (set x1 (cast 64 false (~- (+ (cast 32 false (var x2)) (ite (var cf) (bv 32 0x0) (bv 32 0x1)))))) (set cf (ule (var b) (bv 32 0x0))) (set vf (&& (^^ (msb (bv 32 0x0)) (msb (var b))) (^^ (msb (bv 32 0x0)) (msb (cast 32 false (var x1)))))) (set zf (is_zero (cast 32 false (var x1)))) (set nf (msb (cast 32 false (var x1)))))
d "nop" 1f2003d5 0x0 nop
d "rbit x1, x2" 4100c0da 0x0 (seq (set v (var x2)) (set i (bv 6 0x0)) (set r (bv 64 0x0)) (repeat (! (is_zero (var v))) (seq (set i (- (var i) (bv 6 0x1))) (set r (| (var r) (ite (lsb (var v)) (<< (bv 64 0x1) (var i) false) (bv 64 0x0)))) (set v (>> (var v) (bv 6 0x1) false)))) (set x1 (var r)))
d "rbit w1, w2" 4100c05a 0x0 (seq (set v (cast 32 false (var x2))) (set i (bv 6 0x20)) (set r (bv 32 0x0)) (repeat (! (is_zero (var v))) (seq (set i (- (var i) (bv 6 0x1))) (set r (| (var r) (ite (lsb (var v)) (<< (bv 32 0x1) (var i) false) (bv 32 0x0)))) (set v (>> (var v) (bv 6 0x1) false)))) (set x1 (cast 64 false (var r))))
d "ret x2" 40005fd6 0x0 (jmp (var x2))
d "ret" c0035fd6 0x0 (jmp (var x30))
d "rev x0, x1" 200cc0da 0x0 (set x0 (append (append (append (cast 8 false (var x1)) (cast 8 false (>> (var x1) (bv 6 0x8) false))) (append (cast 8 false (>> (var x1) (bv 6 0x10) false)) (cast 8 false (>> (var x1) (bv 6 0x18) false)))) (append (append (cast 8 false (>> (var x1) (bv 6 0x20) false)) (cast 8 false (>> (var x1) (bv 6 0x28) false))) (append (cast 8 false (>> (var x1) (bv 6 0x30) false)) (cast 8 false (>> (var x1) (bv 6 0x38) false))))))
d "rev w0, w1" 2008c05a 0x0 (set x0 (cast 64 false (append (append (cast 8 false (var x1)) (cast 8 false (>> (var x1) (bv 6 0x8) false))) (append (cast 8 false (>> (var x1) (bv 6 0x10) false)) (cast 8 false (>> (var x1) (bv 6 0x18) false))))))
d "rev32 x0, x1" 2008c0da 0x0 (set x0 (append (append (append (cast 8 false (>> (var x1) (bv 6 0x20) false)) (cast 8 false (>> (var x1) (bv 6 0x28) false))) (append (cast 8 false (>> (var x1) (bv 6 0x30) false)) (cast 8 false (>> (var x1) (bv 6 0x38) false)))) (append (append (cast 8 false (var x1)) (cast 8 false (>> (var x1) (bv 6 0x8) false))) (append (cast 8 false (>> (var x1) (bv 6 0x10) false)) (cast 8 false (>> (var x1) (bv 6 0x18) false))))))
d "rev16 x0, x1" 2004c0da 0x0 (set x0 (append (append (append (cast 8 false (>> (var x1) (bv 6 0x30) false)) (cast 8 false (>> (var x1) (bv 6 0x38) false))) (append (cast 8 false (>> (var x1) (bv 6 0x20) false)) (cast 8 false (>> (var x1) (bv 6 0x28) false)))) (append (append (cast 8 false (>> (var x1) (bv 6 0x10) false)) (cast 8 false (>> (var x1) (bv 6 0x18) false))) (append (cast 8 false (var x1)) (cast 8 false (>> (var x1) (bv 6 0x8) false))))))
d "rev16 w0, w1" 2004c05a 0x0 (set x0 (cast 64 false (append (append (cast 8 false (>> (var x1) (bv 6 0x10) false)) (cast 8 false (>> (var x1) (bv 6 0x18) false))) (append (cast 8 false (var x1)) (cast 8 false (>> (var x1) (bv 6 0x8) false))))))
d "sbfiz x1, x2, 5, 0xe" 41347b93 0x0 (set x1 (let res (<< (cast 19 false (var x2)) (bv 6 0x5) false) (cast 64 (msb (var res)) (var res))))
d "sbfx x1, x2, 0, 0xe" 41344093 0x0 (set x1 (let res (cast 14 false (>> (var x2) (bv 6 0x0) false)) (cast 64 (msb (var res)) (var res))))
d "sbfx x1, x2, 0xc, 0xe" 41644c93 0x0 (set x1 (let res (cast 14 false (>> (var x2) (bv 6 0xc) false)) (cast 64 (msb (var res)) (var res))))
d "ubfiz x1, x2, 5, 0xe" 41347bd3 0x0 (set x1 (let res (<< (cast 19 false (var x2)) (bv 6 0x5) false) (cast 64 false (var res))))
d "ubfx x1, x2, 0, 0xe" 413440d3 0x0 (set x1 (let res (cast 14 false (>> (var x2) (bv 6 0x0) false)) (cast 64 false (var res))))
d "sbfx x1, x2, 0xc, 0xe" 41644c93 0x0 (set x1 (let res (cast 14 false (>> (var x2) (bv 6 0xc) false)) (cast 64 (msb (var res)) (var res))))
d "sdiv x0, x1, x2" 200cc29a 0x0 (set x0 (ite (== (var x2) (bv 64 0x0)) (bv 64 0x0) (ite (&& (== (var x1) (bv 64 0x8000000000000000)) (== (var x2) (bv 64 0xffffffffffffffff))) (bv 64 0x8000000000000000) (sdiv (var x1) (var x2)))))
d "sdiv w0, w1, w2" 200cc21a 0x0 (set x0 (cast 64 false (ite (== (cast 32 false (var x2)) (bv 32 0x0)) (bv 32 0x0) (ite (&& (== (cast 32 false (var x1)) (bv 32 0x80000000)) (== (cast 32 false (var x2)) (bv 32 0xffffffff))) (bv 32 0x80000000) (sdiv (cast 32 false (var x1)) (cast 32 false (var x2)))))))
d "udiv x0, x1, x2" 2008c29a 0x0 (set x0 (ite (== (var x2) (bv 64 0x0)) (bv 64 0x0) (div (var x1) (var x2))))
d "udiv w0, w1, w2" 2008c21a 0x0 (set x0 (cast 64 false (ite (== (cast 32 false (var x2)) (bv 32 0x0)) (bv 32 0x0) (div (cast 32 false (var x1)) (cast 32 false (var x2))))))
d "smaddl x1, w2, w3, x4" 4110239b 0x0 (set x1 (+ (var x4) (* (cast 64 (msb (cast 32 false (var x2))) (cast 32 false (var x2))) (cast 64 (msb (cast 32 false (var x3))) (cast 32 false (var x3))))))
d "smsubl x1, w2, w3, x4" 4190239b 0x0 (set x1 (- (var x4) (* (cast 64 (msb (cast 32 false (var x2))) (cast 32 false (var x2))) (cast 64 (msb (cast 32 false (var x3))) (cast 32 false (var x3))))))
d "smull x1, w2, w3" 417c239b 0x0 (set x1 (* (cast 64 (msb (cast 32 false (var x2))) (cast 32 false (var x2))) (cast 64 (msb (cast 32 false (var x3))) (cast 32 false (var x3)))))
d "smnegl x1, w2, w3" 41fc239b 0x0 (set x1 (~- (* (cast 64 (msb (cast 32 false (var x2))) (cast 32 false (var x2))) (cast 64 (msb (cast 32 false (var x3))) (cast 32 false (var x3))))))
d "smulh x1, x2, x3" 417c439b 0x0 (set x1 (cast 64 false (>> (* (cast 128 (msb (var x2)) (var x2)) (cast 128 (msb (var x3)) (var x3))) (bv 7 0x40) false)))
d "umaddl x1, w2, w3, x4" 4110a39b 0x0 (set x1 (+ (var x4) (* (cast 64 false (cast 32 false (var x2))) (cast 64 false (cast 32 false (var x3))))))
d "umsubl x1, w2, w3, x4" 4190a39b 0x0 (set x1 (- (var x4) (* (cast 64 false (cast 32 false (var x2))) (cast 64 false (cast 32 false (var x3))))))
d "umull x1, w2, w3" 417ca39b 0x0 (set x1 (* (cast 64 false (cast 32 false (var x2))) (cast 64 false (cast 32 false (var x3)))))
d "umnegl x1, w2, w3" 41fca39b 0x0 (set x1 (~- (* (cast 64 false (cast 32 false (var x2))) (cast 64 false (cast 32 false (var x3))))))
d "umulh x1, x2, x3" 417cc39b 0x0 (set x1 (cast 64 false (>> (* (cast 128 false (var x2)) (cast 128 false (var x3))) (bv 7 0x40) false)))
d "str x1, [x2]" 410000f9 0x0 (storew 0 (var x2) (var x1))
d "str x1, [x2, 8]" 410400f9 0x0 (storew 0 (+ (var x2) (bv 64 0x8)) (var x1))
d "stur x1, [x2, 3]" 413000f8 0x0 (storew 0 (+ (var x2) (bv 64 0x3)) (var x1))
d "str x1, [x2, 8]!" 418c00f8 0x0 (seq (storew 0 (+ (var x2) (bv 64 0x8)) (var x1)) (set x2 (+ (var x2) (bv 64 0x8))))
d "str x1, [x2, 3]!" 413c00f8 0x0 (seq (storew 0 (+ (var x2) (bv 64 0x3)) (var x1)) (set x2 (+ (var x2) (bv 64 0x3))))
d "str x1, [x2], 8" 418400f8 0x0 (seq (storew 0 (var x2) (var x1)) (set x2 (+ (var x2) (bv 64 0x8))))
d "str x1, [x2], 3" 413400f8 0x0 (seq (storew 0 (var x2) (var x1)) (set x2 (+ (var x2) (bv 64 0x3))))
d "str w1, [x2]" 410000b9 0x0 (storew 0 (var x2) (cast 32 false (var x1)))
d "str w1, [x2, 8]" 410800b9 0x0 (storew 0 (+ (var x2) (bv 64 0x8)) (cast 32 false (var x1)))
d "stur w1, [x2, 3]" 413000b8 0x0 (storew 0 (+ (var x2) (bv 64 0x3)) (cast 32 false (var x1)))
d "str w1, [x2, 8]!" 418c00b8 0x0 (seq (storew 0 (+ (var x2) (bv 64 0x8)) (cast 32 false (var x1))) (set x2 (+ (var x2) (bv 64 0x8))))
d "str w1, [x2, 3]!" 413c00b8 0x0 (seq (storew 0 (+ (var x2) (bv 64 0x3)) (cast 32 false (var x1))) (set x2 (+ (var x2) (bv 64 0x3))))
d "str w1, [x2], 8" 418400b8 0x0 (seq (storew 0 (var x2) (cast 32 false (var x1))) (set x2 (+ (var x2) (bv 64 0x8))))
d "str w1, [x2], 3" 413400b8 0x0 (seq (storew 0 (var x2) (cast 32 false (var x1))) (set x2 (+ (var x2) (bv 64 0x3))))
d "str x1, [x2, x3, lsl 3]" 417823f8 0x0 (storew 0 (+ (var x2) (<< (var x3) (bv 6 0x3) false)) (var x1))
d "str x1, [x1, w2, uxtw]" 214822f8 0x0 (storew 0 (+ (var x1) (cast 64 false (cast 32 false (var x2)))) (var x1))
d "strb w1, [x2]" 41000039 0x0 (store 0 (var x2) (cast 8 false (var x1)))
d "sturb w1, [x2, 3]" 41300038 0x0 (store 0 (+ (var x2) (bv 64 0x3)) (cast 8 false (var x1)))
d "strh w1, [x2]" 41000079 0x0 (storew 0 (var x2) (cast 16 false (var x1)))
d "sturh w1, [x2, 3]" 41300078 0x0 (storew 0 (+ (var x2) (bv 64 0x3)) (cast 16 false (var x1)))
d "stlr x1, [x2]" 41fc9fc8 0x0 (storew 0 (var x2) (var x1))
d "stlr w1, [x2]" 41fc9f88 0x0 (storew 0 (var x2) (cast 32 false (var x1)))
d "stlrb w1, [x2]" 41fc9f08 0x0 (store 0 (var x2) (cast 8 false (var x1)))
d "stlrh w1, [x2]" 41fc9f48 0x0 (storew 0 (var x2) (cast 16 false (var x1)))
d "stp x1, x2, [x3]" 610800a9 0x0 (seq (storew 0 (var x3) (var x1)) (storew 0 (+ (var x3) (bv 64 0x8)) (var x2)))
d "stp w1, w2, [x3]" 61080029 0x0 (seq (storew 0 (var x3) (cast 32 false (var x1))) (storew 0 (+ (var x3) (bv 64 0x4)) (cast 32 false (var x2))))
d "stp w1, w2, [sp, 0x10]" e10b0229 0x0 (seq (storew 0 (+ (var sp) (bv 64 0x10)) (cast 32 false (var x1))) (storew 0 (+ (+ (var sp) (bv 64 0x10)) (bv 64 0x4)) (cast 32 false (var x2))))
d "stp w1, w2, [sp, 0x10]!" e10b8229 0x0 (seq (storew 0 (+ (var sp) (bv 64 0x10)) (cast 32 false (var x1))) (storew 0 (+ (+ (var sp) (bv 64 0x10)) (bv 64 0x4)) (cast 32 false (var x2))) (set sp (+ (var sp) (bv 64 0x10))))
d "stnp x1, x2, [x3]" 610800a8 0x0 (seq (storew 0 (var x3) (var x1)) (storew 0 (+ (var x3) (bv 64 0x8)) (var x2)))
d "stnp w1, w2, [x3]" 61080028 0x0 (seq (storew 0 (var x3) (cast 32 false (var x1))) (storew 0 (+ (var x3) (bv 64 0x4)) (cast 32 false (var x2))))
d "stxr w1, x2, [x4]" 827c01c8 0x0 (seq (storew 0 (var x4) (var x2)) (set x1 (cast 64 false (bv 32 0x0))))
d "stxr w1, w2, [x4]" 827c0188 0x0 (seq (storew 0 (var x4) (cast 32 false (var x2))) (set x1 (cast 64 false (bv 32 0x0))))
d "stxrb w1, w2, [x4]" 827c0108 0x0 (seq (store 0 (var x4) (cast 8 false (var x2))) (set x1 (cast 64 false (bv 32 0x0))))
d "stxrh w1, w2, [x4]" 827c0148 0x0 (seq (storew 0 (var x4) (cast 16 false (var x2))) (set x1 (cast 64 false (bv 32 0x0))))
d "stxp w1, x2, x3, [x4]" 820c21c8 0x0 (seq (storew 0 (var x4) (var x2)) (storew 0 (+ (var x4) (bv 64 0x8)) (var x3)) (set x1 (cast 64 false (bv 32 0x0))))
d "stxp w1, w2, w3, [x4]" 820c2188 0x0 (seq (storew 0 (var x4) (cast 32 false (var x2))) (storew 0 (+ (var x4) (bv 64 0x4)) (cast 32 false (var x3))) (set x1 (cast 64 false (bv 32 0x0))))
d "stlxr w1, x2, [x4]" 82fc01c8 0x0 (seq (storew 0 (var x4) (var x2)) (set x1 (cast 64 false (bv 32 0x0))))
d "stlxr w1, w2, [x4]" 82fc0188 0x0 (seq (storew 0 (var x4) (cast 32 false (var x2))) (set x1 (cast 64 false (bv 32 0x0))))
d "stlxrb w1, w2, [x4]" 82fc0108 0x0 (seq (store 0 (var x4) (cast 8 false (var x2))) (set x1 (cast 64 false (bv 32 0x0))))
d "stlxrh w1, w2, [x4]" 82fc0148 0x0 (seq (storew 0 (var x4) (cast 16 false (var x2))) (set x1 (cast 64 false (bv 32 0x0))))
d "stlxp w1, x2, x3, [x4]" 828c21c8 0x0 (seq (storew 0 (var x4) (var x2)) (storew 0 (+ (var x4) (bv 64 0x8)) (var x3)) (set x1 (cast 64 false (bv 32 0x0))))
d "stlxp w1, w2, w3, [x4]" 828c2188 0x0 (seq (storew 0 (var x4) (cast 32 false (var x2))) (storew 0 (+ (var x4) (bv 64 0x4)) (cast 32 false (var x3))) (set x1 (cast 64 false (bv 32 0x0))))
d "sttr x0, [x1]" 200800f8 0x0 (storew 0 (var x1) (var x0))
d "sttr w0, [x1]" 200800b8 0x0 (storew 0 (var x1) (cast 32 false (var x0)))
d "sttrb w0, [x1]" 20080038 0x0 (store 0 (var x1) (cast 8 false (var x0)))
d "sttrh w0, [x1]" 20080078 0x0 (storew 0 (var x1) (cast 16 false (var x0)))
d "sxtb x1, w2" 411c4093 0x0 (set x1 (cast 64 (msb (cast 8 false (var x2))) (cast 8 false (var x2))))
d "sxtb w1, w2" 411c0013 0x0 (set x1 (cast 64 false (cast 32 (msb (cast 8 false (var x2))) (cast 8 false (var x2)))))
d "sxth x1, w2" 413c4093 0x0 (set x1 (cast 64 (msb (cast 16 false (var x2))) (cast 16 false (var x2))))
d "sxth w1, w2" 413c0013 0x0 (set x1 (cast 64 false (cast 32 (msb (cast 16 false (var x2))) (cast 16 false (var x2)))))
d "sxtw x1, w2" 417c4093 0x0 (set x1 (cast 64 (msb (cast 32 false (var x2))) (cast 32 false (var x2))))
d "uxtb w1, w2" 411c0053 0x0 (set x1 (cast 64 false (cast 32 false (cast 8 false (var x2)))))
d "uxtb w1, w2" 411c0053 0x0 (set x1 (cast 64 false (cast 32 false (cast 8 false (var x2)))))
d "uxth w1, w2" 413c0053 0x0 (set x1 (cast 64 false (cast 32 false (cast 16 false (var x2)))))
d "uxth w1, w2" 413c0053 0x0 (set x1 (cast 64 false (cast 32 false (cast 16 false (var x2)))))
d "tbz w1, 0xd, 0x100100" 01086836 0x100000 (branch (lsb (>> (cast 64 false (cast 32 false (var x1))) (bv 6 0xd) false)) nop (jmp (bv 64 0x100100)))
d "tbz x1, 0x2a, 0x100100" 010850b6 0x100000 (branch (lsb (>> (var x1) (bv 6 0x2a) false)) nop (jmp (bv 64 0x100100)))
d "tbnz w1, 0xd, 0x100100" 01086837 0x100000 (branch (lsb (>> (cast 64 false (cast 32 false (var x1))) (bv 6 0xd) false)) (jmp (bv 64 0x100100)) nop)
d "tbnz x1, 0x2a, 0x100100" 010850b7 0x100000 (branch (lsb (>> (var x1) (bv 6 0x2a) false)) (jmp (bv 64 0x100100)) nop)
d "tst x0, 6" 1f047ff2 0x0 (seq (set zf (is_zero (& (var x0) (bv 64 0x6)))) (set nf (msb (& (var x0) (bv 64 0x6)))) (set cf false) (set vf false))
d "tst w0, 6" 1f041f72 0x0 (seq (set zf (is_zero (& (cast 32 false (var x0)) (bv 32 0x6)))) (set nf (msb (& (cast 32 false (var x0)) (bv 32 0x6)))) (set cf false) (set vf false))
d "tst x1, x2" 3f0002ea 0x0 (seq (set zf (is_zero (& (var x1) (var x2)))) (set nf (msb (& (var x1) (var x2)))) (set cf false) (set vf false))
d "tst w1, w2" 3f00026a 0x0 (seq (set zf (is_zero (& (cast 32 false (var x1)) (cast 32 false (var x2))))) (set nf (msb (& (cast 32 false (var x1)) (cast 32 false (var x2))))) (set cf false) (set vf false))

# Requires capstone v5:
# d "ldraa x0, [x1]" 200420f8 0x0 (set x0 (loadw 0 64 (var x1)))
# d "ldrab x0, [x1]" 2004a0f8 0x0 (set x0 (loadw 0 64 (var x1)))
# d "ldlar x0, [x1]" 207cdfc8 0x0 (set x0 (loadw 0 64 (var x1)))
# d "ldlar w0, [x1]" 207cdf88 0x0 (set x0 (cast 64 false (loadw 0 32 (var x1))))
# d "ldlarb w0, [x1]" 207cdf08 0x0 (set x0 (cast 64 false (load 0 (var x1))))
# d "ldlarh w0, [x1]" 207cdf48 0x0 (set x0 (cast 64 false (loadw 0 16 (var x1))))
# d "ldapr x0, [x1]" 20c0bff8 0x0 (set x0 (loadw 0 64 (var x1)))
# d "ldapr w0, [x1]" 20c0bfb8 0x0 (set x0 (cast 64 false (loadw 0 32 (var x1))))
# d "ldaprb w0, [x1]" 20c0bf38 0x0 (set x0 (cast 64 false (load 0 (var x1))))
# d "ldaprh w0, [x1]" 20c0bf78 0x0 (set x0 (cast 64 false (loadw 0 16 (var x1))))
# d "ldapur x0, [x1]" 200040d9 0x0 (set x0 (loadw 0 64 (var x1)))
# d "ldapur w0, [x1]" 20004099 0x0 (set x0 (cast 64 false (loadw 0 32 (var x1))))
# d "ldapurb w0, [x1]" 20004019 0x0 (set x0 (cast 64 false (load 0 (var x1))))
# d "ldapurh w0, [x1]" 20004059 0x0 (set x0 (cast 64 false (loadw 0 16 (var x1))))
# d "ldapursw x0, [x1]" 20008099 0x0 (set x0 (cast 64 (msb (loadw 0 32 (var x1))) (loadw 0 32 (var x1))))
# d "ldapursb x0, [x1]" 20008019 0x0 (set x0 (cast 64 (msb (load 0 (var x1))) (load 0 (var x1))))
# d "ldapursh x0, [x1]" 20008059 0x0 (set x0 (cast 64 (msb (loadw 0 16 (var x1))) (loadw 0 16 (var x1))))
# d "ldapursb w0, [x1]" 2000c019 0x0 (set x0 (cast 64 false (cast 32 (msb (load 0 (var x1))) (load 0 (var x1)))))
# d "ldapursh w0, [x1]" 2000c059 0x0 (set x0 (cast 64 false (cast 32 (msb (loadw 0 16 (var x1))) (loadw 0 16 (var x1)))))
# d "casb w0, w1, [x2]" 417ca008 0x0 (seq (set old (load 0 (var x2))) (branch (== (var old) (cast 8 false (var x0))) (store 0 (var x2) (cast 8 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "casab w0, w1, [x2]" 417ce008 0x0 (seq (set old (load 0 (var x2))) (branch (== (var old) (cast 8 false (var x0))) (store 0 (var x2) (cast 8 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "casalb w0, w1, [x2]" 41fce008 0x0 (seq (set old (load 0 (var x2))) (branch (== (var old) (cast 8 false (var x0))) (store 0 (var x2) (cast 8 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "caslb w0, w1, [x2]" 41fca008 0x0 (seq (set old (load 0 (var x2))) (branch (== (var old) (cast 8 false (var x0))) (store 0 (var x2) (cast 8 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "cash w0, w1, [x2]" 417ca048 0x0 (seq (set old (loadw 0 16 (var x2))) (branch (== (var old) (cast 16 false (var x0))) (storew 0 (var x2) (cast 16 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "casah w0, w1, [x2]" 417ce048 0x0 (seq (set old (loadw 0 16 (var x2))) (branch (== (var old) (cast 16 false (var x0))) (storew 0 (var x2) (cast 16 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "casalh w0, w1, [x2]" 41fce048 0x0 (seq (set old (loadw 0 16 (var x2))) (branch (== (var old) (cast 16 false (var x0))) (storew 0 (var x2) (cast 16 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "caslh w0, w1, [x2]" 41fca048 0x0 (seq (set old (loadw 0 16 (var x2))) (branch (== (var old) (cast 16 false (var x0))) (storew 0 (var x2) (cast 16 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "cas w0, w1, [x2]" 417ca088 0x0 (seq (set old (loadw 0 32 (var x2))) (branch (== (var old) (cast 32 false (var x0))) (storew 0 (var x2) (cast 32 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "casa w0, w1, [x2]" 417ce088 0x0 (seq (set old (loadw 0 32 (var x2))) (branch (== (var old) (cast 32 false (var x0))) (storew 0 (var x2) (cast 32 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "casal w0, w1, [x2]" 41fce088 0x0 (seq (set old (loadw 0 32 (var x2))) (branch (== (var old) (cast 32 false (var x0))) (storew 0 (var x2) (cast 32 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "casl w0, w1, [x2]" 41fca088 0x0 (seq (set old (loadw 0 32 (var x2))) (branch (== (var old) (cast 32 false (var x0))) (storew 0 (var x2) (cast 32 false (var x1))) nop) (set x0 (cast 64 false (var old))))
# d "cas x0, x1, [x2]" 417ca0c8 0x0 (seq (set old (loadw 0 64 (var x2))) (branch (== (var old) (var x0)) (storew 0 (var x2) (var x1)) nop) (set x0 (var old)))
# d "casa x0, x1, [x2]" 417ce0c8 0x0 (seq (set old (loadw 0 64 (var x2))) (branch (== (var old) (var x0)) (storew 0 (var x2) (var x1)) nop) (set x0 (var old)))
# d "casal x0, x1, [x2]" 41fce0c8 0x0 (seq (set old (loadw 0 64 (var x2))) (branch (== (var old) (var x0)) (storew 0 (var x2) (var x1)) nop) (set x0 (var old)))
# d "casl x0, x1, [x2]" 41fca0c8 0x0 (seq (set old (loadw 0 64 (var x2))) (branch (== (var old) (var x0)) (storew 0 (var x2) (var x1)) nop) (set x0 (var old)))
# d "casp w0, w1, w2, w3, [x4]" 827c2008 0x0 (seq (set old0 (loadw 0 32 (var x4))) (set old1 (loadw 0 32 (+ (var x4) (bv 64 0x4)))) (branch (&& (== (var old0) (cast 32 false (var x0))) (== (var old1) (cast 32 false (var x1)))) (seq (storew 0 (var x4) (cast 32 false (var x2))) (storew 0 (+ (var x4) (bv 64 0x4)) (cast 32 false (var x3)))) nop) (set x0 (cast 64 false (var old0))) (set x1 (cast 64 false (var old1))))
# d "caspa w0, w1, w2, w3, [x4]" 827c6008 0x0 (seq (set old0 (loadw 0 32 (var x4))) (set old1 (loadw 0 32 (+ (var x4) (bv 64 0x4)))) (branch (&& (== (var old0) (cast 32 false (var x0))) (== (var old1) (cast 32 false (var x1)))) (seq (storew 0 (var x4) (cast 32 false (var x2))) (storew 0 (+ (var x4) (bv 64 0x4)) (cast 32 false (var x3)))) nop) (set x0 (cast 64 false (var old0))) (set x1 (cast 64 false (var old1))))
# d "caspal w0, w1, w2, w3, [x4]" 82fc6008 0x0 (seq (set old0 (loadw 0 32 (var x4))) (set old1 (loadw 0 32 (+ (var x4) (bv 64 0x4)))) (branch (&& (== (var old0) (cast 32 false (var x0))) (== (var old1) (cast 32 false (var x1)))) (seq (storew 0 (var x4) (cast 32 false (var x2))) (storew 0 (+ (var x4) (bv 64 0x4)) (cast 32 false (var x3)))) nop) (set x0 (cast 64 false (var old0))) (set x1 (cast 64 false (var old1))))
# d "caspl w0, w1, w2, w3, [x4]" 82fc2008 0x0 (seq (set old0 (loadw 0 32 (var x4))) (set old1 (loadw 0 32 (+ (var x4) (bv 64 0x4)))) (branch (&& (== (var old0) (cast 32 false (var x0))) (== (var old1) (cast 32 false (var x1)))) (seq (storew 0 (var x4) (cast 32 false (var x2))) (storew 0 (+ (var x4) (bv 64 0x4)) (cast 32 false (var x3)))) nop) (set x0 (cast 64 false (var old0))) (set x1 (cast 64 false (var old1))))
# d "casp x0, x1, x2, x3, [x4]" 827c2048 0x0 (seq (set old0 (loadw 0 64 (var x4))) (set old1 (loadw 0 64 (+ (var x4) (bv 64 0x8)))) (branch (&& (== (var old0) (var x0)) (== (var old1) (var x1))) (seq (storew 0 (var x4) (var x2)) (storew 0 (+ (var x4) (bv 64 0x8)) (var x3))) nop) (set x0 (var old0)) (set x1 (var old1)))
# d "caspa x0, x1, x2, x3, [x4]" 827c6048 0x0 (seq (set old0 (loadw 0 64 (var x4))) (set old1 (loadw 0 64 (+ (var x4) (bv 64 0x8)))) (branch (&& (== (var old0) (var x0)) (== (var old1) (var x1))) (seq (storew 0 (var x4) (var x2)) (storew 0 (+ (var x4) (bv 64 0x8)) (var x3))) nop) (set x0 (var old0)) (set x1 (var old1)))
# d "caspal x0, x1, x2, x3, [x4]" 82fc6048 0x0 (seq (set old0 (loadw 0 64 (var x4))) (set old1 (loadw 0 64 (+ (var x4) (bv 64 0x8)))) (branch (&& (== (var old0) (var x0)) (== (var old1) (var x1))) (seq (storew 0 (var x4) (var x2)) (storew 0 (+ (var x4) (bv 64 0x8)) (var x3))) nop) (set x0 (var old0)) (set x1 (var old1)))
# d "caspl x0, x1, x2, x3, [x4]" 82fc2048 0x0 (seq (set old0 (loadw 0 64 (var x4))) (set old1 (loadw 0 64 (+ (var x4) (bv 64 0x8)))) (branch (&& (== (var old0) (var x0)) (== (var old1) (var x1))) (seq (storew 0 (var x4) (var x2)) (storew 0 (+ (var x4) (bv 64 0x8)) (var x3))) nop) (set x0 (var old0)) (set x1 (var old1)))
# d "cfinv" 1f4000d5 0x0 (set cf (! (var cf)))
# d "ldadd x0, x1, [x2]" 410020f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (+ (var old) (var x0))) (set x1 (var old)))
# d "ldadda w0, w1, [x2]" 4100a0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (+ (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddal w0, w1, [x2]" 4100e0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (+ (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddl w0, w1, [x2]" 410060b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (+ (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldadd w0, w1, [x2]" 410020b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (+ (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddb w0, w1, [x2]" 41002038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (+ (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddab w0, w1, [x2]" 4100a038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (+ (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddalb w0, w1, [x2]" 4100e038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (+ (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddlb w0, w1, [x2]" 41006038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (+ (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddh w0, w1, [x2]" 41002078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (+ (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddah w0, w1, [x2]" 4100a078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (+ (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddalh w0, w1, [x2]" 4100e078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (+ (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldaddlh w0, w1, [x2]" 41006078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (+ (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "stadd x0, [x3]" 7f0020f8 0x0 (seq (set old (loadw 0 64 (var x3))) (storew 0 (var x3) (+ (var old) (var x0))))
# d "staddl x0, [x3]" 7f0060f8 0x0 (seq (set old (loadw 0 64 (var x3))) (storew 0 (var x3) (+ (var old) (var x0))))
# d "stadd w0, [x3]" 7f0020b8 0x0 (seq (set old (loadw 0 32 (var x3))) (storew 0 (var x3) (+ (var old) (cast 32 false (var x0)))))
# d "staddl w0, [x3]" 7f0060b8 0x0 (seq (set old (loadw 0 32 (var x3))) (storew 0 (var x3) (+ (var old) (cast 32 false (var x0)))))
# d "staddb w0, [x3]" 7f002038 0x0 (seq (set old (load 0 (var x3))) (store 0 (var x3) (+ (var old) (cast 8 false (var x0)))))
# d "staddlb w0, [x3]" 7f006038 0x0 (seq (set old (load 0 (var x3))) (store 0 (var x3) (+ (var old) (cast 8 false (var x0)))))
# d "staddh w0, [x3]" 7f002078 0x0 (seq (set old (loadw 0 16 (var x3))) (storew 0 (var x3) (+ (var old) (cast 16 false (var x0)))))
# d "staddlh w0, [x3]" 7f006078 0x0 (seq (set old (loadw 0 16 (var x3))) (storew 0 (var x3) (+ (var old) (cast 16 false (var x0)))))
# d "ldclr x0, x1, [x2]" 411020f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (& (var old) (~ (var x0)))) (set x1 (var old)))
# d "stclr x0, [x1]" 3f1020f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (& (var old) (~ (var x0)))))
# d "ldclra x0, x1, [x2]" 4110a0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (& (var old) (~ (var x0)))) (set x1 (var old)))
# d "ldclral x0, x1, [x2]" 4110e0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (& (var old) (~ (var x0)))) (set x1 (var old)))
# d "ldclrl x0, x1, [x2]" 411060f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (& (var old) (~ (var x0)))) (set x1 (var old)))
# d "stclrl x0, [x1]" 3f1060f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (& (var old) (~ (var x0)))))
# d "ldclr w0, w1, [x2]" 411020b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (& (var old) (~ (cast 32 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "stclr w0, [x1]" 3f1020b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (& (var old) (~ (cast 32 false (var x0))))))
# d "ldclra w0, w1, [x2]" 4110a0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (& (var old) (~ (cast 32 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "ldclral w0, w1, [x2]" 4110e0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (& (var old) (~ (cast 32 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "ldclrl w0, w1, [x2]" 411060b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (& (var old) (~ (cast 32 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "stclrl w0, [x1]" 3f1060b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (& (var old) (~ (cast 32 false (var x0))))))
# d "ldclrb w0, w1, [x2]" 41102038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (& (var old) (~ (cast 8 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "stclrb w0, [x1]" 3f102038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (& (var old) (~ (cast 8 false (var x0))))))
# d "ldclrab w0, w1, [x2]" 4110a038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (& (var old) (~ (cast 8 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "ldclralb w0, w1, [x2]" 4110e038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (& (var old) (~ (cast 8 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "ldclrlb w0, w1, [x2]" 41106038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (& (var old) (~ (cast 8 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "stclrlb w0, [x1]" 3f106038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (& (var old) (~ (cast 8 false (var x0))))))
# d "ldclrh w0, w1, [x2]" 41102078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (& (var old) (~ (cast 16 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "stclrh w0, [x1]" 3f102078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (& (var old) (~ (cast 16 false (var x0))))))
# d "ldclrah w0, w1, [x2]" 4110a078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (& (var old) (~ (cast 16 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "ldclralh w0, w1, [x2]" 4110e078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (& (var old) (~ (cast 16 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "ldclrlh w0, w1, [x2]" 41106078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (& (var old) (~ (cast 16 false (var x0))))) (set x1 (cast 64 false (var old))))
# d "stclrlh w0, [x1]" 3f106078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (& (var old) (~ (cast 16 false (var x0))))))
# d "ldeor x0, x1, [x2]" 412020f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (^ (var old) (var x0))) (set x1 (var old)))
# d "steor x0, [x1]" 3f2020f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (^ (var old) (var x0))))
# d "ldeora x0, x1, [x2]" 4120a0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (^ (var old) (var x0))) (set x1 (var old)))
# d "ldeoral x0, x1, [x2]" 4120e0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (^ (var old) (var x0))) (set x1 (var old)))
# d "ldeorl x0, x1, [x2]" 412060f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (^ (var old) (var x0))) (set x1 (var old)))
# d "steorl x0, [x1]" 3f2060f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (^ (var old) (var x0))))
# d "ldeor w0, w1, [x2]" 412020b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (^ (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "steor w0, [x1]" 3f2020b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (^ (var old) (cast 32 false (var x0)))))
# d "ldeora w0, w1, [x2]" 4120a0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (^ (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldeoral w0, w1, [x2]" 4120e0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (^ (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldeorl w0, w1, [x2]" 412060b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (^ (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "steorl w0, [x1]" 3f2060b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (^ (var old) (cast 32 false (var x0)))))
# d "ldeorb w0, w1, [x2]" 41202038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (^ (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "steorb w0, [x1]" 3f202038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (^ (var old) (cast 8 false (var x0)))))
# d "ldeorab w0, w1, [x2]" 4120a038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (^ (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldeoralb w0, w1, [x2]" 4120e038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (^ (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldeorlb w0, w1, [x2]" 41206038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (^ (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "steorlb w0, [x1]" 3f206038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (^ (var old) (cast 8 false (var x0)))))
# d "ldeorh w0, w1, [x2]" 41202078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (^ (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "steorh w0, [x1]" 3f202078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (^ (var old) (cast 16 false (var x0)))))
# d "ldeorah w0, w1, [x2]" 4120a078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (^ (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldeoralh w0, w1, [x2]" 4120e078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (^ (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldeorlh w0, w1, [x2]" 41206078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (^ (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "steorlh w0, [x1]" 3f206078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (^ (var old) (cast 16 false (var x0)))))
# d "ldset x0, x1, [x2]" 413020f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (| (var old) (var x0))) (set x1 (var old)))
# d "stset x0, [x1]" 3f3020f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (| (var old) (var x0))))
# d "ldseta x0, x1, [x2]" 4130a0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (| (var old) (var x0))) (set x1 (var old)))
# d "ldsetal x0, x1, [x2]" 4130e0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (| (var old) (var x0))) (set x1 (var old)))
# d "ldsetl x0, x1, [x2]" 413060f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (| (var old) (var x0))) (set x1 (var old)))
# d "stsetl x0, [x1]" 3f3060f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (| (var old) (var x0))))
# d "ldset w0, w1, [x2]" 413020b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (| (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "stset w0, [x1]" 3f3020b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (| (var old) (cast 32 false (var x0)))))
# d "ldseta w0, w1, [x2]" 4130a0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (| (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldsetal w0, w1, [x2]" 4130e0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (| (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldsetl w0, w1, [x2]" 413060b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (| (var old) (cast 32 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "stsetl w0, [x1]" 3f3060b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (| (var old) (cast 32 false (var x0)))))
# d "ldsetb w0, w1, [x2]" 41302038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (| (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "stsetb w0, [x1]" 3f302038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (| (var old) (cast 8 false (var x0)))))
# d "ldsetab w0, w1, [x2]" 4130a038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (| (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldsetalb w0, w1, [x2]" 4130e038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (| (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldsetlb w0, w1, [x2]" 41306038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (| (var old) (cast 8 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "stsetlb w0, [x1]" 3f306038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (| (var old) (cast 8 false (var x0)))))
# d "ldseth w0, w1, [x2]" 41302078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (| (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "stseth w0, [x1]" 3f302078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (| (var old) (cast 16 false (var x0)))))
# d "ldsetah w0, w1, [x2]" 4130a078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (| (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldsetalh w0, w1, [x2]" 4130e078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (| (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "ldsetlh w0, w1, [x2]" 41306078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (| (var old) (cast 16 false (var x0)))) (set x1 (cast 64 false (var old))))
# d "stsetlh w0, [x1]" 3f306078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (| (var old) (cast 16 false (var x0)))))
# d "ldsmax x0, x1, [x2]" 414020f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (var old)))
# d "stsmax x0, [x1]" 3f4020f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (let r (var x0) (ite (sle (var old) (var r)) (var r) (var old)))))
# d "ldsmaxa x0, x1, [x2]" 4140a0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (var old)))
# d "ldsmaxal x0, x1, [x2]" 4140e0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (var old)))
# d "ldsmaxl x0, x1, [x2]" 414060f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (var old)))
# d "stsmaxl x0, [x1]" 3f4060f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (let r (var x0) (ite (sle (var old) (var r)) (var r) (var old)))))
# d "ldsmax w0, w1, [x2]" 414020b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stsmax w0, [x1]" 3f4020b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))))
# d "ldsmaxa w0, w1, [x2]" 4140a0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldsmaxal w0, w1, [x2]" 4140e0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldsmaxl w0, w1, [x2]" 414060b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stsmaxl w0, [x1]" 3f4060b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))))
# d "ldsmaxb w0, w1, [x2]" 41402038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stsmaxb w0, [x1]" 3f402038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))))
# d "ldsmaxab w0, w1, [x2]" 4140a038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldsmaxalb w0, w1, [x2]" 4140e038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldsmaxlb w0, w1, [x2]" 41406038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stsmaxlb w0, [x1]" 3f406038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))))
# d "ldsmaxh w0, w1, [x2]" 41402078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stsmaxh w0, [x1]" 3f402078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))))
# d "ldsmaxah w0, w1, [x2]" 4140a078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldsmaxalh w0, w1, [x2]" 4140e078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldsmaxlh w0, w1, [x2]" 41406078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stsmaxlh w0, [x1]" 3f406078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var r) (var old)))))
# d "ldsmin x0, x1, [x2]" 415020f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (var old)))
# d "stsmin x0, [x1]" 3f5020f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (let r (var x0) (ite (sle (var old) (var r)) (var old) (var r)))))
# d "ldsmina x0, x1, [x2]" 4150a0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (var old)))
# d "ldsminal x0, x1, [x2]" 4150e0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (var old)))
# d "ldsminl x0, x1, [x2]" 415060f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (var old)))
# d "stsminl x0, [x1]" 3f5060f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (let r (var x0) (ite (sle (var old) (var r)) (var old) (var r)))))
# d "ldsmin w0, w1, [x2]" 415020b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stsmin w0, [x1]" 3f5020b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))))
# d "ldsmina w0, w1, [x2]" 4150a0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "ldsminal w0, w1, [x2]" 4150e0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "ldsminl w0, w1, [x2]" 415060b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stsminl w0, [x1]" 3f5060b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (let r (cast 32 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))))
# d "ldsminb w0, w1, [x2]" 41502038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stsminb w0, [x1]" 3f502038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))))
# d "ldsminab w0, w1, [x2]" 4150a038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "ldsminalb w0, w1, [x2]" 4150e038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "ldsminlb w0, w1, [x2]" 41506038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stsminlb w0, [x1]" 3f506038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (let r (cast 8 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))))
# d "ldsminh w0, w1, [x2]" 41502078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stsminh w0, [x1]" 3f502078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))))
# d "ldsminah w0, w1, [x2]" 4150a078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "ldsminalh w0, w1, [x2]" 4150e078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "ldsminlh w0, w1, [x2]" 41506078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stsminlh w0, [x1]" 3f506078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (let r (cast 16 false (var x0)) (ite (sle (var old) (var r)) (var old) (var r)))))
# d "ldumax x0, x1, [x2]" 416020f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (var old)))
# d "stumax x0, [x1]" 3f6020f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (let r (var x0) (ite (ule (var old) (var r)) (var r) (var old)))))
# d "ldumaxa x0, x1, [x2]" 4160a0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (var old)))
# d "ldumaxal x0, x1, [x2]" 4160e0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (var old)))
# d "ldumaxl x0, x1, [x2]" 416060f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (var old)))
# d "stumaxl x0, [x1]" 3f6060f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (let r (var x0) (ite (ule (var old) (var r)) (var r) (var old)))))
# d "ldumax w0, w1, [x2]" 416020b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stumax w0, [x1]" 3f6020b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))))
# d "ldumaxa w0, w1, [x2]" 4160a0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldumaxal w0, w1, [x2]" 4160e0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldumaxl w0, w1, [x2]" 416060b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stumaxl w0, [x1]" 3f6060b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))))
# d "ldumaxb w0, w1, [x2]" 41602038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stumaxb w0, [x1]" 3f602038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))))
# d "ldumaxab w0, w1, [x2]" 4160a038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldumaxalb w0, w1, [x2]" 4160e038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldumaxlb w0, w1, [x2]" 41606038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stumaxlb w0, [x1]" 3f606038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))))
# d "ldumaxh w0, w1, [x2]" 41602078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stumaxh w0, [x1]" 3f602078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))))
# d "ldumaxah w0, w1, [x2]" 4160a078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldumaxalh w0, w1, [x2]" 4160e078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "ldumaxlh w0, w1, [x2]" 41606078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))) (set x1 (cast 64 false (var old))))
# d "stumaxlh w0, [x1]" 3f606078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var r) (var old)))))
# d "ldumin x0, x1, [x2]" 417020f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (var old)))
# d "stumin x0, [x1]" 3f7020f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (let r (var x0) (ite (ule (var old) (var r)) (var old) (var r)))))
# d "ldumina x0, x1, [x2]" 4170a0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (var old)))
# d "lduminal x0, x1, [x2]" 4170e0f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (var old)))
# d "lduminl x0, x1, [x2]" 417060f8 0x0 (seq (set old (loadw 0 64 (var x2))) (storew 0 (var x2) (let r (var x0) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (var old)))
# d "stuminl x0, [x1]" 3f7060f8 0x0 (seq (set old (loadw 0 64 (var x1))) (storew 0 (var x1) (let r (var x0) (ite (ule (var old) (var r)) (var old) (var r)))))
# d "ldumin w0, w1, [x2]" 417020b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stumin w0, [x1]" 3f7020b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))))
# d "ldumina w0, w1, [x2]" 4170a0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "lduminal w0, w1, [x2]" 4170e0b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "lduminl w0, w1, [x2]" 417060b8 0x0 (seq (set old (loadw 0 32 (var x2))) (storew 0 (var x2) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stuminl w0, [x1]" 3f7060b8 0x0 (seq (set old (loadw 0 32 (var x1))) (storew 0 (var x1) (let r (cast 32 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))))
# d "lduminb w0, w1, [x2]" 41702038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stuminb w0, [x1]" 3f702038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))))
# d "lduminab w0, w1, [x2]" 4170a038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "lduminalb w0, w1, [x2]" 4170e038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "lduminlb w0, w1, [x2]" 41706038 0x0 (seq (set old (load 0 (var x2))) (store 0 (var x2) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stuminlb w0, [x1]" 3f706038 0x0 (seq (set old (load 0 (var x1))) (store 0 (var x1) (let r (cast 8 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))))
# d "lduminh w0, w1, [x2]" 41702078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stuminh w0, [x1]" 3f702078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))))
# d "lduminah w0, w1, [x2]" 4170a078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "lduminalh w0, w1, [x2]" 4170e078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "lduminlh w0, w1, [x2]" 41706078 0x0 (seq (set old (loadw 0 16 (var x2))) (storew 0 (var x2) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))) (set x1 (cast 64 false (var old))))
# d "stuminlh w0, [x1]" 3f706078 0x0 (seq (set old (loadw 0 16 (var x1))) (storew 0 (var x1) (let r (cast 16 false (var x0)) (ite (ule (var old) (var r)) (var old) (var r)))))
# d "swp x0, x0, [x1]" 208020f8 0x0 (seq (set ret (loadw 0 64 (var x1))) (storew 0 (var x1) (var x0)) (set x0 (var ret)))
# d "swp x1, x2, [sp]" e28321f8 0x0 (seq (set ret (loadw 0 64 (var sp))) (storew 0 (var sp) (var x1)) (set x2 (var ret)))
# d "swp xzr, x2, [x3]" 62803ff8 0x0 (seq (set ret (loadw 0 64 (var x3))) (storew 0 (var x3) (bv 64 0x0)) (set x2 (var ret)))
# d "swp x1, xzr, [x3]" 7f8021f8 0x0 (storew 0 (var x3) (var x1))
# d "swp xzr, xzr, [x3]" 7f803ff8 0x0 (storew 0 (var x3) (bv 64 0x0))
# d "swp w1, w1, [x3]" 618021b8 0x0 (seq (set ret (loadw 0 32 (var x3))) (storew 0 (var x3) (cast 32 false (var x1))) (set x1 (cast 64 false (var ret))))
# d "swp w1, w2, [x3]" 628021b8 0x0 (seq (set ret (loadw 0 32 (var x3))) (storew 0 (var x3) (cast 32 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swp wzr, w2, [x3]" 62803fb8 0x0 (seq (set ret (loadw 0 32 (var x3))) (storew 0 (var x3) (bv 32 0x0)) (set x2 (cast 64 false (var ret))))
# d "swp w1, wzr, [x3]" 7f8021b8 0x0 (storew 0 (var x3) (cast 32 false (var x1)))
# d "swp wzr, wzr, [x3]" 7f803fb8 0x0 (storew 0 (var x3) (bv 32 0x0))
# d "swpb w1, w2, [x3]" 62802138 0x0 (seq (set ret (load 0 (var x3))) (store 0 (var x3) (cast 8 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swpb wzr, w2, [x3]" 62803f38 0x0 (seq (set ret (load 0 (var x3))) (store 0 (var x3) (cast 8 false (bv 32 0x0))) (set x2 (cast 64 false (var ret))))
# d "swpb w2, wzr, [x3]" 7f802238 0x0 (store 0 (var x3) (cast 8 false (var x2)))
# d "swpb wzr, wzr, [x3]" 7f803f38 0x0 (store 0 (var x3) (cast 8 false (bv 32 0x0)))
# d "swph w1, w2, [x3]" 62802178 0x0 (seq (set ret (loadw 0 16 (var x3))) (storew 0 (var x3) (cast 16 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swph wzr, w2, [x3]" 62803f78 0x0 (seq (set ret (loadw 0 16 (var x3))) (storew 0 (var x3) (cast 16 false (bv 32 0x0))) (set x2 (cast 64 false (var ret))))
# d "swph w1, wzr, [x3]" 7f802178 0x0 (storew 0 (var x3) (cast 16 false (var x1)))
# d "swph wzr, wzr, [x3]" 7f803f78 0x0 (storew 0 (var x3) (cast 16 false (bv 32 0x0)))
# d "swpa x1, x2, [x3]" 6280a1f8 0x0 (seq (set ret (loadw 0 64 (var x3))) (storew 0 (var x3) (var x1)) (set x2 (var ret)))
# d "swpa w1, w2, [x3]" 6280a1b8 0x0 (seq (set ret (loadw 0 32 (var x3))) (storew 0 (var x3) (cast 32 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swpab w1, w2, [x3]" 6280a138 0x0 (seq (set ret (load 0 (var x3))) (store 0 (var x3) (cast 8 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swpah w1, w2, [x3]" 6280a178 0x0 (seq (set ret (loadw 0 16 (var x3))) (storew 0 (var x3) (cast 16 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swpal x1, x2, [x3]" 6280e1f8 0x0 (seq (set ret (loadw 0 64 (var x3))) (storew 0 (var x3) (var x1)) (set x2 (var ret)))
# d "swpal w1, w2, [x3]" 6280e1b8 0x0 (seq (set ret (loadw 0 32 (var x3))) (storew 0 (var x3) (cast 32 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swpalb w1, w2, [x3]" 6280e138 0x0 (seq (set ret (load 0 (var x3))) (store 0 (var x3) (cast 8 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swpalh w1, w2, [x3]" 6280e178 0x0 (seq (set ret (loadw 0 16 (var x3))) (storew 0 (var x3) (cast 16 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swpl x1, x2, [x3]" 628061f8 0x0 (seq (set ret (loadw 0 64 (var x3))) (storew 0 (var x3) (var x1)) (set x2 (var ret)))
# d "swpl w1, w2, [x3]" 628061b8 0x0 (seq (set ret (loadw 0 32 (var x3))) (storew 0 (var x3) (cast 32 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swplb w1, w2, [x3]" 62806138 0x0 (seq (set ret (load 0 (var x3))) (store 0 (var x3) (cast 8 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "swplh w1, w2, [x3]" 62806178 0x0 (seq (set ret (loadw 0 16 (var x3))) (storew 0 (var x3) (cast 16 false (var x1))) (set x2 (cast 64 false (var ret))))
# d "rmif x1, 0x20, 0xf" 2f0410ba 0x0 (seq (set nf (! (is_zero (& (var x1) (bv 64 0x800000000))))) (set zf (! (is_zero (& (var x1) (bv 64 0x400000000))))) (set cf (! (is_zero (& (var x1) (bv 64 0x200000000))))) (set vf (! (is_zero (& (var x1) (bv 64 0x100000000))))))
# d "rmif x1, 0x20, 0" 200410ba 0x0 nop
# d "rmif x1, 0x20, 3" 230410ba 0x0 (seq (set cf (! (is_zero (& (var x1) (bv 64 0x200000000))))) (set vf (! (is_zero (& (var x1) (bv 64 0x100000000))))))
# d "rmif x1, 0x3f, 7" 27841fba 0x0 (seq (set zf (! (is_zero (& (var x1) (bv 64 0x2))))) (set cf (! (is_zero (& (var x1) (bv 64 0x1))))) (set vf (! (is_zero (& (var x1) (bv 64 0x8000000000000000))))))
# d "setf8 w2" 4d08003a 0x0 (seq (set vf (^^ (msb (cast 9 false (var x2))) (msb (cast 8 false (var x2))))) (set zf (is_zero (cast 8 false (var x2)))) (set nf (msb (cast 8 false (var x2)))))
# d "setf16 w2" 4d48003a 0x0 (seq (set vf (^^ (msb (cast 17 false (var x2))) (msb (cast 16 false (var x2))))) (set zf (is_zero (cast 16 false (var x2)))) (set nf (msb (cast 16 false (var x2)))))
# d "stllr x1, [x2]" 417c9fc8 0x0 (storew 0 (var x2) (var x1))
# d "stllr w1, [x2]" 417c9f88 0x0 (storew 0 (var x2) (cast 32 false (var x1)))
# d "stllrb w1, [x2]" 417c9f08 0x0 (store 0 (var x2) (cast 8 false (var x1)))
# d "stllrh w1, [x2]" 417c9f48 0x0 (storew 0 (var x2) (cast 16 false (var x1)))
# d "stlur x1, [x2, 3]" 413000d9 0x0 (storew 0 (+ (var x2) (bv 64 0x3)) (var x1))
# d "stlur w1, [x2, 3]" 41300099 0x0 (storew 0 (+ (var x2) (bv 64 0x3)) (cast 32 false (var x1)))
# d "stlurb w1, [x2, 3]" 41300019 0x0 (store 0 (+ (var x2) (bv 64 0x3)) (cast 8 false (var x1)))
# d "stlurh w1, [x2, 3]" 41300059 0x0 (storew 0 (+ (var x2) (bv 64 0x3)) (cast 16 false (var x1)))
