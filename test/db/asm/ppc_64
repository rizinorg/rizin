dE "addi r0, r26, 4" 381a0004 0x0 (seq (set a (var r26)) (set b (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) empty (set r0 (+ (var a) (var b))) empty empty empty)
dE "add r0, r1, r2" 7c011214 0x4 (seq (set a (var r1)) (set b (var r2)) empty (set r0 (+ (var a) (var b))) empty empty empty)
dE "addic r0, r1, 1" 30010001 0x8 (seq (set a (var r1)) (set b (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) empty (set r0 (+ (var a) (var b))) (set ca (msb (+ (cast 65 false (var a)) (cast 65 false (var b))))) empty empty)
dE "addis r0, r26, 1" 3c1a0001 0xc (seq (set a (var r26)) (set b (let v (append (bv 16 0x1) (bv 16 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) empty (set r0 (+ (var a) (var b))) empty empty empty)
dE "addme r0, r2" 7c0201d4 0x10 (seq (set a (var r2)) (set b (ite (var ca) (bv 64 0x1) (bv 64 0x0))) (set c (bv 64 0xffffffffffffffff)) (set r0 (+ (var a) (+ (var b) (var c)))) (set ca (let r1 (+ (cast 65 false (var b)) (cast 65 false (var c))) (|| (msb (var r1)) (msb (+ (cast 65 false (var a)) (var r1)))))) empty empty)
dE "addze r0, r2" 7c020194 0x14 (seq (set a (var r2)) (set b (ite (var ca) (bv 64 0x1) (bv 64 0x0))) empty (set r0 (+ (var a) (var b))) (set ca (msb (+ (cast 65 false (var a)) (cast 65 false (var b))))) empty empty)
dE "adde r0, r2, r1" 7c020914 0x18 (seq (set a (var r2)) (set b (var r1)) (set c (ite (var ca) (bv 64 0x1) (bv 64 0x0))) (set r0 (+ (var a) (+ (var b) (var c)))) (set ca (let r1 (+ (cast 65 false (var b)) (cast 65 false (var c))) (|| (msb (var r1)) (msb (+ (cast 65 false (var a)) (var r1)))))) empty empty)
dE "addc r0, r2, r1" 7c020814 0x1c (seq (set a (var r2)) (set b (var r1)) empty (set r0 (+ (var a) (var b))) (set ca (msb (+ (cast 65 false (var a)) (cast 65 false (var b))))) empty empty)
dE "subf r0, r1, r2" 7c011050 0x20 (seq (set a (+ (~ (var r1)) (bv 64 0x1))) (set b (var r2)) empty (set r0 (+ (var a) (var b))) empty empty empty)
dE "subfc r0, r1, r2" 7c011010 0x24 (seq (set a (+ (~ (var r1)) (bv 64 0x1))) (set b (var r2)) empty (set r0 (+ (var a) (var b))) (set ca (msb (+ (cast 65 false (var a)) (cast 65 false (var b))))) empty empty)
dE "subfic r0, r2, 1" 20020001 0x28 (seq (set a (~ (var r2))) (set b (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (set c (bv 64 0x1)) (set r0 (+ (var a) (+ (var b) (var c)))) (set ca (let r1 (+ (cast 65 false (var b)) (cast 65 false (var c))) (|| (msb (var r1)) (msb (+ (cast 65 false (var a)) (var r1)))))) empty empty)
dE "subfe r0, r1, r2" 7c011110 0x2c (seq (set a (~ (var r1))) (set b (var r2)) (set c (ite (var ca) (bv 64 0x1) (bv 64 0x0))) (set r0 (+ (var a) (+ (var b) (var c)))) (set ca (let r1 (+ (cast 65 false (var b)) (cast 65 false (var c))) (|| (msb (var r1)) (msb (+ (cast 65 false (var a)) (var r1)))))) empty empty)
dE "subfme r0, r2" 7c0201d0 0x30 (seq (set a (~ (var r2))) (set b (ite (var ca) (bv 64 0x1) (bv 64 0x0))) (set c (bv 64 0xffffffffffffffff)) (set r0 (+ (var a) (+ (var b) (var c)))) (set ca (let r1 (+ (cast 65 false (var b)) (cast 65 false (var c))) (|| (msb (var r1)) (msb (+ (cast 65 false (var a)) (var r1)))))) empty empty)
dE "subfze r0, r2" 7c020190 0x34 (seq (set a (~ (var r2))) (set b (ite (var ca) (bv 64 0x1) (bv 64 0x0))) empty (set r0 (+ (var a) (var b))) (set ca (msb (+ (cast 65 false (var a)) (cast 65 false (var b))))) empty empty)
dE "neg r1, r3" 7c2300d0 0x38 (seq (set a (~ (var r3))) (set b (bv 64 0x1)) empty (set r1 (+ (var a) (var b))) empty empty empty)
dE "dcbz r1, r0" 7c0107ec 0x3c (seq (storew 0 (& (+ (var r1) (var r0)) (<< (bv 64 0xffffffffffffffff) (bv 8 0x7) false)) (bv 1024 0x0)) empty)
dE "stb r0, 4(r26)" 981a0004 0x40 (seq (storew 0 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 8 false (var r0))) empty)
dE "sth r0, 4(r26)" b01a0004 0x44 (seq (storew 0 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 16 false (var r0))) empty)
dE "stw r0, 4(r26)" 901a0004 0x48 (seq (storew 0 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 32 false (var r0))) empty)
dE "std r0, 4(r26)" f81a0004 0x4c (seq (storew 0 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 64 false (var r0))) empty)
dE "stbx r0, r26, r1" 7c1a09ae 0x50 (seq (storew 0 (+ (var r26) (var r1)) (cast 8 false (var r0))) empty)
dE "sthx r0, r26, r1" 7c1a0b2e 0x54 (seq (storew 0 (+ (var r26) (var r1)) (cast 16 false (var r0))) empty)
dE "stwx r0, r26, r1" 7c1a092e 0x58 (seq (storew 0 (+ (var r26) (var r1)) (cast 32 false (var r0))) empty)
dE "stdx r0, r26, r1" 7c1a092a 0x5c (seq (storew 0 (+ (var r26) (var r1)) (cast 64 false (var r0))) empty)
dE "stbu r0, 4(r26)" 9c1a0004 0x60 (seq (storew 0 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 8 false (var r0))) (set r26 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "sthu r0, 4(r26)" b41a0004 0x64 (seq (storew 0 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 16 false (var r0))) (set r26 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "stwu r0, 4(r26)" 941a0004 0x68 (seq (storew 0 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 32 false (var r0))) (set r26 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "stdu r0, 4(r26)" f81a0005 0x6c (seq (storew 0 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 64 false (var r0))) (set r26 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "stbux r0, r26, r1" 7c1a09ee 0x70 (seq (storew 0 (+ (var r26) (var r1)) (cast 8 false (var r0))) (set r26 (+ (var r26) (var r1))))
dE "sthux r0, r26, r1" 7c1a0b6e 0x74 (seq (storew 0 (+ (var r26) (var r1)) (cast 16 false (var r0))) (set r26 (+ (var r26) (var r1))))
dE "stwux r0, r26, r1" 7c1a096e 0x78 (seq (storew 0 (+ (var r26) (var r1)) (cast 32 false (var r0))) (set r26 (+ (var r26) (var r1))))
dE "stdux r0, r26, r1" 7c1a096a 0x7c (seq (storew 0 (+ (var r26) (var r1)) (cast 64 false (var r0))) (set r26 (+ (var r26) (var r1))))
dE "stbcix r0, r26, r1" 7c1a0faa 0x80 (seq (storew 0 (+ (var r26) (var r1)) (cast 8 false (var r0))) empty)
dE "sthcix r0, r26, r1" 7c1a0f6a 0x84 (seq (storew 0 (+ (var r26) (var r1)) (cast 16 false (var r0))) empty)
dE "stwcix r0, r26, r1" 7c1a0f2a 0x88 (seq (storew 0 (+ (var r26) (var r1)) (cast 32 false (var r0))) empty)
dE "stdcix r0, r26, r1" 7c1a0fea 0x8c (seq (storew 0 (+ (var r26) (var r1)) (cast 64 false (var r0))) empty)
dE "li r0, 1" 38000001 0x90 (seq (set r0 (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) empty)
dE "lis r0, 1" 3c000001 0x94 (seq (set r0 (let v (append (bv 16 0x1) (bv 16 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) empty)
dE "addi r0, r26, 8" 381a0008 0x98 (seq (set a (var r26)) (set b (let v (bv 16 0x8) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) empty (set r0 (+ (var a) (var b))) empty empty empty)
dE "lbz r0, 4(r26)" 881a0004 0x9c (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 8 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lbzx r0, r26, r1" 7c1a08ae 0xa0 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 8 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lbzu r0, 8(r26)" 8c1a0008 0xa4 (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x8) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 8 (var ea)) (cast 64 false (var loadw))))) (set r26 (+ (var r26) (let v (bv 16 0x8) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "lbzux r0, r26, r1" 7c1a08ee 0xa8 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 8 (var ea)) (cast 64 false (var loadw))))) (set r26 (+ (var r26) (var r1))))
dE "lbzcix r0, r26, r1" 7c1a0eaa 0xac (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 8 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lha r0, 4(r26)" a81a0004 0xb0 (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 16 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) empty)
dE "lhz r0, 4(r26)" a01a0004 0xb4 (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 16 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lhzx r0, r26, r1" 7c1a0a2e 0xb8 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 16 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lhzu r0, 8(r26)" a41a0008 0xbc (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x8) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 16 (var ea)) (cast 64 false (var loadw))))) (set r26 (+ (var r26) (let v (bv 16 0x8) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "lhzux r0, r26, r1" 7c1a0a6e 0xc0 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 16 (var ea)) (cast 64 false (var loadw))))) (set r26 (+ (var r26) (var r1))))
dE "lhax r0, r26, r1" 7c1a0aae 0xc4 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 16 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) empty)
dE "lhaux r0, r26, r1" 7c1a0aee 0xc8 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 16 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) (set r26 (+ (var r26) (var r1))))
dE "lhzcix r0, r26, r1" 7c1a0e6a 0xcc (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 16 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lwa r0, 4(r26)" e81a0006 0xd0 (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 32 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) empty)
dE "lwz r0, 4(r26)" 801a0004 0xd4 (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 32 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lwzx r0, r26, r1" 7c1a082e 0xd8 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 32 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lwax r0, r26, r1" 7c1a0aaa 0xdc (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 32 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) empty)
dE "lwaux r0, r26, r1" 7c1a0aea 0xe0 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 32 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) (set r26 (+ (var r26) (var r1))))
dE "lwzcix r0, r26, r1" 7c1a0e2a 0xe4 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 32 (var ea)) (cast 64 false (var loadw))))) empty)
dE "ld r0, 4(r26)" e81a0004 0xe8 (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 64 (var ea)) (cast 64 false (var loadw))))) empty)
dE "ldx r0, r26, r1" 7c1a082a 0xec (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 64 (var ea)) (cast 64 false (var loadw))))) empty)
dE "ldu r0, 4(r26)" e81a0005 0xf0 (seq (set r0 (let ea (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 64 (var ea)) (cast 64 false (var loadw))))) (set r26 (+ (var r26) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "ldux r0, r26, r1" 7c1a086a 0xf4 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 64 (var ea)) (cast 64 false (var loadw))))) (set r26 (+ (var r26) (var r1))))
dE "ldcix r0, r26, r1" 7c1a0eea 0xf8 (seq (set r0 (let ea (+ (var r26) (var r1)) (let loadw (loadw 0 64 (var ea)) (cast 64 false (var loadw))))) empty)
dE "lhbrx r0, r26, r1" 7c1a0e2c 0xfc (seq (set r0 (cast 64 false (let ea (+ (var r26) (var r1)) (append (loadw 0 8 (+ (var ea) (bv 64 0x0))) (loadw 0 8 (+ (var ea) (bv 64 0x1))))))) empty)
dE "lwbrx r0, r26, r1" 7c1a0c2c 0x100 (seq (set r0 (cast 64 false (let ea (+ (var r26) (var r1)) (append (loadw 0 8 (+ (var ea) (bv 64 0x0))) (append (loadw 0 8 (+ (var ea) (bv 64 0x1))) (append (loadw 0 8 (+ (var ea) (bv 64 0x2))) (loadw 0 8 (+ (var ea) (bv 64 0x3))))))))) empty)
dE "ldbrx r0, r26, r1" 7c1a0c28 0x104 (seq (set r0 (cast 64 false (let ea (+ (var r26) (var r1)) (append (loadw 0 8 (+ (var ea) (bv 64 0x0))) (append (loadw 0 8 (+ (var ea) (bv 64 0x1))) (append (loadw 0 8 (+ (var ea) (bv 64 0x2))) (append (loadw 0 8 (+ (var ea) (bv 64 0x3))) (append (loadw 0 8 (+ (var ea) (bv 64 0x4))) (append (loadw 0 8 (+ (var ea) (bv 64 0x5))) (append (loadw 0 8 (+ (var ea) (bv 64 0x6))) (loadw 0 8 (+ (var ea) (bv 64 0x7))))))))))))) empty)
d "lhbrx r0, r26, r1" 2c0e1a7c 0xfc (seq (set r0 (cast 64 false (let ea (+ (var r26) (var r1)) (append (loadw 0 8 (+ (var ea) (bv 64 0x1))) (loadw 0 8 (+ (var ea) (bv 64 0x0))))))) empty)
d "lwbrx r0, r26, r1" 2c0c1a7c 0x100 (seq (set r0 (cast 64 false (let ea (+ (var r26) (var r1)) (append (loadw 0 8 (+ (var ea) (bv 64 0x3))) (append (loadw 0 8 (+ (var ea) (bv 64 0x2))) (append (loadw 0 8 (+ (var ea) (bv 64 0x1))) (loadw 0 8 (+ (var ea) (bv 64 0x0))))))))) empty)
d "ldbrx r0, r26, r1" 280c1a7c 0x104 (seq (set r0 (cast 64 false (let ea (+ (var r26) (var r1)) (append (loadw 0 8 (+ (var ea) (bv 64 0x7))) (append (loadw 0 8 (+ (var ea) (bv 64 0x6))) (append (loadw 0 8 (+ (var ea) (bv 64 0x5))) (append (loadw 0 8 (+ (var ea) (bv 64 0x4))) (append (loadw 0 8 (+ (var ea) (bv 64 0x3))) (append (loadw 0 8 (+ (var ea) (bv 64 0x2))) (append (loadw 0 8 (+ (var ea) (bv 64 0x1))) (loadw 0 8 (+ (var ea) (bv 64 0x0))))))))))))) empty)
dE "and r0, r1, r2" 7c201038 0x108 (seq (set res (& (var r1) (var r2))) (set r0 (var res)) empty)
dE "andc r0, r1, r2" 7c201078 0x10c (seq (set res (& (var r1) (~ (var r2)))) (set r0 (var res)) empty)
dE "andi. r0, r2, 4" 70400004 0x110 (seq (set res (& (var r2) (cast 64 false (bv 16 0x4)))) (set r0 (var res)) (set l (var res)) (set r (bv 64 0x0)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr0 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr0 (append (bv 3 0x2) (var so_flag))) (set cr0 (append (bv 3 0x1) (var so_flag))))))
dE "andis. r26, r0, 4" 741a0004 0x114 (seq (set res (& (var r0) (cast 64 false (append (bv 16 0x4) (bv 16 0x0))))) (set r26 (var res)) (set l (var res)) (set r (bv 64 0x0)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr0 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr0 (append (bv 3 0x2) (var so_flag))) (set cr0 (append (bv 3 0x1) (var so_flag))))))
dE "mr r5, r20" 7e85a378 0x118 (seq (set res (| (var r20) (var r20))) (set r5 (var res)) empty)
dE "or r0, r26, r1" 7f400b78 0x11c (seq (set res (| (var r26) (var r1))) (set r0 (var res)) empty)
dE "orc r0, r1, r2" 7c201338 0x120 (seq (set res (| (var r1) (~ (var r2)))) (set r0 (var res)) empty)
dE "ori r0, r26, 4" 63400004 0x124 (seq (set res (| (var r26) (cast 64 false (bv 16 0x4)))) (set r0 (var res)) empty)
dE "oris r0, r2, 4" 64400004 0x128 (seq (set res (| (var r2) (cast 64 false (append (bv 16 0x4) (bv 16 0x0))))) (set r0 (var res)) empty)
dE "xor r0, r1, r2" 7c201278 0x12c (seq (set res (^ (var r1) (var r2))) (set r0 (var res)) empty)
dE "xori r0, r26, 4" 6b400004 0x130 (seq (set res (^ (var r26) (cast 64 false (bv 16 0x4)))) (set r0 (var res)) empty)
dE "xoris r0, r2, 4" 6c400004 0x134 (seq (set res (^ (var r2) (cast 64 false (append (bv 16 0x4) (bv 16 0x0))))) (set r0 (var res)) empty)
dE "nand r0, r1, r2" 7c2013b8 0x138 (seq (set res (~ (& (var r1) (var r2)))) (set r0 (var res)) empty)
dE "nor r0, r1, r2" 7c2010f8 0x13c (seq (set res (~ (| (var r1) (var r2)))) (set r0 (var res)) empty)
dE "cmpb r0, r0, r1" 7c000bf8 0x140 (seq (set res (bv 64 0x0)) (set n (bv 8 0x0)) (set bitmask_n_n7 (~ (| (>> (bv 64 0x0) (* (bv 8 0x8) (var n)) true) (<< (bv 64 0x0) (- (bv 8 0x3f) (+ (* (bv 8 0x8) (var n)) (bv 8 0x7))) true)))) (repeat (&& (ule (var n) (bv 8 0x8)) (! (== (var n) (bv 8 0x8)))) (seq (branch (== (& (var bitmask_n_n7) (var r0)) (& (var bitmask_n_n7) (var r1))) (set res (| (var res) (& (bv 64 0xffffffffffffffff) (var bitmask_n_n7)))) empty) (set n (+ (var n) (bv 8 0x1))) (set bitmask_n_n7 (~ (| (>> (bv 64 0x0) (* (bv 8 0x8) (var n)) true) (<< (bv 64 0x0) (- (bv 8 0x3f) (+ (* (bv 8 0x8) (var n)) (bv 8 0x7))) true)))))) (set r0 (var res)))
dE "eqv r0, r1, r6" 7c203238 0x144 (seq (set res (^ (var r1) (~ (var r6)))) (set r0 (var res)) empty)
dE "extsb r0, r4" 7c800774 0x148 (seq (set res (cast 64 (msb (cast 8 false (var r4))) (cast 8 false (var r4)))) (set r0 (var res)) empty)
dE "extsh r0, r4" 7c800734 0x14c (seq (set res (cast 64 (msb (cast 16 false (var r4))) (cast 16 false (var r4)))) (set r0 (var res)) empty)
dE "extsw r0, r4" 7c8007b4 0x150 (seq (set res (cast 64 (msb (cast 32 false (var r4))) (cast 32 false (var r4)))) (set r0 (var res)) empty)
dE "cntlzd r0, r1" 7c200074 0x154 (seq (set m (bv 64 0x0)) (set n (bv 64 0x0)) (repeat (&& (&& (ule (var n) (bv 64 0x40)) (! (== (var n) (bv 64 0x40)))) (! (! (is_zero (& (var r1) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var n) false)))))) (set n (+ (var n) (bv 64 0x1)))) (set r0 (- (var n) (var m))))
dE "cntlzd r0, r1" 7c200074 0x158 (seq (set m (bv 64 0x0)) (set n (bv 64 0x0)) (repeat (&& (&& (ule (var n) (bv 64 0x40)) (! (== (var n) (bv 64 0x40)))) (! (! (is_zero (& (var r1) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var n) false)))))) (set n (+ (var n) (bv 64 0x1)))) (set r0 (- (var n) (var m))))
dE "cmpw cr3, r0, r1" 7d800800 0x15c (seq (set l (cast 64 (msb (cast 32 false (var r0))) (cast 32 false (var r0)))) (set r (cast 64 (msb (cast 32 false (var r1))) (cast 32 false (var r1)))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr3 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr3 (append (bv 3 0x2) (var so_flag))) (set cr3 (append (bv 3 0x1) (var so_flag))))))
dE "cmpd cr5, r0, r1" 7ea00800 0x160 (seq (set l (var r0)) (set r (var r1)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr5 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr5 (append (bv 3 0x2) (var so_flag))) (set cr5 (append (bv 3 0x1) (var so_flag))))))
dE "cmpwi cr2, r0, 0xffff" 2d00ffff 0x164 (seq (set l (cast 64 (msb (cast 32 false (var r0))) (cast 32 false (var r0)))) (set r (cast 64 (msb (bv 16 0xffff)) (bv 16 0xffff))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr2 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr2 (append (bv 3 0x2) (var so_flag))) (set cr2 (append (bv 3 0x1) (var so_flag))))))
dE "cmpdi cr3, r0, 1" 2da00001 0x168 (seq (set l (var r0)) (set r (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr3 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr3 (append (bv 3 0x2) (var so_flag))) (set cr3 (append (bv 3 0x1) (var so_flag))))))
dE "cmplw cr4, r0, r1" 7e000840 0x16c (seq (set l (cast 64 (msb (cast 32 false (var r0))) (cast 32 false (var r0)))) (set r (cast 64 (msb (cast 32 false (var r1))) (cast 32 false (var r1)))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (ule (var l) (var r)) (! (== (var l) (var r)))) (set cr4 (append (bv 3 0x4) (var so_flag))) (branch (! (ule (var l) (var r))) (set cr4 (append (bv 3 0x2) (var so_flag))) (set cr4 (append (bv 3 0x1) (var so_flag))))))
dE "cmpld cr5, r0, r1" 7ea00840 0x170 (seq (set l (var r0)) (set r (var r1)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (ule (var l) (var r)) (! (== (var l) (var r)))) (set cr5 (append (bv 3 0x4) (var so_flag))) (branch (! (ule (var l) (var r))) (set cr5 (append (bv 3 0x2) (var so_flag))) (set cr5 (append (bv 3 0x1) (var so_flag))))))
dE "cmplwi cr6, r0, 0" 2b000000 0x174 (seq (set l (cast 64 (msb (cast 32 false (var r0))) (cast 32 false (var r0)))) (set r (cast 64 false (bv 16 0x0))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (ule (var l) (var r)) (! (== (var l) (var r)))) (set cr6 (append (bv 3 0x4) (var so_flag))) (branch (! (ule (var l) (var r))) (set cr6 (append (bv 3 0x2) (var so_flag))) (set cr6 (append (bv 3 0x1) (var so_flag))))))
dE "cmpldi cr7, r0, 1" 2ba00001 0x178 (seq (set l (var r0)) (set r (append (bv 48 0x0) (bv 16 0x1))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (ule (var l) (var r)) (! (== (var l) (var r)))) (set cr7 (append (bv 3 0x4) (var so_flag))) (branch (! (ule (var l) (var r))) (set cr7 (append (bv 3 0x2) (var so_flag))) (set cr7 (append (bv 3 0x1) (var so_flag))))))
dE "b 0x180" 48000004 0x17c (seq (set CIA (bv 64 0x17c)) empty empty (set NIA (bv 64 0x180)) (jmp (var NIA)))
dE "ba 0x4" 48000006 0x180 (seq (set CIA (bv 64 0x180)) empty empty (set NIA (bv 64 0x4)) (jmp (var NIA)))
dE "bgectr" 4c800420 0x184 (seq (set CIA (bv 64 0x184)) empty empty (set NIA (ite (let bo (bv 5 0x4) (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr0) (bv 4 0x8)))) (! (! (is_zero (& (bv 5 0x8) (var bo)))))))) (& (bv 64 0xfffffffffffffffc) (var ctr)) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bgectrl" 4c800421 0x188 (seq (set CIA (bv 64 0x188)) empty (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (let bo (bv 5 0x4) (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr0) (bv 4 0x8)))) (! (! (is_zero (& (bv 5 0x8) (var bo)))))))) (& (bv 64 0xfffffffffffffffc) (var ctr)) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bge 0x190" 40800004 0x18c (seq (set CIA (bv 64 0x18c)) empty empty (set NIA (ite (let bo (bv 5 0x4) (&& (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr0) (bv 4 0x8)))) (! (! (is_zero (& (bv 5 0x8) (var bo))))))) (|| (! (is_zero (& (bv 5 0x4) (var bo)))) (^^ (! (is_zero (var ctr))) (! (is_zero (& (bv 5 0x2) (var bo)))))))) (bv 64 0x190) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "ble 0x194" 40810004 0x190 (seq (set CIA (bv 64 0x190)) empty empty (set NIA (ite (let bo (bv 5 0x4) (&& (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr0) (bv 4 0x4)))) (! (! (is_zero (& (bv 5 0x8) (var bo))))))) (|| (! (is_zero (& (bv 5 0x4) (var bo)))) (^^ (! (is_zero (var ctr))) (! (is_zero (& (bv 5 0x2) (var bo)))))))) (bv 64 0x194) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bgel 0x198" 40800005 0x194 (seq (set CIA (bv 64 0x194)) empty (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (let bo (bv 5 0x4) (&& (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr0) (bv 4 0x8)))) (! (! (is_zero (& (bv 5 0x8) (var bo))))))) (|| (! (is_zero (& (bv 5 0x4) (var bo)))) (^^ (! (is_zero (var ctr))) (! (is_zero (& (bv 5 0x2) (var bo)))))))) (bv 64 0x198) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bgelr" 4c800020 0x198 (seq (set CIA (bv 64 0x198)) empty empty (set NIA (ite (let bo (bv 5 0x4) (&& (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr0) (bv 4 0x8)))) (! (! (is_zero (& (bv 5 0x8) (var bo))))))) (|| (! (is_zero (& (bv 5 0x4) (var bo)))) (^^ (! (is_zero (var ctr))) (! (is_zero (& (bv 5 0x2) (var bo)))))))) (& (bv 64 0xfffffffffffffffc) (var lr)) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bgelrl" 4c800021 0x19c (seq (set CIA (bv 64 0x19c)) empty (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (let bo (bv 5 0x4) (&& (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr0) (bv 4 0x8)))) (! (! (is_zero (& (bv 5 0x8) (var bo))))))) (|| (! (is_zero (& (bv 5 0x4) (var bo)))) (^^ (! (is_zero (var ctr))) (! (is_zero (& (bv 5 0x2) (var bo)))))))) (& (bv 64 0xfffffffffffffffc) (var lr)) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bctr" 4e800420 0x1a0 (seq (set CIA (bv 64 0x1a0)) empty empty (set NIA (& (bv 64 0xfffffffffffffffc) (var ctr))) (jmp (var NIA)))
dE "bctrl" 4e800421 0x1a4 (seq (set CIA (bv 64 0x1a4)) empty (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (& (bv 64 0xfffffffffffffffc) (var ctr))) (jmp (var NIA)))
d "bne cr5" 00009640 0x1a4 (seq (set CIA (bv 64 0x1a4)) empty empty (set NIA (ite (let bo (bv 5 0x4) (&& (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr5) (bv 4 0x2)))) (! (! (is_zero (& (bv 5 0x8) (var bo))))))) (|| (! (is_zero (& (bv 5 0x4) (var bo)))) (^^ (! (is_zero (var ctr))) (! (is_zero (& (bv 5 0x2) (var bo)))))))) (bv 64 0x7) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnz 0x1ac" 42000004 0x1a8 (seq (set CIA (bv 64 0x1a8)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (! (is_zero (var ctr))) (bv 64 0x1ac) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnza 0x4" 42000006 0x1ac (seq (set CIA (bv 64 0x1ac)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (! (is_zero (var ctr))) (bv 64 0x4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzl 0x1b4" 42000005 0x1b0 (seq (set CIA (bv 64 0x1b0)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (! (is_zero (var ctr))) (bv 64 0x1b4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzla 0x4" 42000007 0x1b4 (seq (set CIA (bv 64 0x1b4)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (! (is_zero (var ctr))) (bv 64 0x4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzlr" 4e000020 0x1b8 (seq (set CIA (bv 64 0x1b8)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (! (is_zero (var ctr))) (& (bv 64 0xfffffffffffffffc) (var lr)) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzlrl" 4e000021 0x1bc (seq (set CIA (bv 64 0x1bc)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (! (is_zero (var ctr))) (& (bv 64 0xfffffffffffffffc) (var lr)) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdz 0x1c4" 42400004 0x1c0 (seq (set CIA (bv 64 0x1c0)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (is_zero (var ctr)) (bv 64 0x1c4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdza 0x4" 42400006 0x1c4 (seq (set CIA (bv 64 0x1c4)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (is_zero (var ctr)) (bv 64 0x4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzl 0x1cc" 42400005 0x1c8 (seq (set CIA (bv 64 0x1c8)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (is_zero (var ctr)) (bv 64 0x1cc) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzla 0x4" 42400007 0x1cc (seq (set CIA (bv 64 0x1cc)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (is_zero (var ctr)) (bv 64 0x4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzlr" 4e400020 0x1d0 (seq (set CIA (bv 64 0x1d0)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (is_zero (var ctr)) (& (bv 64 0xfffffffffffffffc) (var lr)) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzlrl" 4e400021 0x1d4 (seq (set CIA (bv 64 0x1d4)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (is_zero (var ctr)) (& (bv 64 0xfffffffffffffffc) (var lr)) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bl 0x1dc" 48000005 0x1d8 (seq (set CIA (bv 64 0x1d8)) empty (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (bv 64 0x1dc)) (jmp (var NIA)))
dE "bla 0x4" 48000007 0x1dc (seq (set CIA (bv 64 0x1dc)) empty (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (bv 64 0x4)) (jmp (var NIA)))
dE "blr" 4e800020 0x1e0 (seq (set CIA (bv 64 0x1e0)) empty empty (set NIA (& (bv 64 0xfffffffffffffffc) (var lr))) (jmp (var NIA)))
dE "blrl" 4e800021 0x1e4 (seq (set CIA (bv 64 0x1e4)) empty (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (& (bv 64 0xfffffffffffffffc) (var lr))) (jmp (var NIA)))
dE "bnsa 0x18" 4083001a 0x1e8 (seq (set CIA (bv 64 0x1e8)) empty empty (set NIA (ite (let bo (bv 5 0x4) (&& (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr0) (bv 4 0x1)))) (! (! (is_zero (& (bv 5 0x8) (var bo))))))) (|| (! (is_zero (& (bv 5 0x4) (var bo)))) (^^ (! (is_zero (var ctr))) (! (is_zero (& (bv 5 0x2) (var bo)))))))) (bv 64 0x18) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bgela cr1, 0x18" 4084001b 0x1ec (seq (set CIA (bv 64 0x1ec)) empty (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (let bo (bv 5 0x4) (&& (|| (! (is_zero (& (bv 5 0x10) (var bo)))) (^^ (! (is_zero (& (var cr1) (bv 4 0x8)))) (! (! (is_zero (& (bv 5 0x8) (var bo))))))) (|| (! (is_zero (& (bv 5 0x4) (var bo)))) (^^ (! (is_zero (var ctr))) (! (is_zero (& (bv 5 0x2) (var bo)))))))) (bv 64 0x18) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzt 4*cr1+lt, 0x81d4" 41047fe4 0x1f0 (seq (set CIA (bv 64 0x1f0)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (&& (! (is_zero (var ctr))) (! (is_zero (& (var cr1) (bv 4 0x1))))) (bv 64 0x81d4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnztl 4*cr1+lt, 0x81d8" 41047fe5 0x1f4 (seq (set CIA (bv 64 0x1f4)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (&& (! (is_zero (var ctr))) (! (is_zero (& (var cr1) (bv 4 0x1))))) (bv 64 0x81d8) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzta 4*cr1+lt, 0x7fe4" 41047fe6 0x1f8 (seq (set CIA (bv 64 0x1f8)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (&& (! (is_zero (var ctr))) (! (is_zero (& (var cr1) (bv 4 0x1))))) (bv 64 0x7fe4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnztla 4*cr1+lt, 0x7fe4" 41047fe7 0x1fc (seq (set CIA (bv 64 0x1fc)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (&& (! (is_zero (var ctr))) (! (is_zero (& (var cr1) (bv 4 0x1))))) (bv 64 0x7fe4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzf 4*cr1+lt, 0x81e4" 40047fe4 0x200 (seq (set CIA (bv 64 0x200)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (&& (! (is_zero (var ctr))) (is_zero (& (var cr1) (bv 4 0x1)))) (bv 64 0x81e4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzfl 4*cr1+lt, 0x81e8" 40047fe5 0x204 (seq (set CIA (bv 64 0x204)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (&& (! (is_zero (var ctr))) (is_zero (& (var cr1) (bv 4 0x1)))) (bv 64 0x81e8) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzfa 4*cr1+lt, 0x7fe4" 40047fe6 0x208 (seq (set CIA (bv 64 0x208)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (&& (! (is_zero (var ctr))) (is_zero (& (var cr1) (bv 4 0x1)))) (bv 64 0x7fe4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdnzfla 4*cr1+lt, 0x7fe4" 40047fe7 0x20c (seq (set CIA (bv 64 0x20c)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (&& (! (is_zero (var ctr))) (is_zero (& (var cr1) (bv 4 0x1)))) (bv 64 0x7fe4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzt 4*cr1+lt, 0x81f4" 41447fe4 0x210 (seq (set CIA (bv 64 0x210)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (&& (is_zero (var ctr)) (! (is_zero (& (var cr1) (bv 4 0x1))))) (bv 64 0x81f4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzta 4*cr1+lt, 0x7fe4" 41447fe6 0x214 (seq (set CIA (bv 64 0x214)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (&& (is_zero (var ctr)) (! (is_zero (& (var cr1) (bv 4 0x1))))) (bv 64 0x7fe4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdztl 4*cr1+lt, 0x81fc" 41447fe5 0x218 (seq (set CIA (bv 64 0x218)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (&& (is_zero (var ctr)) (! (is_zero (& (var cr1) (bv 4 0x1))))) (bv 64 0x81fc) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdztla 4*cr1+lt, 0x7fe4" 41447fe7 0x21c (seq (set CIA (bv 64 0x21c)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (&& (is_zero (var ctr)) (! (is_zero (& (var cr1) (bv 4 0x1))))) (bv 64 0x7fe4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzf 4*cr1+lt, 0x8204" 40447fe4 0x220 (seq (set CIA (bv 64 0x220)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (&& (is_zero (var ctr)) (is_zero (& (var cr1) (bv 4 0x1)))) (bv 64 0x8204) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzfa 4*cr1+lt, 0x7fe4" 40447fe6 0x224 (seq (set CIA (bv 64 0x224)) (set ctr (- (var ctr) (bv 64 0x1))) empty (set NIA (ite (&& (is_zero (var ctr)) (is_zero (& (var cr1) (bv 4 0x1)))) (bv 64 0x7fe4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzfl 4*cr1+lt, 0x820c" 40447fe5 0x228 (seq (set CIA (bv 64 0x228)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (&& (is_zero (var ctr)) (is_zero (& (var cr1) (bv 4 0x1)))) (bv 64 0x820c) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "bdzfla 4*cr1+lt, 0x7fe4" 40447fe7 0x22c (seq (set CIA (bv 64 0x22c)) (set ctr (- (var ctr) (bv 64 0x1))) (set lr (+ (var CIA) (bv 64 0x4))) (set NIA (ite (&& (is_zero (var ctr)) (is_zero (& (var cr1) (bv 4 0x1)))) (bv 64 0x7fe4) (+ (var CIA) (bv 64 0x4)))) (jmp (var NIA)))
dE "nop" 60000000 0x230 nop
dE "xnop" 68000000 0x234 nop
dEB "mtocrf 4, r4" 7c904120 0x238 (seq (set val (>> (var r4) (bv 8 0x18) false)) (set cr6 (cast 4 false (var val))))
dEB "isel r10,0,r23,14" 7d40bb9e 0x23c ()
dE "mtctr r28" 7f8903a6 0x240 (set ctr (cast 64 false (var r28)))
dE "mfctr r28" 7f8902a6 0x244 (set r28 (cast 64 false (var ctr)))
dE "mtlr r28" 7f8803a6 0x248 (set lr (cast 64 false (var r28)))
dE "mflr r28" 7f8802a6 0x24c (set r28 (cast 64 false (var lr)))
dE "mtxer r28" 7f8103a6 0x250 (seq (set v (& (~ (| (>> (bv 64 0x0) (bv 8 0x20) true) (<< (bv 64 0x0) (- (bv 8 0x3f) (bv 8 0x22)) true))) (cast 64 false (var r28)))) (set xer (var v)) (set so (! (is_zero (& (var v) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (bv 8 0x20) false))))) (set ov (! (is_zero (& (var v) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (bv 8 0x21) false))))) (set ca (! (is_zero (& (var v) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (bv 8 0x22) false))))))
dE "mfxer r0" 7c0102a6 0x254 (seq (set val (| (| (<< (cast 64 false (ite (var so) (bv 1 0x1) (bv 1 0x0))) (bv 8 0x1f) false) (<< (cast 64 false (ite (var ov) (bv 1 0x1) (bv 1 0x0))) (bv 8 0x1e) false)) (<< (cast 64 false (ite (var ca) (bv 1 0x1) (bv 1 0x0))) (bv 8 0x1d) false))) (set r0 (cast 64 false (var val))))
dE "mfcr r10" 7d400026 0x258 (seq (set cr (| (cast 32 false (var cr7)) (| (<< (cast 32 false (var cr6)) (bv 8 0x4) false) (| (<< (cast 32 false (var cr5)) (bv 8 0x8) false) (| (<< (cast 32 false (var cr4)) (bv 8 0xc) false) (| (<< (cast 32 false (var cr3)) (bv 8 0x10) false) (| (<< (cast 32 false (var cr2)) (bv 8 0x14) false) (| (<< (cast 32 false (var cr1)) (bv 8 0x18) false) (<< (cast 32 false (var cr0)) (bv 8 0x1c) false))))))))) (set r10 (cast 64 false (var cr))))
dE "mfctr r10" 7d4902a6 0x25c (set r10 (cast 64 false (var ctr)))
dEB "mffs f3" fc60048e 0x260 ()
dE "mflr r10" 7d4802a6 0x264 (set r10 (cast 64 false (var lr)))
dE "mfmsr r10" 7d4000a6 0x268 (set r10 (cast 64 false (var msr)))
dEB "mfocrf r10, 1" 7d501026 0x26c (seq (set val (<< (cast 64 false (var cr6)) (bv 8 0x18) false)) (set r10 (cast 64 false (var val))))
dEB "mfspr r10,2" 7d4202a6 0x270 ()
dEB "mftb r10" 7d4c42a6 0x274 ()
dEB "mfvscr v2" 10400604 0x278 ()
dEB "mtocrf 1, r12" 7d901120 0x27c (seq (set val (>> (var r12) (bv 8 0x18) false)) (set cr6 (cast 4 false (var val))))
dE "mtctr r10" 7d4903a6 0x280 (set ctr (cast 64 false (var r10)))
dEB "mtfsb0 2" fc40008c 0x284 ()
dEB "mtfsb1 1" fc20004c 0x288 ()
dEB "mtfsf 3,f1" fc060d8e 0x28c ()
dEB "mtfsfi 4,4" fe00410c 0x290 ()
dE "mtlr r10" 7d4803a6 0x294 (set lr (cast 64 false (var r10)))
dEB "mtmsr r10" 7d400124 0x298 ()
dEB "mtmsrd r10" 7d400164 0x29c ()
dEB "mtocrf 1, r2" 7c501120 0x2a0 (seq (set val (>> (var r2) (bv 8 0x18) false)) (set cr6 (cast 4 false (var val))))
dEB "mtspr 15,r1" 7c2f03a6 0x2a4 ()
dEB "mtvscr v1" 10000e44 0x2a8 ()
dEB "mfxer r10" 7d4102a6 0x2ac (seq (set val (| (| (<< (cast 64 false (ite (var so) (bv 1 0x1) (bv 1 0x0))) (bv 8 0x1f) false) (<< (cast 64 false (ite (var ov) (bv 1 0x1) (bv 1 0x0))) (bv 8 0x1e) false)) (<< (cast 64 false (ite (var ca) (bv 1 0x1) (bv 1 0x0))) (bv 8 0x1d) false))) (set r10 (cast 64 false (var val))))
dEB "mfrtcu r10" 7d4402a6 0x2b0 ()
dEB "mfrtcl r10" 7d4502a6 0x2b4 ()
dEB "mfdscr r10" 7d5102a6 0x2b8 ()
dEB "mfdsisr r10" 7d5202a6 0x2bc ()
dEB "mfdar r10" 7d5302a6 0x2c0 ()
dEB "mfcfar r10" 7d5c02a6 0x2c4 ()
dEB "mfamr r10" 7d5d02a6 0x2c8 ()
dEB "mfdbatu r10,2" 7d5c82a6 0x2cc ()
dEB "mfdbatl r10,1" 7d5b82a6 0x2d0 ()
dEB "mfibatu r10,3" 7d5682a6 0x2d4 ()
dEB "mfibatl r1,1" 7c3382a6 0x2d8 ()
dEB "mfasr r10" 7d5842a6 0x2dc ()
dEB "mfpvr r10" 7d5f42a6 0x2e0 ()
dEB "mftbu r10" 7d4d42a6 0x2e4 ()
dE "mtxer r10" 7d4103a6 0x2e8 (seq (set v (& (~ (| (>> (bv 64 0x0) (bv 8 0x20) true) (<< (bv 64 0x0) (- (bv 8 0x3f) (bv 8 0x22)) true))) (cast 64 false (var r10)))) (set xer (var v)) (set so (! (is_zero (& (var v) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (bv 8 0x20) false))))) (set ov (! (is_zero (& (var v) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (bv 8 0x21) false))))) (set ca (! (is_zero (& (var v) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (bv 8 0x22) false))))))
dEB "mtdscr r10" 7d5103a6 0x2ec ()
dEB "mtdsisr r10" 7d5203a6 0x2f0 ()
dEB "mtdar r10" 7d5303a6 0x2f4 ()
dEB "mtcfar r10" 7d5c03a6 0x2f8 ()
dEB "mtamr r10" 7d5d03a6 0x2fc ()
dEB "mttbl r10" 7d5c43a6 0x300 ()
dEB "mttbu r10" 7d5d43a6 0x304 ()
dEB "mtdbatu 3,r4" 7c9e83a6 0x308 ()
dEB "mtdbatl 3,r4" 7c9f83a6 0x30c ()
dEB "mtibatu 3,r4" 7c9683a6 0x310 ()
dEB "mtibatl 3,r4" 7c9783a6 0x314 ()
dE "sld r10, r20, r4" 7e8a2036 0x318 (seq empty empty (set result (<< (var r20) (& (bv 64 0x3f) (var r4)) false)) (set r10 (var result)) empty)
dE "srd r10, r20, r4" 7e8a2436 0x31c (seq empty empty (set result (>> (var r20) (& (bv 64 0x3f) (var r4)) false)) (set r10 (var result)) empty)
dE "slw r10, r20, r4" 7e8a2030 0x320 (seq empty empty (set result (append (bv 32 0x0) (<< (cast 32 false (var r20)) (var r4) false))) (set r10 (var result)) empty)
dE "srw r10, r20, r4" 7e8a2430 0x324 (seq empty empty (set result (append (bv 32 0x0) (>> (cast 32 false (var r20)) (var r4) false))) (set r10 (var result)) empty)
dE "srad r10, r20, r4" 7e8a2634 0x328 (seq empty (set ca (ite (&& (msb (var r20)) (! (is_zero (smod (var r20) (cast 64 false (<< (bv 64 0x1) (cast 6 false (& (var r4) (bv 64 0x3f))) false)))))) true false)) (set result (>> (var r20) (cast 6 false (& (var r4) (bv 64 0x3f))) (msb (var r20)))) (set r10 (var result)) empty)
dE "sradi r10, r20, 4" 7e8a2674 0x32c (seq empty (set ca (ite (&& (msb (var r20)) (! (is_zero (smod (var r20) (cast 64 false (<< (bv 64 0x1) (bv 8 0x4) false)))))) true false)) (set result (>> (var r20) (bv 8 0x4) (msb (var r20)))) (set r10 (var result)) empty)
dE "lis r22, 0" 3ec00000 0x330 (seq (set r22 (let v (append (bv 16 0x0) (bv 16 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) empty)
dE "addi r22, r22, 0" 3ad60000 0x334 (seq (set a (var r22)) (set b (let v (bv 16 0x0) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) empty (set r22 (+ (var a) (var b))) empty empty empty)
dE "ld r22, 0(r22)" ead60000 0x338 (seq (set r22 (let ea (+ (var r22) (let v (bv 16 0x0) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 64 (var ea)) (cast 64 false (var loadw))))) empty)
dE "sraw r10, r22, r4" 7eca2630 0x33c (seq empty (set ca (ite (&& (msb (cast 32 (msb (var r22)) (var r22))) (! (is_zero (smod (cast 32 false (var r22)) (cast 32 false (<< (bv 64 0x1) (cast 6 false (& (var r4) (bv 64 0x3f))) false)))))) true false)) (set result (cast 64 (msb (>> (cast 32 false (var r22)) (cast 6 false (& (var r4) (bv 64 0x3f))) (msb (cast 32 false (var r22))))) (>> (cast 32 false (var r22)) (cast 6 false (& (var r4) (bv 64 0x3f))) (msb (cast 32 false (var r22)))))) (set r10 (var result)) empty)
dE "srawi r10, r22, 4" 7eca2670 0x340 (seq empty (set ca (ite (&& (msb (cast 32 (msb (var r22)) (var r22))) (! (is_zero (smod (cast 32 false (var r22)) (cast 32 false (<< (bv 64 0x1) (bv 8 0x4) false)))))) true false)) (set result (cast 64 (msb (>> (cast 32 false (var r22)) (bv 8 0x4) (msb (cast 32 false (var r22))))) (>> (cast 32 false (var r22)) (bv 8 0x4) (msb (cast 32 false (var r22)))))) (set r10 (var result)) empty)
dE "slwi r10, r20, 0x10" 568a801e 0x344 (seq empty empty (set result (& (<< (var r20) (& (bv 64 0x3f) (bv 64 0x10)) false) (bv 64 0xffffffff))) (set r10 (var result)) empty)
dE "srwi r10, r20, 0x10" 568a843e 0x348 (seq empty empty (set result (& (>> (& (var r20) (bv 64 0xffffffff)) (& (bv 64 0x3f) (bv 64 0x10)) false) (bv 64 0xffffffff))) (set r10 (var result)) empty)
dE "rlwimi r10, r20, 8, 5, 5" 528a414a 0x34c (seq (set mstart (bv 8 0x25)) (set mstop (bv 8 0x25)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (| (& (let rotl32_x (cast 32 false (var r20)) (let rotl32_y (bv 8 0x8) (let rotl64_x (append (var rotl32_x) (var rotl32_x)) (let rotl64_y (var rotl32_y) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))))) (var mask)) (& (var r10) (~ (var mask))))) (set r10 (var result)) empty)
dE "rldicl r10, r20, 4, 0x10" 7a8a2400 0x350 (seq (set mstart (bv 8 0x10)) (set mstop (bv 8 0x3f)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (let rotl64_x (var r20) (let rotl64_y (& (bv 8 0x3f) (bv 8 0x4)) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))) (var mask))) (set r10 (var result)) empty)
dE "rldimi r10, r20, 4, 8" 7a8a220c 0x354 (seq (set mstart (bv 8 0x8)) (set mstop (bv 8 0x3b)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (| (& (let rotl64_x (var r20) (let rotl64_y (& (bv 8 0x3f) (bv 8 0x4)) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))) (var mask)) (& (var r10) (~ (var mask))))) (set r10 (var result)) empty)
dE "rotld r10, r20, r4" 7a8a2010 0x358 (seq empty empty (set result (let rotl64_x (var r20) (let rotl64_y (& (bv 8 0x3f) (cast 8 false (var r4))) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false))))) (set r10 (var result)) empty)
dE "rotlw r10, r20, r4" 5e8a203e 0x35c (seq (set mstart (bv 8 0x20)) (set mstop (bv 8 0x3f)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (let rotl32_x (cast 32 false (var r20)) (let rotl32_y (cast 6 false (& (var r4) (bv 64 0x1f))) (let rotl64_x (append (var rotl32_x) (var rotl32_x)) (let rotl64_y (var rotl32_y) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))))) (var mask))) (set r10 (var result)) empty)
dE "rotlwi r10, r2, 4" 544a203e 0x360 (seq (set mstart (bv 8 0x20)) (set mstop (bv 8 0x3f)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (let rotl32_x (cast 32 false (var r2)) (let rotl32_y (bv 8 0x4) (let rotl64_x (append (var rotl32_x) (var rotl32_x)) (let rotl64_y (var rotl32_y) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))))) (var mask))) (set r10 (var result)) empty)
dE "clrlwi r10, r20, 0xc" 568a033e 0x364 (seq (set mstart (bv 8 0x2c)) (set mstop (bv 8 0x3f)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (var r20) (var mask))) (set r10 (var result)) empty)
dE "clrldi. r10, r20, 0x3c" 7a8a0721 0x368 (seq (set mstart (bv 8 0x3c)) (set mstop (bv 8 0x3f)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (var r20) (var mask))) (set r10 (var result)) (set l (var result)) (set r (bv 64 0x0)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr0 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr0 (append (bv 3 0x2) (var so_flag))) (set cr0 (append (bv 3 0x1) (var so_flag))))))
dE "rldcl r10, r20, r4, 0x10" 7a8a2410 0x36c (seq (set mstart (bv 8 0x10)) (set mstop (bv 8 0x3f)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (let rotl64_x (var r20) (let rotl64_y (& (bv 8 0x3f) (cast 8 false (var r4))) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))) (var mask))) (set r10 (var result)) empty)
dE "rldcr r10, r20, r4, 0x10" 7a8a2412 0x370 (seq (set mstart (bv 8 0x0)) (set mstop (bv 8 0x10)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (let rotl64_x (var r20) (let rotl64_y (& (bv 8 0x3f) (cast 8 false (var r4))) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))) (var mask))) (set r10 (var result)) empty)
dE "rldicr r10, r20, 4, 0x10" 7a8a2404 0x374 (seq (set mstart (bv 8 0x0)) (set mstop (bv 8 0x10)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (let rotl64_x (var r20) (let rotl64_y (& (bv 8 0x3f) (bv 8 0x4)) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))) (var mask))) (set r10 (var result)) empty)
dE "rlwinm r10, r20, 4, 0x1b, 0x1b" 568a26f6 0x378 (seq (set mstart (bv 8 0x3b)) (set mstop (bv 8 0x3b)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (let rotl32_x (cast 32 false (var r20)) (let rotl32_y (bv 8 0x4) (let rotl64_x (append (var rotl32_x) (var rotl32_x)) (let rotl64_y (var rotl32_y) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))))) (var mask))) (set r10 (var result)) empty)
dE "rlwnm r10, r20, r4, 0x1b, 0x1b" 5e8a26f6 0x37c (seq (set mstart (bv 8 0x3b)) (set mstop (bv 8 0x3b)) (set m (bv 64 0x0)) (repeat (! (== (var mstart) (var mstop))) (seq (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstart) false))) (set mstart (smod (+ (var mstart) (bv 8 0x1)) (bv 8 0x40))))) (set m (| (var m) (>> (>> (bv 64 0x0) (bv 8 0x1) true) (var mstop) false))) (set mask (cast 64 false (var m))) empty (set result (& (let rotl32_x (cast 32 false (var r20)) (let rotl32_y (cast 6 false (& (var r4) (bv 64 0x1f))) (let rotl64_x (append (var rotl32_x) (var rotl32_x)) (let rotl64_y (var rotl32_y) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false)))))) (var mask))) (set r10 (var result)) empty)
dE "rotldi r10, r20, 4" 7a8a2000 0x380 (seq empty empty (set result (let rotl64_x (var r20) (let rotl64_y (& (bv 8 0x3f) (bv 8 0x4)) (| (<< (var rotl64_x) (var rotl64_y) false) (>> (var rotl64_x) (- (bv 8 0x40) (cast 8 false (var rotl64_y))) false))))) (set r10 (var result)) empty)
dE "divd r4, r6, r7" 7c863bd2 0x384 (seq (set r4 (cast 64 false (sdiv (cast 128 (msb (var r6)) (var r6)) (cast 128 (msb (var r7)) (var r7))))) empty)
dE "divdu r4, r6, r7" 7c863b92 0x388 (seq (set r4 (cast 64 false (div (cast 128 false (var r6)) (cast 128 false (var r7))))) empty)
dE "divw r4, r6, r7" 7c863bd6 0x38c (seq (set r4 (cast 64 false (sdiv (cast 64 (msb (cast 32 false (var r6))) (cast 32 false (var r6))) (cast 64 (msb (cast 32 false (var r7))) (cast 32 false (var r7)))))) empty)
dE "divwu r4, r6, r7" 7c863b96 0x390 (seq (set r4 (cast 64 false (div (cast 64 false (cast 32 (msb (var r6)) (var r6))) (cast 64 false (cast 32 (msb (var r7)) (var r7)))))) empty)
dE "mulhd r4, r6, r7" 7c863892 0x394 (seq (set r4 (cast 64 false (>> (* (cast 128 (msb (var r6)) (var r6)) (cast 128 (msb (var r7)) (var r7))) (bv 8 0x40) false))) empty)
dE "mulhdu r4, r6, r7" 7c863812 0x398 (seq (set r4 (cast 64 false (>> (* (cast 128 false (var r6)) (cast 128 false (var r7))) (bv 8 0x40) false))) empty)
dE "mulhw r4, r6, r7" 7c863896 0x39c (seq (set r4 (cast 64 false (>> (* (cast 64 (msb (cast 32 false (var r6))) (cast 32 false (var r6))) (cast 64 (msb (cast 32 false (var r7))) (cast 32 false (var r7)))) (bv 8 0x20) false))) empty)
dE "mulhwu r4, r6, r7" 7c863816 0x3a0 (seq (set r4 (cast 64 false (>> (* (cast 64 false (cast 32 (msb (var r6)) (var r6))) (cast 64 false (cast 32 (msb (var r7)) (var r7)))) (bv 8 0x20) false))) empty)
dE "mulld r4, r6, r7" 7c8639d2 0x3a4 (seq (set r4 (cast 64 false (* (cast 128 (msb (var r6)) (var r6)) (cast 128 (msb (var r7)) (var r7))))) empty)
dE "mulli r4, r6, 7" 1c860007 0x3a8 (seq (set r4 (cast 64 false (* (cast 128 (msb (var r6)) (var r6)) (cast 128 (msb (bv 16 0x7)) (bv 16 0x7))))) empty)
dE "mullw r4, r6, r7" 7c8639d6 0x3ac (seq (set r4 (cast 64 false (* (cast 64 (msb (cast 32 false (var r6))) (cast 32 false (var r6))) (cast 64 (msb (cast 32 false (var r7))) (cast 32 false (var r7)))))) empty)
dEB "creqv 4*cr3+so,4*cr1+lt,4*cr1+so" 4de43a42 0x3b0 ()
dEB "crxor 4*cr3+so,4*cr1+lt,4*cr1+so" 4de43982 0x3b4 ()
dEB "crand 4*cr3+so,4*cr1+lt,4*cr1+so" 4de43a02 0x3b8 ()
dEB "crandc 4*cr3+so,4*cr1+lt,4*cr1+so" 4de43902 0x3bc ()
dEB "crnand 4*cr3+so,4*cr1+lt,4*cr1+so" 4de439c2 0x3c0 ()
dEB "crnor 4*cr3+so,4*cr1+lt,4*cr1+so" 4de43842 0x3c4 ()
dEB "cror 4*cr3+so,4*cr1+lt,4*cr1+so" 4de43b82 0x3c8 ()
dEB "crorc 4*cr3+so,4*cr1+lt,4*cr1+so" 4de43b42 0x3cc ()
dEB "crset 4*cr3+so" 4def7a42 0x3d0 ()
dEB "crnot 4*cr3+so,4*cr1+lt" 4de42042 0x3d4 ()
dEB "crmove 4*cr3+so,4*cr1+lt" 4de42382 0x3d8 ()
dEB "crclr 4*cr3+so" 4def7982 0x3dc ()
dE "mcrf cr4, cr3" 4e0c0000 0x3e0 (set cr4 (var cr3))
