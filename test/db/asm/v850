d "movea 0xff, r0, r20" 20a6ff00 0x100000 (set r20 (+ (var r0) (bv 32 0xff)))
d "mov 0xffff, r21" 3506ffff0000 0x100004 (set r21 (bv 32 0xffff))
d "mov 0x200000, sp" 230600002000 0x10000a (set sp (bv 32 0x200000))
d "mov 0x10073c, ep" 3e063c071000 0x100010 (set ep (bv 32 0x10073c))
d "mov 0x10873c, gp" 24063c871000 0x100016 (set gp (bv 32 0x10873c))
d "mov 0x1002e4, r6" 2606e4021000 0x10001c (set r6 (bv 32 0x1002e4))
d "ldsr r6, CTBP, 0" e6a72000 0x100022 (set CTBP (var r6))
d "stsr PSW, r6, 0" e5374000 0x100026 (set r6 (var PSW))
d "movhi 1, r0, r7" 403e0100 0x10002a (set r7 (+ (var r0) (bv 32 0x10000)))
d "or r7, r6" 0731 0x10002e (seq (set result (| (var r6) (var r7))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r6 (var result)))
d "ldsr r6, PSW, 0" e62f2000 0x100030 (set PSW (var r6))
d "movhi 2, r0, r6" 40360200 0x100034 (set r6 (+ (var r0) (bv 32 0x20000)))
d "ldsr r6, FPSR, 0" e6372000 0x100038 (set FPSR (var r6))
d "mov 0x100744, r6" 260644071000 0x10003c (set r6 (bv 32 0x100744))
d "mov 0x10074c, r7" 27064c071000 0x100042 (set r7 (bv 32 0x10074c))
d "st.w r0, 0[r6]" 66070100 0x100048 (seq (set _adr (+ (var r6) (bv 32 0x0))) (storew 0 (var _adr) (var r0)))
d "addi 4, r6, r6" 06360400 0x10004c (seq (set result (+ (var r6) (bv 32 0x4))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r6)) (! (== (var result) (var r6)))) (&& (sle (var result) (bv 32 0x4)) (! (== (var result) (bv 32 0x4))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r6 (var result)))
d "cmp r7, r6" e731 0x100050 (seq (set result (- (var r6) (var r7))) (set PSW (| (| (| (<< (ite (&& (sle (var r7) (var r6)) (! (== (var r7) (var r6)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bl 0x100048" b1fd 0x100052 (branch (! (is_zero (& (>> (var PSW) (bv 32 0x3) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x100052) (bv 32 0xfffffff6))) (jmp (var _pc))) nop)
d "jarl 0x10019c, lp" 80ff4801 0x100054 (seq (set lp (+ (bv 32 0x100054) (bv 32 0x4))) (set _pc (+ (bv 32 0x100054) (bv 32 0x148))) (jmp (var _pc)))
d "addi -16, sp, sp" 031ef0ff 0x100058 (seq (set result (+ (var sp) (bv 32 0xfffffff0))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var sp)) (! (== (var result) (var sp)))) (&& (sle (var result) (bv 32 0xfffffff0)) (! (== (var result) (bv 32 0xfffffff0))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set sp (var result)))
d "mov 0, r6" 0032 0x10005c (set r6 (bv 32 0x0))
d "mov 0, r7" 003a 0x10005e (set r7 (bv 32 0x0))
d "mov 0, r8" 0042 0x100060 (set r8 (bv 32 0x0))
d "jarl 0x10016a, lp" 80ff0801 0x100062 (seq (set lp (+ (bv 32 0x100062) (bv 32 0x4))) (set _pc (+ (bv 32 0x100062) (bv 32 0x108))) (jmp (var _pc)))
d "mov r10, r6" 0a30 0x100066 (set r6 (var r10))
d "jarl 0x1001d4, lp" 80ff6c01 0x100068 (seq (set lp (+ (bv 32 0x100068) (bv 32 0x4))) (set _pc (+ (bv 32 0x100068) (bv 32 0x16c))) (jmp (var _pc)))
d "add -4, sp" 5c1a 0x10006c (seq (set result (+ (var sp) (bv 32 0xfffffffc))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var sp)) (! (== (var result) (var sp)))) (&& (sle (var result) (bv 32 0xfffffffc)) (! (== (var result) (bv 32 0xfffffffc))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set sp (var result)))
d "st.w r29, 0[sp]" 63ef0100 0x10006e (seq (set _adr (+ (var sp) (bv 32 0x0))) (storew 0 (var _adr) (var r29)))
d "add -12, sp" 541a 0x100072 (seq (set result (+ (var sp) (bv 32 0xfffffff4))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var sp)) (! (== (var result) (var sp)))) (&& (sle (var result) (bv 32 0xfffffff4)) (! (== (var result) (bv 32 0xfffffff4))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set sp (var result)))
d "mov sp, r29" 03e8 0x100074 (set r29 (var sp))
d "st.b r0, 11[r29]" 5d070b00 0x100076 (seq (set _adr (+ (var r29) (bv 32 0xb))) (storew 0 (var _adr) (cast 8 false (var r0))))
d "st.w r0, 4[r29]" 7d070500 0x10007a (seq (set _adr (+ (var r29) (bv 32 0x4))) (storew 0 (var _adr) (var r0)))
d "br 0x1000f8" d53d 0x10007e (branch true (seq (set _pc (+ (bv 32 0x10007e) (bv 32 0x7a))) (jmp (var _pc))) nop)
d "mov 0x1002fc, r11" 2b06fc021000 0x100080 (set r11 (bv 32 0x1002fc))
d "ld.w 4[r29], r10" 3d570500 0x100086 (seq (set _adr (+ (var r29) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
d "add r11, r10" cb51 0x10008a (seq (set result (+ (var r10) (var r11))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (var r11)) (! (== (var result) (var r11))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "ld.b 0[r10], r10" 0a570000 0x10008c (seq (set _adr (+ (var r10) (bv 32 0x0))) (set r10 (let _v (cast 32 false (loadw 0 8 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x8)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)))))))
d "shl 24, r10" d852 0x100090 (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x100092 (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "mov r10, r11" 0a58 0x100094 (set r11 (var r10))
d "mov 0x100310, r10" 2a0610031000 0x100096 (set r10 (bv 32 0x100310))
d "ld.w 0[r10], r12" 2a670100 0x10009c (seq (set _adr (+ (var r10) (bv 32 0x0))) (set r12 (loadw 0 32 (var _adr))))
d "ld.w 4[r29], r10" 3d570500 0x1000a0 (seq (set _adr (+ (var r29) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
d "add r12, r10" cc51 0x1000a4 (seq (set result (+ (var r10) (var r12))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (var r12)) (! (== (var result) (var r12))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "ld.b 0[r10], r10" 0a570000 0x1000a6 (seq (set _adr (+ (var r10) (bv 32 0x0))) (set r10 (let _v (cast 32 false (loadw 0 8 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x8)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)))))))
d "shl 24, r10" d852 0x1000aa (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x1000ac (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "xor r11, r10" 2b51 0x1000ae (seq (set result (^ (var r10) (var r11))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "shl 24, r10" d852 0x1000b0 (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x1000b2 (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "mov r10, r12" 0a60 0x1000b4 (set r12 (var r10))
d "mov 0x1002fc, r11" 2b06fc021000 0x1000b6 (set r11 (bv 32 0x1002fc))
d "ld.w 4[r29], r10" 3d570500 0x1000bc (seq (set _adr (+ (var r29) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
d "add r11, r10" cb51 0x1000c0 (seq (set result (+ (var r10) (var r11))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (var r11)) (! (== (var result) (var r11))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "st.b r12, 0[r10]" 4a670000 0x1000c2 (seq (set _adr (+ (var r10) (bv 32 0x0))) (storew 0 (var _adr) (cast 8 false (var r12))))
d "mov 0x1002fc, r11" 2b06fc021000 0x1000c6 (set r11 (bv 32 0x1002fc))
d "ld.w 4[r29], r10" 3d570500 0x1000cc (seq (set _adr (+ (var r29) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
d "add r11, r10" cb51 0x1000d0 (seq (set result (+ (var r10) (var r11))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (var r11)) (! (== (var result) (var r11))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "ld.b 0[r10], r10" 0a570000 0x1000d2 (seq (set _adr (+ (var r10) (bv 32 0x0))) (set r10 (let _v (cast 32 false (loadw 0 8 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x8)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)))))))
d "shl 24, r10" d852 0x1000d6 (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x1000d8 (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "mov r10, r11" 0a58 0x1000da (set r11 (var r10))
d "ld.b 11[r29], r10" 1d570b00 0x1000dc (seq (set _adr (+ (var r29) (bv 32 0xb))) (set r10 (let _v (cast 32 false (loadw 0 8 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x8)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)))))))
d "shl 24, r10" d852 0x1000e0 (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x1000e2 (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "xor r11, r10" 2b51 0x1000e4 (seq (set result (^ (var r10) (var r11))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "shl 24, r10" d852 0x1000e6 (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x1000e8 (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "st.b r10, 11[r29]" 5d570b00 0x1000ea (seq (set _adr (+ (var r29) (bv 32 0xb))) (storew 0 (var _adr) (cast 8 false (var r10))))
d "ld.w 4[r29], r10" 3d570500 0x1000ee (seq (set _adr (+ (var r29) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
d "add 1, r10" 4152 0x1000f2 (seq (set result (+ (var r10) (bv 32 0x1))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (bv 32 0x1)) (! (== (var result) (bv 32 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "st.w r10, 4[r29]" 7d570500 0x1000f4 (seq (set _adr (+ (var r29) (bv 32 0x4))) (storew 0 (var _adr) (var r10)))
d "ld.w 4[r29], r10" 3d570500 0x1000f8 (seq (set _adr (+ (var r29) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
d "cmp 15, r10" 6f52 0x1000fc (seq (set result (- (var r10) (bv 32 0xf))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0xf) (var r10)) (! (== (bv 32 0xf) (var r10)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "ble 0x100080" 97c5 0x1000fe (branch (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x1000fe) (bv 32 0xffffff82))) (jmp (var _pc))) nop)
d "movea 0x58, r0, r10" 20565800 0x100100 (set r10 (+ (var r0) (bv 32 0x58)))
d "ld.bu 11[r29], r11" bd5f0b00 0x100104 (seq (set _adr (+ (var r29) (bv 32 0xb))) (set r11 (cast 32 false (loadw 0 8 (var _adr)))))
d "cmp r10, r11" ea59 0x100108 (seq (set result (- (var r11) (var r10))) (set PSW (| (| (| (<< (ite (&& (sle (var r10) (var r11)) (! (== (var r10) (var r11)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bne 0x10015c" 9a2d 0x10010a (branch (! (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x10010a) (bv 32 0x52))) (jmp (var _pc))) nop)
d "st.w r0, 0[r29]" 7d070100 0x10010c (seq (set _adr (+ (var r29) (bv 32 0x0))) (storew 0 (var _adr) (var r0)))
d "br 0x100152" 9525 0x100110 (branch true (seq (set _pc (+ (bv 32 0x100110) (bv 32 0x42))) (jmp (var _pc))) nop)
d "mov 0x1002fc, r11" 2b06fc021000 0x100112 (set r11 (bv 32 0x1002fc))
d "ld.w 0[r29], r10" 3d570100 0x100118 (seq (set _adr (+ (var r29) (bv 32 0x0))) (set r10 (loadw 0 32 (var _adr))))
d "add r11, r10" cb51 0x10011c (seq (set result (+ (var r10) (var r11))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (var r11)) (! (== (var result) (var r11))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "ld.b 0[r10], r10" 0a570000 0x10011e (seq (set _adr (+ (var r10) (bv 32 0x0))) (set r10 (let _v (cast 32 false (loadw 0 8 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x8)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)))))))
d "shl 24, r10" d852 0x100122 (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x100124 (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "mov r10, r11" 0a58 0x100126 (set r11 (var r10))
d "ld.b 11[r29], r10" 1d570b00 0x100128 (seq (set _adr (+ (var r29) (bv 32 0xb))) (set r10 (let _v (cast 32 false (loadw 0 8 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x8)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)))))))
d "shl 24, r10" d852 0x10012c (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x10012e (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "xor r11, r10" 2b51 0x100130 (seq (set result (^ (var r10) (var r11))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "shl 24, r10" d852 0x100132 (seq (set result (<< (var r10) (bv 32 0x18) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (>> (var r10) (- (bv 32 0x20) (bv 32 0x18)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "sar 24, r10" b852 0x100134 (seq (set result (>> (var r10) (bv 32 0x18) (msb (var r10)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x18))) (! (is_zero (& (var r10) (- (<< (bv 32 0x1) (bv 32 0x18) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "mov r10, r12" 0a60 0x100136 (set r12 (var r10))
d "mov 0x1002fc, r11" 2b06fc021000 0x100138 (set r11 (bv 32 0x1002fc))
d "ld.w 0[r29], r10" 3d570100 0x10013e (seq (set _adr (+ (var r29) (bv 32 0x0))) (set r10 (loadw 0 32 (var _adr))))
d "add r11, r10" cb51 0x100142 (seq (set result (+ (var r10) (var r11))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (var r11)) (! (== (var result) (var r11))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "st.b r12, 0[r10]" 4a670000 0x100144 (seq (set _adr (+ (var r10) (bv 32 0x0))) (storew 0 (var _adr) (cast 8 false (var r12))))
d "ld.w 0[r29], r10" 3d570100 0x100148 (seq (set _adr (+ (var r29) (bv 32 0x0))) (set r10 (loadw 0 32 (var _adr))))
d "add 1, r10" 4152 0x10014c (seq (set result (+ (var r10) (bv 32 0x1))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (bv 32 0x1)) (! (== (var result) (bv 32 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
d "st.w r10, 0[r29]" 7d570100 0x10014e (seq (set _adr (+ (var r29) (bv 32 0x0))) (storew 0 (var _adr) (var r10)))
d "ld.w 0[r29], r10" 3d570100 0x100152 (seq (set _adr (+ (var r29) (bv 32 0x0))) (set r10 (loadw 0 32 (var _adr))))
d "cmp 15, r10" 6f52 0x100156 (seq (set result (- (var r10) (bv 32 0xf))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0xf) (var r10)) (! (== (bv 32 0xf) (var r10)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "ble 0x100112" d7dd 0x100158 (branch (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x100158) (bv 32 0xffffffba))) (jmp (var _pc))) nop)
d "br 0x10015e" a505 0x10015a (branch true (seq (set _pc (+ (bv 32 0x10015a) (bv 32 0x4))) (jmp (var _pc))) nop)
d "nop" 0000 0x10015c nop
d "mov r29, sp" 1d18 0x10015e (set sp (var r29))
d "ld.w 12[sp], r29" 23ef0d00 0x100160 (seq (set _adr (+ (var sp) (bv 32 0xc))) (set r29 (loadw 0 32 (var _adr))))
d "addi 16, sp, sp" 031e1000 0x100164 (seq (set result (+ (var sp) (bv 32 0x10))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var sp)) (! (== (var result) (var sp)))) (&& (sle (var result) (bv 32 0x10)) (! (== (var result) (bv 32 0x10))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set sp (var result)))
d "jmp [lp]" 7f00 0x100168 (jmp (var lp))
d "add -8, sp" 581a 0x10016a (seq (set result (+ (var sp) (bv 32 0xfffffff8))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var sp)) (! (== (var result) (var sp)))) (&& (sle (var result) (bv 32 0xfffffff8)) (! (== (var result) (bv 32 0xfffffff8))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set sp (var result)))
d "st.w lp, 4[sp]" 63ff0500 0x10016c (seq (set _adr (+ (var sp) (bv 32 0x4))) (storew 0 (var _adr) (var lp)))
d "st.w r29, 0[sp]" 63ef0100 0x100170 (seq (set _adr (+ (var sp) (bv 32 0x0))) (storew 0 (var _adr) (var r29)))
d "add -8, sp" 581a 0x100174 (seq (set result (+ (var sp) (bv 32 0xfffffff8))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var sp)) (! (== (var result) (var sp)))) (&& (sle (var result) (bv 32 0xfffffff8)) (! (== (var result) (bv 32 0xfffffff8))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set sp (var result)))
d "mov sp, r29" 03e8 0x100176 (set r29 (var sp))
d "st.w r6, 4[r29]" 7d370500 0x100178 (seq (set _adr (+ (var r29) (bv 32 0x4))) (storew 0 (var _adr) (var r6)))
d "st.w r7, 0[r29]" 7d3f0100 0x10017c (seq (set _adr (+ (var r29) (bv 32 0x0))) (storew 0 (var _adr) (var r7)))
d "mov 0x10006c, r10" 2a066c001000 0x100180 (set r10 (bv 32 0x10006c))
d "jarl [r10], lp" eac760f9 0x100186 (seq (set lp (+ (bv 32 0x100186) (bv 32 0x4))) (set _pc (var r10)) (jmp (var _pc)))
d "mov 0, r10" 0052 0x10018a (set r10 (bv 32 0x0))
d "mov r29, sp" 1d18 0x10018c (set sp (var r29))
d "ld.w 12[sp], lp" 23ff0d00 0x10018e (seq (set _adr (+ (var sp) (bv 32 0xc))) (set lp (loadw 0 32 (var _adr))))
d "ld.w 8[sp], r29" 23ef0900 0x100192 (seq (set _adr (+ (var sp) (bv 32 0x8))) (set r29 (loadw 0 32 (var _adr))))
d "addi 16, sp, sp" 031e1000 0x100196 (seq (set result (+ (var sp) (bv 32 0x10))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var sp)) (! (== (var result) (var sp)))) (&& (sle (var result) (bv 32 0x10)) (! (== (var result) (bv 32 0x10))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set sp (var result)))
d "jmp [lp]" 7f00 0x10019a (jmp (var lp))
d "prepare {r28 - r29, lp}, 0" 8007e100 0x10019c (seq (set _tmp (var sp)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r28)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r29)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var lp)) (set sp (- (var _tmp) (<< (bv 32 0x0) (bv 32 0x2) false))))
d "mov 0x100744, r10" 2a0644071000 0x1001a0 (set r10 (bv 32 0x100744))
d "ld.w 0[r10], r11" 2a5f0100 0x1001a6 (seq (set _adr (+ (var r10) (bv 32 0x0))) (set r11 (loadw 0 32 (var _adr))))
d "cmp 0, r11" 605a 0x1001aa (seq (set result (- (var r11) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r11)) (! (== (bv 32 0x0) (var r11)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bne 0x1001c4" ca0d 0x1001ac (branch (! (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x1001ac) (bv 32 0x18))) (jmp (var _pc))) nop)
d "mov 1, r11" 015a 0x1001ae (set r11 (bv 32 0x1))
d "mov 0x10073c, r29" 3d063c071000 0x1001b0 (set r29 (bv 32 0x10073c))
d "mov 0x10073c, r28" 3c063c071000 0x1001b6 (set r28 (bv 32 0x10073c))
d "st.w r11, 0[r10]" 6a5f0100 0x1001bc (seq (set _adr (+ (var r10) (bv 32 0x0))) (storew 0 (var _adr) (var r11)))
d "cmp r28, r29" fce9 0x1001c0 (seq (set result (- (var r29) (var r28))) (set PSW (| (| (| (<< (ite (&& (sle (var r28) (var r29)) (! (== (var r28) (var r29)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bh 0x1001c8" bb05 0x1001c2 (branch (! (|| (! (is_zero (& (>> (var PSW) (bv 32 0x3) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))))) (seq (set _pc (+ (bv 32 0x1001c2) (bv 32 0x6))) (jmp (var _pc))) nop)
d "dispose 0, {r28 - r29, lp}, lp" 4006ff00 0x1001c4 (seq (set _tmp (+ (var sp) (<< (bv 32 0x0) (bv 32 0x2) false))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set lp (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r29 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r28 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set sp (var _tmp)) (jmp (var lp)))
d "ld.w -4[r29], r10" 3d57fdff 0x1001c8 (seq (set _adr (+ (var r29) (bv 32 0xfffffffc))) (set r10 (loadw 0 32 (var _adr))))
d "add -4, r29" 5cea 0x1001cc (seq (set result (+ (var r29) (bv 32 0xfffffffc))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r29)) (! (== (var result) (var r29)))) (&& (sle (var result) (bv 32 0xfffffffc)) (! (== (var result) (bv 32 0xfffffffc))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r29 (var result)))
d "jarl [r10], lp" eac760f9 0x1001ce (seq (set lp (+ (bv 32 0x1001ce) (bv 32 0x4))) (set _pc (var r10)) (jmp (var _pc)))
d "br 0x1001c0" f5f5 0x1001d2 (branch true (seq (set _pc (+ (bv 32 0x1001d2) (bv 32 0xffffffee))) (jmp (var _pc))) nop)
d "prepare {r29, lp}, 0" 80076100 0x1001d4 (seq (set _tmp (var sp)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r29)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var lp)) (set sp (- (var _tmp) (<< (bv 32 0x0) (bv 32 0x2) false))))
d "mov 0, r7" 003a 0x1001d8 (set r7 (bv 32 0x0))
d "mov r6, r29" 06e8 0x1001da (set r29 (var r6))
d "jarl 0x1001f6, lp" 80ff1a00 0x1001dc (seq (set lp (+ (bv 32 0x1001dc) (bv 32 0x4))) (set _pc (+ (bv 32 0x1001dc) (bv 32 0x1a))) (jmp (var _pc)))
d "ld.w -32764[gp], r6" 24370580 0x1001e0 (seq (set _adr (+ (var gp) (bv 32 0xffff8004))) (set r6 (loadw 0 32 (var _adr))))
d "ld.w 60[r6], r10" 26573d00 0x1001e4 (seq (set _adr (+ (var r6) (bv 32 0x3c))) (set r10 (loadw 0 32 (var _adr))))
d "cmp 0, r10" 6052 0x1001e8 (seq (set result (- (var r10) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r10)) (! (== (bv 32 0x0) (var r10)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "be 0x1001f0" b205 0x1001ea (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x1001ea) (bv 32 0x6))) (jmp (var _pc))) nop)
d "jarl [r10], lp" eac760f9 0x1001ec (seq (set lp (+ (bv 32 0x1001ec) (bv 32 0x4))) (set _pc (var r10)) (jmp (var _pc)))
d "mov r29, r6" 1d30 0x1001f0 (set r6 (var r29))
d "jarl 0x100296, lp" 80ffa400 0x1001f2 (seq (set lp (+ (bv 32 0x1001f2) (bv 32 0x4))) (set _pc (+ (bv 32 0x1001f2) (bv 32 0xa4))) (jmp (var _pc)))
d "prepare {r22 - r29, lp}, 0" 8007e1f3 0x1001f6 (seq (set _tmp (var sp)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r22)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r23)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r24)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r25)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r26)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r27)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r28)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r29)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var lp)) (set sp (- (var _tmp) (<< (bv 32 0x0) (bv 32 0x2) false))))
d "ld.w -32764[gp], r24" 24c70580 0x1001fa (seq (set _adr (+ (var gp) (bv 32 0xffff8004))) (set r24 (loadw 0 32 (var _adr))))
d "mov r6, r25" 06c8 0x1001fe (set r25 (var r6))
d "mov r7, r26" 07d0 0x100200 (set r26 (var r7))
d "mov 1, r23" 01ba 0x100202 (set r23 (bv 32 0x1))
d "ld.w 328[r24], r28" 38e74901 0x100204 (seq (set _adr (+ (var r24) (bv 32 0x148))) (set r28 (loadw 0 32 (var _adr))))
d "cmp 0, r28" 60e2 0x100208 (seq (set result (- (var r28) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r28)) (! (== (bv 32 0x0) (var r28)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "be 0x10021c" 920d 0x10020a (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x10020a) (bv 32 0x12))) (jmp (var _pc))) nop)
d "ld.w 4[r28], r29" 3cef0500 0x10020c (seq (set _adr (+ (var r28) (bv 32 0x4))) (set r29 (loadw 0 32 (var _adr))))
d "addi -1, r29, r27" 1ddeffff 0x100210 (seq (set result (+ (var r27) (bv 32 0xffffffff))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r27)) (! (== (var result) (var r27)))) (&& (sle (var result) (bv 32 0xffffffff)) (! (== (var result) (bv 32 0xffffffff))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r27 (var result)))
d "shl 2, r29" c2ea 0x100214 (seq (set result (<< (var r29) (bv 32 0x2) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x2))) (! (is_zero (>> (var r29) (- (bv 32 0x20) (bv 32 0x2)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r29 (var result)))
d "add r28, r29" dce9 0x100216 (seq (set result (+ (var r29) (var r28))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r29)) (! (== (var result) (var r29)))) (&& (sle (var result) (var r28)) (! (== (var result) (var r28))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r29 (var result)))
d "cmp 0, r27" 60da 0x100218 (seq (set result (- (var r27) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r27)) (! (== (bv 32 0x0) (var r27)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bge 0x100220" be05 0x10021a (branch (! (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1)))))) (seq (set _pc (+ (bv 32 0x10021a) (bv 32 0x6))) (jmp (var _pc))) nop)
d "dispose 0, {r22 - r29, lp}, lp" 4006fff3 0x10021c (seq (set _tmp (+ (var sp) (<< (bv 32 0x0) (bv 32 0x2) false))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set lp (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r29 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r28 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r27 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r26 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r25 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r24 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r23 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r22 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set sp (var _tmp)) (jmp (var lp)))
d "cmp 0, r26" 60d2 0x100220 (seq (set result (- (var r26) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r26)) (! (== (bv 32 0x0) (var r26)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "be 0x100232" 820d 0x100222 (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x100222) (bv 32 0x10))) (jmp (var _pc))) nop)
d "ld.w 260[r29], r10" 3d570501 0x100224 (seq (set _adr (+ (var r29) (bv 32 0x104))) (set r10 (loadw 0 32 (var _adr))))
d "cmp r26, r10" fa51 0x100228 (seq (set result (- (var r10) (var r26))) (set PSW (| (| (| (<< (ite (&& (sle (var r26) (var r10)) (! (== (var r26) (var r10)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "be 0x100232" c205 0x10022a (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x10022a) (bv 32 0x8))) (jmp (var _pc))) nop)
d "add -1, r27" 5fda 0x10022c (seq (set result (+ (var r27) (bv 32 0xffffffff))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r27)) (! (== (var result) (var r27)))) (&& (sle (var result) (bv 32 0xffffffff)) (! (== (var result) (bv 32 0xffffffff))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r27 (var result)))
d "add -4, r29" 5cea 0x10022e (seq (set result (+ (var r29) (bv 32 0xfffffffc))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r29)) (! (== (var result) (var r29)))) (&& (sle (var result) (bv 32 0xfffffffc)) (! (== (var result) (bv 32 0xfffffffc))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r29 (var result)))
d "br 0x100218" c5f5 0x100230 (branch true (seq (set _pc (+ (bv 32 0x100230) (bv 32 0xffffffe8))) (jmp (var _pc))) nop)
d "ld.w 4[r28], r11" 3c5f0500 0x100232 (seq (set _adr (+ (var r28) (bv 32 0x4))) (set r11 (loadw 0 32 (var _adr))))
d "ld.w 4[r29], r10" 3d570500 0x100236 (seq (set _adr (+ (var r29) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
d "add -1, r11" 5f5a 0x10023a (seq (set result (+ (var r11) (bv 32 0xffffffff))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r11)) (! (== (var result) (var r11)))) (&& (sle (var result) (bv 32 0xffffffff)) (! (== (var result) (bv 32 0xffffffff))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r11 (var result)))
d "cmp r27, r11" fb59 0x10023c (seq (set result (- (var r11) (var r27))) (set PSW (| (| (| (<< (ite (&& (sle (var r27) (var r11)) (! (== (var r27) (var r11)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bne 0x100272" aa1d 0x10023e (branch (! (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x10023e) (bv 32 0x34))) (jmp (var _pc))) nop)
d "st.w r27, 4[r28]" 7cdf0500 0x100240 (seq (set _adr (+ (var r28) (bv 32 0x4))) (storew 0 (var _adr) (var r27)))
d "cmp 0, r10" 6052 0x100244 (seq (set result (- (var r10) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r10)) (! (== (bv 32 0x0) (var r10)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "be 0x10022c" b2f5 0x100246 (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x100246) (bv 32 0xffffffe6))) (jmp (var _pc))) nop)
d "ld.w 392[r28], r12" 3c678901 0x100248 (seq (set _adr (+ (var r28) (bv 32 0x188))) (set r12 (loadw 0 32 (var _adr))))
d "mov r23, r11" 1758 0x10024c (set r11 (var r23))
d "shl r27, r11" fb5fc000 0x10024e (seq (set result (<< (var r11) (var r27) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (var r27))) (! (is_zero (>> (var r11) (- (bv 32 0x20) (var r27)) false)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r11 (var result)))
d "ld.w 4[r28], r22" 3cb70500 0x100252 (seq (set _adr (+ (var r28) (bv 32 0x4))) (set r22 (loadw 0 32 (var _adr))))
d "and r11, r12" 4b61 0x100256 (seq (set result (& (var r12) (var r11))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r12 (var result)))
d "cmp 0, r12" 6062 0x100258 (seq (set result (- (var r12) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r12)) (! (== (bv 32 0x0) (var r12)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bne 0x100278" fa0d 0x10025a (branch (! (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x10025a) (bv 32 0x1e))) (jmp (var _pc))) nop)
d "jarl [r10], lp" eac760f9 0x10025c (seq (set lp (+ (bv 32 0x10025c) (bv 32 0x4))) (set _pc (var r10)) (jmp (var _pc)))
d "ld.w 4[r28], r11" 3c5f0500 0x100260 (seq (set _adr (+ (var r28) (bv 32 0x4))) (set r11 (loadw 0 32 (var _adr))))
d "ld.w 328[r24], r10" 38574901 0x100264 (seq (set _adr (+ (var r24) (bv 32 0x148))) (set r10 (loadw 0 32 (var _adr))))
d "cmp r22, r11" f659 0x100268 (seq (set result (- (var r11) (var r22))) (set PSW (| (| (| (<< (ite (&& (sle (var r22) (var r11)) (! (== (var r22) (var r11)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bne 0x100204" dacd 0x10026a (branch (! (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x10026a) (bv 32 0xffffff9a))) (jmp (var _pc))) nop)
d "cmp r10, r28" eae1 0x10026c (seq (set result (- (var r28) (var r10))) (set PSW (| (| (| (<< (ite (&& (sle (var r10) (var r28)) (! (== (var r10) (var r28)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "be 0x10022c" f2dd 0x10026e (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x10026e) (bv 32 0xffffffbe))) (jmp (var _pc))) nop)
d "br 0x100204" a5cd 0x100270 (branch true (seq (set _pc (+ (bv 32 0x100270) (bv 32 0xffffff94))) (jmp (var _pc))) nop)
d "st.w r0, 4[r29]" 7d070500 0x100272 (seq (set _adr (+ (var r29) (bv 32 0x4))) (storew 0 (var _adr) (var r0)))
d "br 0x100244" f5e5 0x100276 (branch true (seq (set _pc (+ (bv 32 0x100276) (bv 32 0xffffffce))) (jmp (var _pc))) nop)
d "ld.w 396[r28], r12" 3c678d01 0x100278 (seq (set _adr (+ (var r28) (bv 32 0x18c))) (set r12 (loadw 0 32 (var _adr))))
d "ld.w 132[r29], r6" 3d378500 0x10027c (seq (set _adr (+ (var r29) (bv 32 0x84))) (set r6 (loadw 0 32 (var _adr))))
d "and r12, r11" 4c59 0x100280 (seq (set result (& (var r11) (var r12))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r11 (var result)))
d "cmp 0, r11" 605a 0x100282 (seq (set result (- (var r11) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r11)) (! (== (bv 32 0x0) (var r11)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bne 0x100290" ea05 0x100284 (branch (! (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x100284) (bv 32 0xc))) (jmp (var _pc))) nop)
d "mov r6, r7" 0638 0x100286 (set r7 (var r6))
d "mov r25, r6" 1930 0x100288 (set r6 (var r25))
d "jarl [r10], lp" eac760f9 0x10028a (seq (set lp (+ (bv 32 0x10028a) (bv 32 0x4))) (set _pc (var r10)) (jmp (var _pc)))
d "br 0x100260" 95ed 0x10028e (branch true (seq (set _pc (+ (bv 32 0x10028e) (bv 32 0xffffffd2))) (jmp (var _pc))) nop)
d "jarl [r10], lp" eac760f9 0x100290 (seq (set lp (+ (bv 32 0x100290) (bv 32 0x4))) (set _pc (var r10)) (jmp (var _pc)))
d "br 0x100260" e5e5 0x100294 (branch true (seq (set _pc (+ (bv 32 0x100294) (bv 32 0xffffffcc))) (jmp (var _pc))) nop)
d "prepare {r27 - r29, lp}, 0" 8007e110 0x100296 (seq (set _tmp (var sp)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r27)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r28)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var r29)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var lp)) (set sp (- (var _tmp) (<< (bv 32 0x0) (bv 32 0x2) false))))
d "mov r6, r29" 06e8 0x10029a (set r29 (var r6))
d "mov 0x100738, r28" 3c0638071000 0x10029c (set r28 (bv 32 0x100738))
d "mov 0x10073c, r27" 3b063c071000 0x1002a2 (set r27 (bv 32 0x10073c))
d "ld.w 0[r28], r10" 3c570100 0x1002a8 (seq (set _adr (+ (var r28) (bv 32 0x0))) (set r10 (loadw 0 32 (var _adr))))
d "cmp r27, r10" fb51 0x1002ac (seq (set result (- (var r10) (var r27))) (set PSW (| (| (| (<< (ite (&& (sle (var r27) (var r10)) (! (== (var r27) (var r10)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "bl 0x1002c0" 910d 0x1002ae (branch (! (is_zero (& (>> (var PSW) (bv 32 0x3) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x1002ae) (bv 32 0x12))) (jmp (var _pc))) nop)
d "mov 0, r9" 004a 0x1002b0 (set r9 (bv 32 0x0))
d "mov 0, r8" 0042 0x1002b2 (set r8 (bv 32 0x0))
d "mov r29, r7" 1d38 0x1002b4 (set r7 (var r29))
d "mov 1, r6" 0132 0x1002b6 (set r6 (bv 32 0x1))
d "jarl 0x1002d2, lp" 80ff1a00 0x1002b8 (seq (set lp (+ (bv 32 0x1002b8) (bv 32 0x4))) (set _pc (+ (bv 32 0x1002b8) (bv 32 0x1a))) (jmp (var _pc)))
d "dispose 0, {r27 - r29, lp}, lp" 4006ff10 0x1002bc (seq (set _tmp (+ (var sp) (<< (bv 32 0x0) (bv 32 0x2) false))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set lp (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r29 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r28 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r27 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set sp (var _tmp)) (jmp (var lp)))
d "addi 4, r10, r11" 0a5e0400 0x1002c0 (seq (set result (+ (var r11) (bv 32 0x4))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r11)) (! (== (var result) (var r11)))) (&& (sle (var result) (bv 32 0x4)) (! (== (var result) (bv 32 0x4))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r11 (var result)))
d "ld.w 0[r10], r10" 2a570100 0x1002c4 (seq (set _adr (+ (var r10) (bv 32 0x0))) (set r10 (loadw 0 32 (var _adr))))
d "st.w r11, 0[r28]" 7c5f0100 0x1002c8 (seq (set _adr (+ (var r28) (bv 32 0x0))) (storew 0 (var _adr) (var r11)))
d "jarl [r10], lp" eac760f9 0x1002cc (seq (set lp (+ (bv 32 0x1002cc) (bv 32 0x4))) (set _pc (var r10)) (jmp (var _pc)))
d "br 0x1002a8" c5ed 0x1002d0 (branch true (seq (set _pc (+ (bv 32 0x1002d0) (bv 32 0xffffffd8))) (jmp (var _pc))) nop)
d "trap 31" ff070001 0x1002d2 (seq (set EIPC (bv 32 0x1002d6)) (set EIPSW (var PSW)) (set ECR (<< (bv 32 0x1f) (bv 32 0x0) false)) (set PSW (| (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x6) false) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x5) false))) (jmp (bv 32 0x50)))
d "tst r11, r11" 6b59 0x1002d6 (seq (set result (& (var r11) (var r11))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "be 0x1002e2" d205 0x1002d8 (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x1002d8) (bv 32 0xa))) (jmp (var _pc))) nop)
d "movhi 16, r0, r6" 40361000 0x1002da (set r6 (+ (var r0) (bv 32 0x100000)))
d "st.w r11, 1864[r6]" 665f4907 0x1002de (seq (set _adr (+ (var r6) (bv 32 0x748))) (storew 0 (var _adr) (var r11)))
d "jmp [lp]" 7f00 0x1002e2 (jmp (var lp))
d "jarl 0x1052d8, lp" 80ff8452 0x100054 (seq (set lp (+ (bv 32 0x100054) (bv 32 0x4))) (set _pc (+ (bv 32 0x100054) (bv 32 0x5284))) (jmp (var _pc)))
d "prepare {lp}, 0" 80072100 0xa07e (seq (set _tmp (var sp)) (set _tmp (- (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (storew 0 (var _adr) (var lp)) (set sp (- (var _tmp) (<< (bv 32 0x0) (bv 32 0x2) false))))
d "adf v, lp, lp, lp" ffffa0fb 0x100000 (seq (set _b (ite (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1)))) (+ (var lp) (bv 32 0x1)) (var lp))) (set result (+ (var lp) (var _b))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var lp)) (! (== (var result) (var lp)))) (&& (sle (var result) (var _b)) (! (== (var result) (var _b))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "bins lp, 15, 1, lp" ffffdef8 0x100000 (seq (set result (| (& (>> (var lp) (bv 32 0x10) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x10)) false)) (| (& (>> (var lp) (bv 32 0x0) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x1)) false)) (& (>> (var lp) (bv 32 0x0) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0xf)) false))))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "bsh lp, lp" e0ff42fb 0x100000 (seq (set result (append (append (cast 8 false (& (>> (var lp) (bv 32 0x10) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x8)) false))) (cast 8 false (& (>> (var lp) (bv 32 0x18) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x8)) false)))) (append (cast 8 false (& (>> (var lp) (bv 32 0x0) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x8)) false))) (cast 8 false (& (>> (var lp) (bv 32 0x8) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x8)) false)))))) (set PSW (| (| (| (<< (ite (is_zero (& (var result) (bv 32 0xffff))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (& (var result) (bv 32 0xffff))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "bsw lp, lp" e0ff40fb 0x100000 (seq (set result (append (append (cast 8 false (& (>> (var lp) (bv 32 0x0) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x8)) false))) (cast 8 false (& (>> (var lp) (bv 32 0x8) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x8)) false)))) (append (cast 8 false (& (>> (var lp) (bv 32 0x10) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x8)) false))) (cast 8 false (& (>> (var lp) (bv 32 0x18) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x8)) false)))))) (set PSW (| (| (| (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "callt 126" 3f02 0x100000 (seq (set CTPC (+ (bv 32 0x100000) (bv 32 0x2))) (set CTPSW (let _orig (var CTPSW) (| (& (var _orig) (bv 32 0x1f)) (<< (& (>> (var PSW) (bv 32 0x0) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x5)) false)) (bv 32 0x0) false)))) (set _adr (+ (var CTBP) (bv 32 0x7e))) (jmp (+ (var CTBP) (cast 32 false (loadw 0 16 (var _adr))))))
d "caxi [lp], lp, lp" ffffeef8 0x100000 (seq (set _adr (var lp)) (set _token (loadw 0 32 (var _adr))) (set result (- (var lp) (var _token))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var lp)) (! (== (var result) (var lp)))) (&& (sle (var result) (var _token)) (! (== (var result) (var _token))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (storew 0 (var _adr) (ite (is_zero (var result)) (var lp) (var _token))) (set lp (var _token)))
d "cll" ffff60f1 0x100000 nop
d "ctret" e0074401 0x100000 (seq (set PSW (let _orig (var PSW) (| (& (var _orig) (bv 32 0x1f)) (<< (& (>> (var CTPSW) (bv 32 0x0) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x5)) false)) (bv 32 0x0) false)))) (jmp (var CTPC)))
d "cmov gt, lp, lp, lp" ffff3efb 0x100000 (set lp (ite (! (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))))) (var lp) (var lp)))
d "cmov gt, 31, lp, lp" ffff1efb 0x100000 (set lp (ite (! (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))))) (bv 32 0xffffffff) (var lp)))
d "eiret" e0074801 0x100000 (seq (set PSW (var EIPSW)) (jmp (var EIPC)))
d "feret" e0074a01 0x100000 (seq (set PSW (var FEPSW)) (jmp (var FEPC)))
d "fetrap 0xf" 4078 0x100000 (seq (set FEPC (bv 32 0x100002)) (set FEPSW (var PSW)) (set FEIC (bv 32 0x3f)) (set PSW (| (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1e) false) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x7) false)) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x6) false)) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x5) false))) (jmp (bv 32 0x3f)))
d "hsh lp, lp" e0ff46fb 0x100000 (seq (set result (var lp)) (set lp (var result)) (set PSW (| (| (| (<< (ite (is_zero (& (var result) (bv 32 0xffff))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (& (var result) (bv 32 0xffff))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "hsw lp, lp" e0ff44fb 0x100000 (seq (set result (append (cast 16 false (& (>> (var lp) (bv 32 0x0) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x10)) false))) (cast 16 false (& (>> (var lp) (bv 32 0x10) false) (>> (bv 32 0xffffffff) (- (bv 32 0x20) (bv 32 0x10)) false))))) (set lp (var result)) (set PSW (| (| (| (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "ldl.w [lp], lp" ff0778fb 0x100000 (seq (set _adr (var lp)) (set lp (loadw 0 32 (var _adr))))
d "stc.w lp, [lp]" ff077afb 0x100000 (seq (set _adr (var lp)) (set _data (var lp)) (storew 0 (var _adr) (var _data)))
d "mac [lp], lp, ep, ep" ffffdef3 0x100000 (seq (set result (+ (* (cast 64 false (var lp)) (cast 64 false (var lp))) (append (var lp) (var ep)))) (set ep (cast 32 false (var result))) (set lp (cast 32 false (>> (var result) (bv 32 0x20) false))))
d "macu [lp], lp, ep, ep" fffffef3 0x100000 (seq (set result (+ (* (cast 64 false (var lp)) (cast 64 false (var lp))) (append (var lp) (var ep)))) (set ep (cast 32 false (var result))) (set lp (cast 32 false (>> (var result) (bv 32 0x20) false))))
d "pushsp 31-31" ff4760f9 0x100000 (seq (set _tmp (var sp)) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (var _tmp)) (storew 0 (var _adr) (var lp)) (set sp (var _tmp)))
d "popsp 31-31" ff6760f9 0x100000 (seq (set _tmp (var sp)) (set _adr (var _tmp)) (set lp (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set sp (var _tmp)))
d "rie" 4000 0x100000 (seq (set FEPC (bv 32 0x100000)) (set FEPSW (var PSW)) (set FEIC (bv 32 0x60)) (set PSW (| (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1e) false) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x7) false)) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x6) false)) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x5) false))) (jmp (bv 32 0x60)))
d "rie 31 15" ffff0000 0x100000 (seq (set FEPC (bv 32 0x100000)) (set FEPSW (var PSW)) (set FEIC (bv 32 0x60)) (set PSW (| (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1e) false) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x7) false)) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x6) false)) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x5) false))) (jmp (bv 32 0x60)))
d "rotl 31, lp, lp" ffffc4f8 0x100000 (seq (set result (let _expr (var lp) (let _n (bv 32 0x1f) (| (<< (var _expr) (var _n) false) (>> (var _expr) (- (bv 32 0x20) (var _n)) false))))) (set PSW (| (| (| (<< (ite (&& (lsb (var result)) (! (is_zero (bv 32 0x1f)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "rotl lp, lp, lp" ffffc6f8 0x100000 (seq (set result (let _expr (var lp) (let _n (var lp) (| (<< (var _expr) (var _n) false) (>> (var _expr) (- (bv 32 0x20) (var _n)) false))))) (set PSW (| (| (| (<< (ite (&& (lsb (var result)) (! (is_zero (var lp)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "sbf gt, lp, lp, lp" ffff9efb 0x100000 (seq (set _b (ite (! (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))))) (+ (var lp) (bv 32 0x1)) (var lp))) (set result (+ (var lp) (var _b))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var lp)) (! (== (var result) (var lp)))) (&& (sle (var result) (var _b)) (! (== (var result) (var _b))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "sch0l lp, lp" e0ff64fb 0x100000 (seq (set _i (bv 32 0x0)) (set _tmp (var lp)) (repeat (&& (! (msb (var _tmp))) (&& (ule (var _i) (bv 32 0x20)) (! (== (var _i) (bv 32 0x20))))) (seq (set _i (+ (var _i) (bv 32 0x1))) (set _tmp (<< (var _tmp) (bv 32 0x1) false)))) (set lp (ite (== (var _i) (bv 32 0x20)) (bv 32 0x0) (+ (var _i) (bv 32 0x1)))) (set PSW (| (| (| (<< (ite (== (var _i) (bv 32 0x1f)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (== (var _i) (bv 32 0x20)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "sch0r lp, lp" e0ff60fb 0x100000 (seq (set _i (bv 32 0x0)) (set _tmp (var lp)) (repeat (&& (! (lsb (var _tmp))) (&& (ule (var _i) (bv 32 0x20)) (! (== (var _i) (bv 32 0x20))))) (seq (set _i (+ (var _i) (bv 32 0x1))) (set _tmp (>> (var _tmp) (bv 32 0x1) false)))) (set lp (ite (== (var _i) (bv 32 0x20)) (bv 32 0x0) (+ (var _i) (bv 32 0x1)))) (set PSW (| (| (| (<< (ite (== (var _i) (bv 32 0x1f)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (== (var _i) (bv 32 0x20)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "sch1l lp, lp" e0ff66fb 0x100000 (seq (set _i (bv 32 0x0)) (set _tmp (var lp)) (repeat (&& (msb (var _tmp)) (&& (ule (var _i) (bv 32 0x20)) (! (== (var _i) (bv 32 0x20))))) (seq (set _i (+ (var _i) (bv 32 0x1))) (set _tmp (<< (var _tmp) (bv 32 0x1) false)))) (set lp (ite (== (var _i) (bv 32 0x20)) (bv 32 0x0) (+ (var _i) (bv 32 0x1)))) (set PSW (| (| (| (<< (ite (== (var _i) (bv 32 0x1f)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (== (var _i) (bv 32 0x20)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "sch1r lp, lp" e0ff62fb 0x100000 (seq (set _i (bv 32 0x0)) (set _tmp (var lp)) (repeat (&& (lsb (var _tmp)) (&& (ule (var _i) (bv 32 0x20)) (! (== (var _i) (bv 32 0x20))))) (seq (set _i (+ (var _i) (bv 32 0x1))) (set _tmp (>> (var _tmp) (bv 32 0x1) false)))) (set lp (ite (== (var _i) (bv 32 0x20)) (bv 32 0x0) (+ (var _i) (bv 32 0x1)))) (set PSW (| (| (| (<< (ite (== (var _i) (bv 32 0x1f)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (== (var _i) (bv 32 0x20)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
d "snooze" e00f2001 0x100000 nop
d "synce" 1d00 0x100000 nop
d "synci" 1c00 0x100000 nop
d "syncm" 1e00 0x100000 nop
d "syncp" 1f00 0x100000 nop
d "switch lp" 5f00 0x100000 (seq (set _adr (+ (+ (bv 32 0x100000) (bv 32 0x2)) (<< (var lp) (bv 32 0x1) false))) (jmp (+ (+ (bv 32 0x100000) (bv 32 0x2)) (<< (>> (cast 32 false (<< (cast 32 false (loadw 0 16 (var _adr))) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x10)) (msb (cast 32 false (<< (cast 32 false (loadw 0 16 (var _adr))) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)))) (bv 32 0x1) false))))
d "sxb lp" bf00 0x100000 (set lp (>> (cast 32 false (<< (var lp) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x8)) (msb (cast 32 false (<< (var lp) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)))))
d "sxh lp" ff00 0x100000 (set lp (>> (cast 32 false (<< (var lp) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x10)) (msb (cast 32 false (<< (var lp) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)))))
d "zxb lp" 9f00 0x100000 (set lp (& (var lp) (bv 32 0xffffff00)))
d "zxh lp" df00 0x100000 (set lp (& (var lp) (bv 32 0xffff0000)))
d "syscall 0xff" ffd76039 0x100000 (seq (set EIPC (+ (bv 32 0x100000) (bv 32 0x4))) (set EIPSW (var PSW)) (set EIIC (bv 32 0x80ff)) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1e) false) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x6) false)) (<< (ite true (bv 32 0x1) (bv 32 0x0)) (bv 32 0x5) false))) (set _adr (ite (ule (bv 32 0xff) (& (var SCCFG) (bv 32 0xff))) (+ (var SCBP) (<< (bv 32 0xff) (bv 32 0x2) false)) (var SCBP))) (jmp (+ (var SCBP) (loadw 0 32 (var _adr)))))
d "sasf gt, lp" efff0002 0x100000 (set lp (| (<< (var lp) (bv 32 0x1) false) (ite (! (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0))))
d "setf gt, lp" efff0000 0x100000 (set lp (ite (! (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)))
d "shr [lp], lp, lp" ffff82f8 0x100000 (seq (set result (>> (var lp) (var lp) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (var lp))) (! (is_zero (& (var lp) (- (<< (bv 32 0x1) (var lp) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "sar [lp], lp, lp" ffffa2f8 0x100000 (seq (set result (>> (var lp) (var lp) (msb (var lp)))) (set PSW (| (| (| (<< (ite (&& (! (is_zero (var lp))) (! (is_zero (& (var lp) (- (<< (bv 32 0x1) (var lp) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set lp (var result)))
d "set1 lp, [lp]" ffffe000 0x100000 (seq (set _adr (var lp)) (set _val (loadw 0 8 (var _adr))) (set PSW (<< (ite (! (! (is_zero (& (>> (var _val) (var lp) false) (bv 8 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false)) (storew 0 (var _adr) (| (var _val) (<< (bv 8 0x1) (var lp) false))))
d "tst1 lp, [lp]" ffffe600 0x100000 (seq (set _adr (var lp)) (set _val (loadw 0 8 (var _adr))) (set PSW (<< (ite (! (! (is_zero (& (>> (var _val) (var lp) false) (bv 8 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false)))
d "not1 lp, [lp]" ffffe200 0x100000 (seq (set _adr (var lp)) (set _val (loadw 0 8 (var _adr))) (set PSW (<< (ite (! (! (is_zero (& (>> (var _val) (var lp) false) (bv 8 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false)) (storew 0 (var _adr) (| (var _val) (<< (bv 8 0x1) (var lp) false))))
d "clr1 lp, [lp]" ffffe400 0x100000 (seq (set _adr (var lp)) (set _val (loadw 0 8 (var _adr))) (set PSW (<< (ite (! (! (is_zero (& (>> (var _val) (var lp) false) (bv 8 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false)) (storew 0 (var _adr) (& (var _val) (~ (<< (bv 8 0x0) (var lp) false)))))
