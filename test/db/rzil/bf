NAME=hello world
FILE=bins/bf/hello-ok.bf
ARGS=-b32
CMDS=<<EOF
e asm.arch=bf
e asm.bytes=true
e analysis.arch=bf
s 0
aezi
aezs 390
EOF
EXPECT=<<EOF
Hello World!
EOF
RUN

NAME=hello world - unbalanced loop
FILE=bins/bf/hello-unbalanced-loop.bf
ARGS=-b32
CMDS=<<EOF
e asm.arch=bf
e asm.bytes=true
e analysis.arch=bf
e scr.utf8=false
s 0
pd 3 @ 0xa
EOF
EXPECT=<<EOF
            0x0000000a      5b             while [ptr]
            0x0000000b      3e             inc   ptr
            0x0000000c      2b             inc   [ptr]
EOF
RUN

NAME=loopy hello world
FILE=bins/bf/hello-loops.bf
ARGS=-b32
CMDS=<<EOF
s 0
aezi
aezs 906
EOF
EXPECT=<<EOF
Hello World!
EOF
RUN

NAME=instructions
FILE=bins/bf/hello-loops.bf
ARGS=-b32
CMDS=<<EOF
e asm.arch=bf
e analysis.arch=bf
ao @ 0x00 ~opcode
ao @ 0x00 ~rzil
aoj @ 0x00 ~{.rzil}
ao @ 0x08 ~opcode
ao @ 0x08 ~rzil
aoj @ 0x08 ~{.rzil}
ao @ 0x09 ~opcode
ao @ 0x09 ~rzil
aoj @ 0x09 ~{.rzil}
ao @ 0x1c ~opcode
ao @ 0x1c ~rzil
aoj @ 0x1c ~{.rzil}
ao @ 0x20 ~opcode
ao @ 0x20 ~rzil
aoj @ 0x20 ~{.rzil}
ao @ 0x21 ~opcode
ao @ 0x21 ~rzil
aoj @ 0x21 ~{.rzil}
ao @ 0x33 ~opcode
ao @ 0x33 ~rzil
aoj @ 0x33 ~{.rzil}
ao @ 0x6a ~opcode
ao @ 0x6a ~rzil
aoj @ 0x6a ~{.rzil}
EOF
EXPECT=<<EOF
opcode: inc [ptr]
rzil: [store(key:var(v:ptr), value:add(x:load(key:var(v:ptr), mem:0), y:int(value:1, length:8)), mem:0)]
[{"opcode":"store","key":{"opcode":"var","value":"ptr"},"value":{"opcode":"add","x":{"opcode":"load","key":{"opcode":"var","value":"ptr"},"mem":0},"y":{"opcode":"int","length":8,"value":1}},"mem":0}]
opcode: while [ptr]
rzil: [perform(eff:branch(condition:load(key:var(v:ptr), mem:0), true_eff:null, false_eff:goto(lbl:]8)))]
[{"opcode":"perform","eff":{"opcode":"branch","condition":{"opcode":"load","key":{"opcode":"var","value":"ptr"},"mem":0},"true_eff":null,"false_eff":{"opcode":"goto","label":"]8"}}}]
opcode: inc ptr
rzil: [perform(eff:set(v:ptr, x:add(x:var(v:ptr), y:int(value:1, length:64))))]
[{"opcode":"perform","eff":{"opcode":"set","dst":"ptr","src":{"opcode":"add","x":{"opcode":"var","value":"ptr"},"y":{"opcode":"int","length":64,"value":1}}}}]
opcode: dec ptr
rzil: [perform(eff:set(v:ptr, x:sub(x:var(v:ptr), y:int(value:1, length:64))))]
[{"opcode":"perform","eff":{"opcode":"set","dst":"ptr","src":{"opcode":"sub","x":{"opcode":"var","value":"ptr"},"y":{"opcode":"int","length":64,"value":1}}}}]
opcode: dec [ptr]
rzil: [store(key:var(v:ptr), value:sub(x:load(key:var(v:ptr), mem:0), y:int(value:1, length:8)), mem:0)]
[{"opcode":"store","key":{"opcode":"var","value":"ptr"},"value":{"opcode":"sub","x":{"opcode":"load","key":{"opcode":"var","value":"ptr"},"mem":0},"y":{"opcode":"int","length":8,"value":1}},"mem":0}]
opcode: loop
rzil: [perform(eff:branch(condition:inv(x:load(key:var(v:ptr), mem:0), ret:null), true_eff:null, false_eff:goto(lbl:[14)))]
[{"opcode":"perform","eff":{"opcode":"branch","condition":{"opcode":"inv","x":{"opcode":"load","key":{"opcode":"var","value":"ptr"},"mem":0},"ret":null},"true_eff":null,"false_eff":{"opcode":"goto","label":"[14"}}}]
opcode: out [ptr]
rzil: [perform(eff:goto(lbl:write))]
[{"opcode":"perform","eff":{"opcode":"goto","label":"write"}}]
opcode: nop
rzil: []
null
EOF
RUN
