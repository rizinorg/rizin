NAME=hexagon jumps
FILE=bins/elf/analysis/hexagon-hello-loop
CMDS=<<EOF
b 0x100000
e analysis.jmp.cref=true
s sym.main
aaa
afx
EOF
EXPECT=<<EOF
c 0x00005124 -> 0x00005128 ?   jump 0x5128
c 0x00005130 -> 0x00005154 ?   if (P0) jump:nt 0x5154
c 0x00005134 -> 0x00005138 [   jump 0x5138
C 0x00005138 -> 0x000050e0 [   call sym.pHello
C 0x0000513c -> 0x000050f8 [   call sym.pWorld
c 0x00005140 -> 0x00005144 [   jump 0x5144
c 0x00005150 -> 0x00005128 ?   jump 0x5128
EOF
RUN

NAME=hexagon immext
FILE=bins/elf/analysis/hexagon-hello-loop
CMDS=<<EOF
b 0x100000
s 0x000050e4
pi 2
s 0x0000539c
pi 4
EOF
EXPECT=<<EOF
?   immext(##0xb0c0)
?   R0 = ##0xb0d0
?   immext(##0xd180)
?   R2 = ##0xd1ac
?   immext(##0xfe105000)
?   R3 = ##-0x1efb000
EOF
RUN

NAME=hexagon immediate search
FILE=bins/elf/analysis/hexagon-hello-loop
CMDS=<<EOF
b 0x100000
aar
/ai 0xdead
/ai 0xbeef
/ai -8
/ai 0x1c00
/ai 0xffffff40 0xffffffff
EOF
EXPECT=<<EOF
0x00000b80   # 4: [   R0.h = #0xdead
0x00000b84   # 4: [   R0.l = #0xbeef
0x00001e68   # 4: [   R4.l = #0xbeef
0x0000342c   # 4: |   if (!P3) memh(R23++#-0x8) = R11.h
0x0000511c   # 4: [   R2 = add(R30,##-0x8)
0x00005128   # 4: [   R2 = memw(R30+##-0x8)
0x00005144   # 4: [   R2 = memw(R30+##-0x8)
0x0000514c   # 4: [   memw(R30+##-0x8) = R2
0x0000564c   # 4: \   R2 = memw(R0+##-0x8)
0x00005654   # 4: \   if (P0.new) R17 = add(R16,##-0x8)
0x00005740   # 4: \   R17 = and(R2,##-0x8)
0x00005840   # 4: /   R4 = add(R2,##-0x8)
0x00005970   # 4: \   if (P2.new) R2 = add(R2,##-0x8)
0x000059d0   # 4: \   R1 = and(R1,##-0x8)
0x00005c88   # 4: |   if (P0.new) R2 = add(R2,##-0x8)
0x00005d00   # 4: |   if (P0.new) R2 = add(R2,##-0x8)
0x00006394   # 4: [   R4 = and(R4,##-0x8)
0x000063f8   # 4: [   R4 = and(R4,##-0x8)
0x0000641c   # 4: [   R4 = and(R4,##-0x8)
0x00006510   # 4: [   R4 = and(R4,##-0x8)
0x00006534   # 4: [   R4 = and(R4,##-0x8)
0x00007134   # 4: |   R3 = mux(P0,##-0x4,#-0x8)
0x0000747c   # 4: \   R2 = add(R2,##-0x8)
0x00007ee0   # 4: /   R17 = add(R17,##-0x8)
0x00008484   # 4: \   R2 = add(R16,add(R2,##-0x8))
0x0000848c   # 4: /   R2 = add(R2,##-0x8)
0x00008500   # 4: \   memd(R2+##-0x8) = R1:0
0x00008598   # 4: \   memd(R2+##-0x8) = R1:0
0x000087b8   # 4: \   memd(R3+##-0x8) = R1:0
0x00009b64   # 4: [   R2 = memw(R18+##-0x8)
0x0000afd8   # 4: /   R3 = and(R3,##-0x8)
0x00000aac   # 4: /   immext(##0x1c00)
0x00000ab4   # 4: |   immext(##0x1c00)
0x00000b44   # 4: /   immext(##0x1c00)
0x00005170   # 4: /   immext(##0x1c00)
0x00005178   # 4: |   immext(##0x1c00)
0x00005180   # 4: /   immext(##0x1c00)
0x000060e4   # 4: /   immext(##0xffffffc0)
0x000060e8   # 4: |   R2 = add(R2,add(R3,##-0x30))
0x000061e4   # 4: /   immext(##0xffffffc0)
0x000061e8   # 4: |   R2 = add(R2,add(R3,##-0x30))
0x00006264   # 4: /   immext(##0xffffffc0)
0x00006268   # 4: |   R2 = add(R2,add(R3,##-0x30))
0x00007140   # 4: |   immext(##0xffffffc0)
0x00007144   # 4: |   R0 = add(##0xfffffffa,mpyi(R2,#0x6))
0x00009684   # 4: |   immext(##0xffffff40)
0x00009688   # 4: \   memh(R0+#0x0) = ##-0x81
EOF
RUN

NAME=hexagon extended immediate search
FILE=bins/elf/analysis/hexagon-hello-loop
BROKEN=1
CMDS=<<EOF
b 0x100000
aar
/ai sym.sys_TLSFreeAll
/ai sym.coredump
EOF
EXPECT=<<EOF
0x000051d4   # 4: ?   R1 = ##0x5410
0x00000b70   # 4: ?   jump sym.coredump
0x00000b7c   # 4: ?   jump sym.coredump
0x00000b8c   # 4: ?   jump sym.coredump
0x00000f48   # 4: ?   jump sym.coredump
0x000051f0   # 4: ?   R28 = ##sym.coredump
EOF
RUN

NAME=hexagon extended immediates
FILE==
CMDS=<<EOF
wx 00c0007fc045e401834080491ae24220
e asm.arch=hexagon
e analysis.arch=hexagon
pi 4
EOF
EXPECT=<<EOF
?   nop
/   immext(##0x1e417000)
|   R3 = memw(GP+##0x1e417004)
\   if (!cmp.eq(R3.new,R2)) jump:t 0x38
EOF
RUN

NAME=hexagon hardware loop simple
FILE==
CMDS=<<EOF
wx 12c03e6388c0006900c0007f0080007f00c0007f
e asm.arch=hexagon
e analysis.arch=hexagon
pi 5
EOF
EXPECT=<<EOF
?   C19:18 = R31:30
[   loop0(0x8,#0x10)
[   nop
/   nop
\   nop     < endloop0
EOF
RUN

NAME=hexagon hardware loop nested I
FILE==
CMDS=<<EOF
wx 00c0007f0bc0006900404d850040000076d09b9a0ac020690040007f07407c700040000087c40aab048063700080007f00c0007f
e asm.arch=hexagon
e analysis.arch=hexagon
pi 13
EOF
EXPECT=<<EOF
?   nop
[   loop0(0x8,#0x3)
/   P0 = R13
|   immext(##0x0)
\   R23:22 = memb_fifo(R27=##0x3)
[   loop1(0x18,#0x2)
/   nop
|   R7 = R28
|   immext(##0x0)
\   memb(R10=##0x7) = R4
/   R4 = R3
|   nop
\   nop     < endloop01
EOF
RUN

NAME=hexagon hardware loop nested II
FILE==
CMDS=<<EOF
wx 00c0007f0bc0206900404d850040000076d09b9a00c000580ac0006907807c7000c0007f044063700080007f00c0007f
e asm.arch=hexagon
e analysis.arch=hexagon
pi 12
EOF
EXPECT=<<EOF
?   nop
[   loop1(0x8,#0x3)
/   P0 = R13
|   immext(##0x0)
\   R23:22 = memb_fifo(R27=##0x3)
[   jump 0x14
[   loop0(0x1c,#0x2)
/   R7 = R28
\   nop     < endloop0
/   R4 = R3
|   nop
\   nop     < endloop1
EOF
RUN

NAME=hexagon undocumented hardware loop
FILE==
CMDS=<<EOF
wx 04c0947c20410069414041752240017543c00175838003b055314420
e asm.arch=hexagon
e analysis.arch=hexagon
pi 7
EOF
EXPECT=<<EOF
?   R5:4 = combine(#0x0,##0x28)
/   loop0(0x14,#0x4)
|   P1 = cmp.gt(R1,##0x2)
|   P2 = cmp.eq(R1,##0x1)
\   P3 = cmp.eq(R1,##0x2)
/   R3 = add(R3,##0x4)
\   R4 = add(R4in,##0x4) ; R5 = add(R5,#1)     < endloop0
EOF
RUN


NAME=hexagon Nt.new register
FILE==
CMDS=<<EOF
wx ffffffff20400078e15f1076e25f107601d6bda120400078e15f1076e25f107601d4bda120400078e15f1076e25f107601d2bda1e15f107620400078e25f107601d4bda1fd5f10760040007fe25f107601d6bda1044411f30ae24221cc7fff59024402f300d2a3a103406070004d2f0c0040007800d4bda103406070004d2f0c0040007800d2bda1174d2f0c004400787140000000d2bda10340607000400078004d2f0c00d2bda10340607000400078004d2f0c00d4bda1
e asm.arch=hexagon
e analysis.arch=hexagon
pi 46
EOF
EXPECT=<<EOF
?   invalid
/   R0 = ##0x1
|   R1 = and(R16,##0xff)
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R0.new
/   R0 = ##0x1
|   R1 = and(R16,##0xff)
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R1.new
/   R0 = ##0x1
|   R1 = and(R16,##0xff)
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R2.new
/   R1 = and(R16,##0xff)
|   R0 = ##0x1
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R0.new
/   R29 = and(R16,##0xff)
|   nop
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R29.new
/   R4 = add(R17,R4)
\   if (!cmp.gtu(R4.new,R2)) jump:t 0x68
/   jump 0xfffffff4
|   R2 = add(R2,R4)
\   memw(R3+##0x0) = R2.new
/   R3 = R0
|   immext(##0xc2f34000)
|   R0 = ##-0x3d0cc000
\   memw(R29+##0x0) = R3.new
/   R3 = R0
|   immext(##0xc2f34000)
|   R0 = ##-0x3d0cc000
\   memw(R29+##0x0) = R0.new
/   immext(##0xc2f345c0)
|   R0 = ##-0x3d0cba20
|   immext(##0x1c40)
\   memw(R29+##0x1c40) = R0.new
/   R3 = R0
|   R0 = ##0x0
|   immext(##0xc2f34000)
\   memw(R29+##-0x3d0cc000) = R0.new
/   R3 = R0
|   R0 = ##0x0
|   immext(##0xc2f34000)
\   memw(R29+##-0x3d0cc000) = R3.new
EOF
RUN

NAME=hexagon hash prefix
FILE==
CMDS=<<EOF
wx 00c0007f0bc0006900404d850040000076d09b9a0ac020690040007f07407c700040000087c40aab048063700080007f00c0007f
e asm.arch=hexagon
e analysis.arch=hexagon
e asm.imm.hash=1
pi 13
EOF
EXPECT=<<EOF
?   nop
[   loop0(0x8,0x3)
/   P0 = R13
|   immext(0x0)
\   R23:22 = memb_fifo(R27=0x3)
[   loop1(0x18,0x2)
/   nop
|   R7 = R28
|   immext(0x0)
\   memb(R10=0x7) = R4
/   R4 = R3
|   nop
\   nop     < endloop01
EOF
RUN

NAME=hexagon negative immediates without sign
FILE=bins/elf/analysis/hexagon-hello-loop
CMDS=<<EOF
b 0x100000
aar
e asm.imm.sign=false
/ai -8
/ai 0xffffff40 0xffffffff
EOF
EXPECT=<<EOF
0x0000342c   # 4: |   if (!P3) memh(R23++#0xfffffff8) = R11.h
0x0000511c   # 4: [   R2 = add(R30,##0xfffffff8)
0x00005128   # 4: [   R2 = memw(R30+##0xfffffff8)
0x00005144   # 4: [   R2 = memw(R30+##0xfffffff8)
0x0000514c   # 4: [   memw(R30+##0xfffffff8) = R2
0x0000564c   # 4: \   R2 = memw(R0+##0xfffffff8)
0x00005654   # 4: \   if (P0.new) R17 = add(R16,##0xfffffff8)
0x00005740   # 4: \   R17 = and(R2,##0xfffffff8)
0x00005840   # 4: /   R4 = add(R2,##0xfffffff8)
0x00005970   # 4: \   if (P2.new) R2 = add(R2,##0xfffffff8)
0x000059d0   # 4: \   R1 = and(R1,##0xfffffff8)
0x00005c88   # 4: |   if (P0.new) R2 = add(R2,##0xfffffff8)
0x00005d00   # 4: |   if (P0.new) R2 = add(R2,##0xfffffff8)
0x00006394   # 4: [   R4 = and(R4,##0xfffffff8)
0x000063f8   # 4: [   R4 = and(R4,##0xfffffff8)
0x0000641c   # 4: [   R4 = and(R4,##0xfffffff8)
0x00006510   # 4: [   R4 = and(R4,##0xfffffff8)
0x00006534   # 4: [   R4 = and(R4,##0xfffffff8)
0x00007134   # 4: |   R3 = mux(P0,##0xfffffffc,#0xfffffff8)
0x0000747c   # 4: \   R2 = add(R2,##0xfffffff8)
0x00007ee0   # 4: /   R17 = add(R17,##0xfffffff8)
0x00008484   # 4: \   R2 = add(R16,add(R2,##0xfffffff8))
0x0000848c   # 4: /   R2 = add(R2,##0xfffffff8)
0x00008500   # 4: \   memd(R2+##0xfffffff8) = R1:0
0x00008598   # 4: \   memd(R2+##0xfffffff8) = R1:0
0x000087b8   # 4: \   memd(R3+##0xfffffff8) = R1:0
0x00009b64   # 4: [   R2 = memw(R18+##0xfffffff8)
0x0000afd8   # 4: /   R3 = and(R3,##0xfffffff8)
0x000060e4   # 4: /   immext(##0xffffffc0)
0x000060e8   # 4: |   R2 = add(R2,add(R3,##0xffffffd0))
0x000061e4   # 4: /   immext(##0xffffffc0)
0x000061e8   # 4: |   R2 = add(R2,add(R3,##0xffffffd0))
0x00006264   # 4: /   immext(##0xffffffc0)
0x00006268   # 4: |   R2 = add(R2,add(R3,##0xffffffd0))
0x00007140   # 4: |   immext(##0xffffffc0)
0x00007144   # 4: |   R0 = add(##0xfffffffa,mpyi(R2,#0x6))
0x00009684   # 4: |   immext(##0xffffff40)
0x00009688   # 4: \   memh(R0+#0x0) = ##0xffffff7f
EOF
RUN

NAME=hexagon regs
FILE=
CMDS=<<EOF
e asm.arch=hexagon
ar~[0]
EOF
EXPECT=<<EOF
lc0
sa0
lc1
sa1
p3:0
c5
pc
ugp
gp
cs0
cs1
upcyclelo
upcyclehi
framelimit
framekey
pktcountlo
pktcounthi
utimerlo
utimerhi
m0
m1
usr
c1:0
c3:2
c5:4
c7:6
c9:8
c11:10
c13:12
c15:14
c17:16
c19:18
c31:30
r1:0
r3:2
r5:4
r7:6
r9:8
r13:12
r15:14
r17:16
r19:18
r21:20
r23:22
r25:24
r27:26
r11:10
r29:28
r31:30
gelr
gsr
gosp
gbadva
g4
g5
g6
g7
g8
g9
g10
g11
g12
g13
g14
g15
gpmucnt4
gpmucnt5
gpmucnt6
gpmucnt7
g20
g21
g22
g23
gpcyclelo
gpcyclehi
gpmucnt0
gpmucnt1
gpmucnt2
gpmucnt3
g30
g31
g1:0
g3:2
g5:4
g7:6
g9:8
g11:10
g13:12
g15:14
g17:16
g19:18
g21:20
g23:22
g25:24
g27:26
g29:28
g31:30
q0
q1
q2
q3
v3:0
v7:4
v11:8
v15:12
v19:16
v23:20
v27:24
v31:28
v0
v1
v2
v3
v4
v5
v6
v7
v8
v9
v10
v11
v12
v13
v14
v15
v16
v17
v18
v19
v20
v21
v22
v23
v24
v25
v26
v27
v28
v29
v30
v31
v1:0
v3:2
v5:4
v7:6
v9:8
v11:10
v13:12
v15:14
v17:16
v19:18
v21:20
v23:22
v25:24
v27:26
v29:28
v31:30
r0
r1
r2
r3
r4
r5
r6
r7
r8
r9
r12
r13
r14
r15
r16
r17
r18
r19
r20
r21
r22
r23
r24
r25
r26
r27
r28
r10
r11
r29
r30
r31
p0
p1
p2
p3
sgp0
sgp1
stid
elr
badva0
badva1
ssr
ccr
htid
badva
imask
gevb
s12
s13
s14
s15
evb
modectl
syscfg
s19
ipendad
vid
vid1
bestwait
s24
schedcfg
s26
cfgbase
diag
rev
pcyclelo
pcyclehi
isdbst
isdbcfg0
isdbcfg1
livelock
brkptpc0
brkptcfg0
brkptpc1
brkptcfg1
isdbmbxin
isdbmbxout
isdben
isdbgpr
pmucnt4
pmucnt5
pmucnt6
pmucnt7
pmucnt0
pmucnt1
pmucnt2
pmucnt3
pmuevtcfg
s53
pmuevtcfg1
pmustid1
timerlo
timerhi
s58
s59
s60
s61
s62
s63
commit1t
commit2t
commit3t
commit4t
commit5t
commit6t
pcycle1t
pcycle2t
pcycle3t
pcycle4t
pcycle5t
pcycle6t
stfinst
isdbcmd
isdbver
brkptinfo
rgdr3
s1:0
s3:2
s5:4
s7:6
s9:8
s11:10
s13:12
s15:14
s17:16
s19:18
s21:20
s23:22
s25:24
s27:26
s29:28
s31:30
s33:32
s35:34
s37:36
s39:38
s41:40
s43:42
s45:44
s47:46
s49:48
s51:50
s53:52
s55:54
s57:56
s59:58
s61:60
s63:62
s65:64
s67:66
s69:68
s71:70
s73:72
s75:74
s77:76
s79:78
EOF
RUN
