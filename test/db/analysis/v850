NAME=v850 preludes
FILE=bins/v850/hello-v850e
CMDS=<<EOF
aap
afl
EOF
EXPECT=<<EOF
0x00100000    3 108          entry0
0x0010006c    1 36           sym._compute
0x00100090    1 64           main
0x001000d0    5 74           sym.___main
0x0010011a    3 34           sym._exit
0x0010013c    1 24           sym.__printf_r
0x00100154    1 28           sym._printf
0x00100170  310 6958 -> 5434 sym.__vfprintf_r
0x00101cb8    1 24           sym._vfprintf
0x00101cd0    5 146          sym.___sbprintf
0x00101d64   27 264          sym.___swsetup_r
0x00101e6c   20 170          sym.___call_exitprocs
0x00101f16    3 64           sym.__exit
0x00101f58   21 332          sym._quorem
0x001020a4  226 5164 -> 5018 sym.__dtoa_r
0x001034d0   40 428          sym.___sflush_r
0x0010367c    6 68           sym.__fflush_r
0x001036c0    3 40           sym._fflush
0x001036ec    1 106          sym._std
0x00103756    1 18           sym.__cleanup_r
0x00103768    1 88           sym.___sinit.part___0
0x001037c4    3 60           sym.___sfmoreglue
0x00103800   13 180          sym.___sfp
0x001038b4    1 22           sym.__cleanup
0x001038ca    3 20           sym.___sinit
0x001038e6    1 22           sym.___fp_lock_all
0x001038fc    1 22           sym.___fp_unlock_all
0x00103912    7 196          sym.__malloc_trim_r
0x001039d6   40 668          sym.__free_r
0x00103c72    8 72           sym.__fwalk
0x00103cba    8 76           sym.__fwalk_reent
0x00103d0c    1 8            sym.__localeconv_r
0x00103d1c    6 122  -> 106  sym.___swhatbuf_r
0x00103d96   10 204          sym.___smakebuf_r
0x00103e62  108 1806         sym.__malloc_r
0x001045ac    4 24           sym._memset
0x001045c4    1 2            sym.___malloc_lock
0x001045c6    1 2            sym.___malloc_unlock
0x001045c8   12 136          sym.__Balloc
0x00104650    9 198          sym.___multadd
0x00104716   45 414          sym.___s2b
0x001048b4    3 52           sym.___i2b
0x001048e8   22 392          sym.___multiply
0x00104a70   15 188          sym.___pow5mult
0x00104b2c   21 342          sym.___lshift
0x00104c82   28 470          sym.___mdiff
0x00104e58   14 180          sym.___b2d
0x00104f0c   12 272          sym.___d2b
0x0010501c    4 148          sym.___ratio
0x001050b0    5 114          sym.__mprec_log10
0x001051c2    4 46           sym.__sbrk_r
0x001051f0    3 50           sym.___sread
0x00105226    3 70           sym.___swrite
0x0010526c    3 52           sym.___sseek
0x001052a0    1 16           sym.___sclose
0x001052b0    5 28           sym._strlen
0x001052cc    3 18           loc.___trap0
0x001052e0   12 132          sym.___sprint_r.part___0
0x00105364    3 28           sym.___sprint_r
0x00105380  139 3942 -> 2252 sym.__vfiprintf_r
0x00106300    1 24           sym._vfiprintf
0x00106318    5 146          sym.___sbprintf_0x106318
0x001063ac    4 52           sym.__write_r
0x001063e0    5 90           sym.___assert_func
0x0010643a   12 132          sym.__calloc_r
0x001064be    4 46           sym.__close_r
0x001064ec   18 172          sym.__fclose_r
0x00106598    1 18           sym._fclose
0x001065aa    1 20           sym.__fiprintf_r
0x001065be    1 26           sym._fiprintf
0x001065d8   17 198          sym.___fputwc
0x0010669e    3 44           sym.__fputwc_r
0x001066ca    6 94           sym._fputwc
0x00106728    4 50           sym.__fstat_r
0x0010675a   61 1032         sym.___sfvwrite_r
0x00106b62    4 46           sym.__isatty_r
0x00106b90    8 90           sym.__setlocale_r
0x00106bea    1 22           sym._setlocale
0x00106c00    4 52           sym.__lseek_r
0x00106c34    1 34           sym.__mbtowc_r
0x00106c56   18 120  -> 122  sym.___ascii_mbtowc
0x00106cce    4 52           sym.__read_r
0x00106d02   66 1322         sym.__realloc_r
0x0010722c   12 150          sym.__sbrk
0x001072c2   19 248          sym.___swbuf_r
0x001073ba    1 22           sym.___swbuf
0x001073d0    5 70           sym.__wcrtomb_r
0x00107416    1 24           sym._wcrtomb
0x0010742e    1 22           sym.__wctomb_r
0x00107468    1 22           sym.__write
0x0010747e    1 16           sym._abort
0x0010748e    1 20           sym.__close
0x001074a2    1 22           sym.__fstat
0x001074b8    1 4            sym.__isatty
0x001074bc    1 24           sym.__lseek
0x001074d4    1 22           sym.__read
0x001074ea    6 46           sym.__init_signal_r.part___0
0x00107518    3 26           sym.__init_signal_r
0x00107532    8 92           sym.__signal_r
0x0010758e   11 126          sym.__raise_r
0x0010760c   13 110          sym.___sigtramp_r
0x0010767a    1 18           sym._raise
0x0010768c    1 22           sym._signal
0x001076a2    3 30           sym.__init_signal
0x001076c0    1 18           sym.___sigtramp
0x001076d2    4 50           sym.__kill_r
0x00107704    1 12           sym.__getpid_r
0x00107710    1 4            sym.__getpid
0x00107714    1 24           sym.__kill
0x0010772c    3 92           sym.___unorddf2
EOF
RUN

NAME=v850 preludes
FILE=bins/v850/ired_v850
CMDS=<<EOF
aap
afl
EOF
EXPECT=<<EOF
0x00100000    3 108          entry0
0x0010006c    3 130          sym._io_open
0x001000ee   21 484          sym._hexdump
0x001002d2   19 1970 -> 318  sym._print_fmt
0x00100a84   19 608          sym._str2ut64
0x00100ce4    5 228  -> 124  sym._hex2byte
0x00100dc8   12 236          sym._hexstr2raw
0x00100eb4    9 280          sym._getcurblk
0x00100fcc    4 272          sym._Nset
0x001010dc    1 120          sym._Nsetf
0x00101154    4 392          sym._Naddi
0x001012dc    4 392          sym._Nsubi
0x00101464    1 240          sym._Nadd
0x00101554    1 240          sym._Nsub
0x00101644    1 224          sym._Nmul
0x00101724    7 340          sym._Ndiv
0x00101878    1 68           sym._error
0x001018bc    6 408          sym._expr
0x00101a54    9 514          sym._term
0x00101c56    5 1324 -> 170  sym._prim
0x00102182    1 50           sym._cin_putback
0x001021b4    6 120          sym._r_num_calc_index
0x0010222c    9 172          sym._cin_get
0x001022d8   16 518          sym._cin_get_num
0x001024de   36 1522 -> 866  sym._get_token
0x00102ad0    1 72           sym._load_token
0x00102b18   21 804          sym._r_num_calc
0x00102e3c    5 132          sym._cmd_hexdump
0x00102ec0    7 158          sym._cmd_print
0x00102f5e    7 180          sym._cmd_bytedump
0x00103012   13 810  -> 498  sym._cmd_search
0x0010333c   10 318          sym._cmd_bsize
0x0010347a    8 506          sym._cmd_seek
0x00103674   10 244          sym._cmd_dump
0x00103768   13 356          sym._cmd_load
0x001038cc   13 342          sym._cmd_write
0x00103a22    4 152          sym._cmd_help
0x00103aba   29 984          sym._cmd_resize
0x00103e92   14 562          sym._cmd_system
0x001040c4    4 262          sym._red_slurpin
0x001041ca    7 238          sym._red_interpret
0x001042b8    9 796  -> 186  sym._red_cmd
0x001045d4   17 790          sym._red_prompt
0x001048ea   18 454          sym._red_open
0x00104ab0    1 44           sym._red_help
0x00104adc   21 748  -> 464  main
0x00104e48    2 1166 -> 150  fcn.00104e48
0x00104ec4  134 67332 -> 1714 sym.___udivdi3
0x001052d8    5 74           sym.___main
0x00105322    3 34           sym._exit
0x00105344   18 172          sym.__fclose_r
0x001053f0    1 18           sym._fclose
0x00105402   40 428          sym.___sflush_r
0x001055ae    6 68           sym.__fflush_r
0x001055f2    3 40           sym._fflush
0x0010561a   15 304          sym.__fgets_r
0x0010574a    1 24           sym._fgets
0x00105766    1 106          sym._std
0x001057d0    1 18           sym.__cleanup_r
0x001057e2    1 88           sym.___sinit.part___0
0x0010583e    3 60           sym.___sfmoreglue
0x0010587a   13 180          sym.___sfp
0x0010592e    1 22           sym.__cleanup
0x00105944    3 20           sym.___sinit
0x00105960    1 22           sym.___fp_lock_all
0x00105976    1 22           sym.___fp_unlock_all
0x0010598c    8 174          sym.__fopen_r
0x00105a3a    1 22           sym._fopen
0x00105a50    1 20           sym.__fprintf_r
0x00105a64    1 26           sym._fprintf
0x00105a7e   16 318          sym.__fread_r
0x00105bbc    1 36           sym._fread
0x00105be0    7 196          sym.__malloc_trim_r
0x00105ca4   47 65930 -> 846  sym.__free_r
0x00105f40    1 12           sym.__fseek_r
0x00105f4c    1 24           sym._fseek
0x00105f64   67 65750 -> 834  sym.__fseeko_r
0x00106274    1 24           sym._fseeko
0x0010628e    4 48           fcn.0010628e
0x001062be   22 198          sym.__ftello_r
0x00106384    1 18           sym._ftello
0x00106396    8 72           sym.__fwalk
0x001063de    8 76           sym.__fwalk_reent
0x0010642a    8 144          sym.__fwrite_r
0x001064ba    1 36           sym._fwrite
0x001064e2    6 122  -> 106  sym.___swhatbuf_r
0x0010655c   10 204          sym.___smakebuf_r
0x00106628    1 18           sym._malloc
0x0010663a    1 18           sym._free
0x0010664c  125 67018 -> 2778 sym.__malloc_r
0x00106d96    4 24           sym._memset
0x00106dae    1 2            sym.___malloc_lock
0x00106db0    1 2            sym.___malloc_unlock
0x00106db2    4 52           sym.__open_r
0x00106de6   26 65660 -> 454  sym.__perror_r
0x00106f48    1 18           sym._perror
0x00106f5a    1 24           sym.__printf_r
0x00106f72    1 28           sym._printf
0x00106f8e    1 16           sym.__putchar_r
0x00106f9e    1 24           sym._putchar
0x00106fb6    5 152          sym.__puts_r
0x0010704e    1 18           sym._puts
0x00107060    3 30           sym._lflush
0x0010707e   29 356          sym.___srefill_r
0x001071e2    4 46           sym.__sbrk_r
0x00107210    1 24           sym._setenv
0x00107228    1 18           sym._unsetenv
0x0010723a   37 65668 -> 524  sym.__setenv_r
0x00107428   11 152          sym.__unsetenv_r
0x001074c0    1 72           sym.__sprintf_r
0x00107508    1 76           sym._sprintf
0x00107554    1 86           sym._sscanf
0x001075aa    1 88           sym.__sscanf_r
0x00107602    3 50           sym.___sread
0x00107638    3 70           sym.___swrite
0x0010767e    3 52           sym.___sseek
0x001076b2    1 16           sym.___sclose
0x001076ea    1 18           sym._strdup
0x001076fc    3 48           sym.__strdup_r
0x0010772c    5 1442 -> 68   sym.__strerror_r
0x00107cce    1 22           sym._strerror
0x00107ce4    1 22           sym._strerror_l
0x00107cfc    5 28           sym._strlen
0x00107d64  294 6824 -> 5246 sym.__svfprintf_r
0x0010980c   27 5436 -> 504  sym.___ssvfscanf_r
0x00109fce   54 3600 -> 858  fcn.00109fce
0x0010ade0    1 18           sym._close
0x0010adf2    1 24           sym._lseek
0x0010ae0a    1 26           sym._open
0x0010ae24    1 24           sym._read
0x0010ae3c    3 32           sym.__system_r
0x0010ae5c    3 32           sym._system
0x0010ae7c    1 18           sym._unlink
0x0010ae8e    1 24           sym._write
0x0010aea6    1 4            sym.__user_strerror
0x0010aeaa    4 46           sym.__unlink_r
0x0010aed8  310 6958 -> 5434 sym.__vfprintf_r
0x0010ca20    1 24           sym._vfprintf
0x0010ca38    5 146          sym.___sbprintf
0x0010cacc    4 52           sym.__write_r
0x0010cb00   27 264          sym.___swsetup_r
0x0010cc08   20 170          sym.___call_exitprocs
0x0010ccb2    3 64           sym.__exit
0x0010ccf2    4 46           sym.__close_r
0x0010cd20   21 332          sym._quorem
0x0010ce6c  226 5166 -> 5020 sym.__dtoa_r
0x0010e29c    1 6            sym.___errno
0x0010e2a2    7 60           sym._fileno
0x0010e2de   15 146          sym.___sflags
0x0010e370    1 22           sym.__fstat
0x0010e386   61 1032         sym.___sfvwrite_r
0x0010e78e   15 160          sym.__findenv_r
0x0010e82e    1 18           sym.__getenv_r
0x0010e840    4 46           sym.__isatty_r
0x0010e86e    1 14           sym._iswspace
0x0010e87c    3 30           sym._iswspace_l
0x0010e89a    8 90           sym.__setlocale_r
0x0010e8f4    1 22           sym._setlocale
0x0010e910    1 8            sym.__localeconv_r
0x0010e920    4 52           sym.__lseek_r
0x0010e954    5 92           sym.__mbrtowc_r
0x0010e9b0    1 36           sym._mbrtowc
0x0010e9d4    1 34           sym.__mbtowc_r
0x0010e9f6   18 120  -> 122  sym.___ascii_mbtowc
0x0010ea6e   12 136          sym.__Balloc
0x0010eaf6    9 198          sym.___multadd
0x0010ebbc   45 414          sym.___s2b
0x0010ed5a    3 52           sym.___i2b
0x0010ed8e   22 392          sym.___multiply
0x0010ef16   15 188          sym.___pow5mult
0x0010efd2   21 342          sym.___lshift
0x0010f128   28 470          sym.___mdiff
0x0010f2fe   14 180          sym.___b2d
0x0010f3b2   12 272          sym.___d2b
0x0010f4c2    4 148          sym.___ratio
0x0010f556    5 114          sym.__mprec_log10
0x0010f668    1 20           sym.__open
0x0010f67c    8 108          sym.__putc_r
0x0010f6e8    1 22           sym._putc
0x0010f6fe    4 52           sym.__read_r
0x0010f732   56 1228 -> 1030 sym.__realloc_r
0x0010f9f8    1 22           fcn.0010f9f8
0x0010fa24    1 14           fcn.0010fa24
0x0010fae0    7 348  -> 106  fcn.0010fae0
0x0010fb30    1 8            fcn.0010fb30
0x0010fb5a    3 158  -> 62   fcn.0010fb5a
0x0010fb84    1 20           fcn.0010fb84
0x0010fbd6    1 2            fcn.0010fbd6
0x0010fbfe    3 94   -> 62   fcn.0010fbfe
0x0010fc5c   26 274          sym.__sbrk
0x0010fde4    4 98           sym._sulp
0x0010fe46  269 5280 -> 4896 sym.__strtod_l
0x00111036    1 44           fcn.00111036
0x001112e6    1 18           sym.__strtod_r
0x001112f8    1 24           sym._strtod_l
0x00111310    1 28           sym._strtod
0x0011132c   10 222          sym._strtof_l
0x0011140a   10 226          sym._strtof
0x001114ec   47 376  -> 380  sym.__strtol_l.isra___0
0x00111664    1 12           sym.__strtol_r
0x00111670    1 24           sym._strtol_l
0x00111688    1 24           sym._strtol
0x001116a0   42 350  -> 354  sym.__strtoul_l.isra___0
0x001117fe    1 12           sym.__strtoul_r
0x0011180a    1 24           sym._strtoul_l
0x00111822    1 24           sym._strtoul
0x0011183c   19 402          sym.___ssprint_r
0x001119ce  102 3464 -> 1832 sym.__svfiprintf_r
0x00111bba    2 6            fcn.00111bba
0x00111f24   58 2222 -> 724  fcn.00111f24
0x00112758   12 182          sym.__sungetc_r
0x0011280e    7 84           sym.___ssrefill_r
0x00112862    8 242          sym.__sfread_r
0x00112954   29 3974 -> 502  sym.___ssvfiscanf_r
0x00112cf0    3 68           fcn.00112cf0
0x001138e8    3 18           loc.___trap0
0x001138fa    7 134          sym.___submore
0x00113980   24 306          sym.__ungetc_r
0x00113ab2    1 22           sym._ungetc
0x00113ac8    1 20           sym.__unlink
0x00113adc   12 132          sym.___sprint_r.part___0
0x00113b60    3 28           sym.___sprint_r
0x00113b7c  139 3942 -> 2252 sym.__vfiprintf_r
0x00114428    1 20           fcn.00114428
0x00114afc    1 24           sym._vfiprintf
0x00114b14    5 146          sym.___sbprintf_0x114b14
0x00114ba8   19 248          sym.___swbuf_r
0x00114ca0    1 22           sym.___swbuf
0x00114cb6    1 22           sym.__wctomb_r
0x00114cf0    1 22           sym.__write
0x00114d06    1 16           sym._abort
0x00114d16    5 90           sym.___assert_func
0x00114d70   12 132          sym.__calloc_r
0x00114df4    1 20           sym.__close
0x00114e08    1 20           sym.__fiprintf_r
0x00114e1c    1 26           sym._fiprintf
0x00114e36   17 198          sym.___fputwc
0x00114efc    3 44           sym.__fputwc_r
0x00114f28    6 98   -> 82   sym._fputwc
0x00115072    1 34           sym.___gethex
0x00115172    1 12           fcn.00115172
0x0011517e    3 532  -> 20   fcn.0011517e
0x0011518c   71 1622 -> 996  fcn.0011518c
0x0011557e   11 620  -> 134  fcn.0011557e
0x001155ae    2 18           fcn.001155ae
0x001155d4    1 30           fcn.001155d4
0x001155f2    1 4            fcn.001155f2
0x0011561a    6 386  -> 154  fcn.0011561a
0x001157e2    8 94           fcn.001157e2
0x00115840    1 60           sym.___hexnan
0x0011587a   22 430  -> 252  fcn.0011587a
0x00115944    1 2            fcn.00115944
0x00115958    1 2            fcn.00115958
0x0011595a   11 312  -> 154  fcn.0011595a
0x0011598c    7 52           fcn.0011598c
0x00115a7e    5 228  -> 92   fcn.00115a7e
0x00115aa4    1 4            sym.__isatty
0x00115aac    1 24           sym.__lseek
0x00115ac4    1 22           sym.__read
0x00115ae2    6 46           sym.__init_signal_r.part___0
0x00115b10    3 26           sym.__init_signal_r
0x00115b2a    8 92           sym.__signal_r
0x00115b86   10 126  -> 110  sym.__raise_r
0x00115be0    1 16           fcn.00115be0
0x00115c04   13 110          sym.___sigtramp_r
0x00115c72    1 18           sym._raise
0x00115c84    1 22           sym._signal
0x00115c9a    2 30   -> 20   sym.__init_signal
0x00115ca4    2 12           fcn.00115ca4
0x00115cb8    1 18           sym.___sigtramp
0x00115cca    4 50           sym.__kill_r
0x00115cfc    1 12           sym.__getpid_r
0x00115d08    5 70           sym.__wcrtomb_r
0x00115d4e    1 24           sym._wcrtomb
0x00115d66    1 4            sym.__kill
0x00115d7e    1 10           sym.___unordsf2
0x00115dd2    1 10           sym.___unorddf2
0x00115f64    1 6            fcn.00115f64
0x0011628c    1 50           fcn.0011628c
0x001162be    1 364          fcn.001162be
0x0011642a    1 6            fcn.0011642a
0x001164de    1 4            fcn.001164de
0x001164e2    1 362          fcn.001164e2
0x0011664c    1 86           fcn.0011664c
0x00116d7a    1 28           fcn.00116d7a
0x00116d96    1 28           fcn.00116d96
0x00116db2    1 52           fcn.00116db2
0x00116de6    1 2            fcn.00116de6
0x00116fb6    1 36           fcn.00116fb6
0x0011772c    1 34           fcn.0011772c
0x0011774e    1 230          fcn.0011774e
EOF
RUN

NAME=v850 random pseudo
FILE=bins/elf/ld-2.27.so
CMDS=<<EOF
sd +128
e asm.arch=v850
e asm.pseudo=true
b 64
pi 64~=
EOF
EXPECT=<<EOF
*(r8 + 4167) = (byte) r24
r9 = ~lp
r1 = ~gp
r13 = 8
r13 = 0
r9 = r2
r17 = r13 | 904
lp = 0
r11 = (34120 << XX) + r26
r6 = r18 | 0
r9 = r16
r10 = sp | 0
r9 = r8
r9 = r16
r22 = tp | 0
gp == -1
r17 = r8 & 0
gp == 5
r9 = ~lp
r9 = r8
r24 += r7
lp = (unsigned half) *(lp - 1)
r6 *= lp
r11 += -8
sp = (byte) *(r15 + 64)
gp = 0
EOF
RUN

NAME=v850 plf @@F functions hello-v850e
FILE=bins/v850/hello-v850e
CMDS=<<EOF
aaa
pdf @@F~33
plf @@F~33
EOF
EXPECT=<<EOF
| |::||||   0x00100290      addi  1, r27, r10                          ; vfprintf.c:933
| |::||||   0x00100332      st.w  r10, 124[sp]
| |::||||   0x00100336      st.w  r17, 120[sp]
| ========< 0x0010033a      bgt   0x100fd4
| |::||||   0x0010033e      add   8, r29
| ========< 0x001006bc      bne   0x101336
| ========< 0x001006e2      be    0x101336
| --------> 0x00101336      ld.w  32[sp], r8                           ; vfprintf.c:1240
| |||||||   0x0010133a      ld.w  36[sp], r9
| |||||||   0x0010133e      st.w  r11, 20[sp]
| |||||||   0x001014b2      ld.w  48[sp], r11                          ; vfprintf.c:1330
| |||||||   0x001014be      cmp   1, r11                               ; vfprintf.c:1331
| |||||||   0x001014c0      st.w  r10, 20[sp]                          ; vfprintf.c:1330
| ========< 0x001014c4      ble   0x101bea                             ; vfprintf.c:1331
| --------> 0x001014c8      ld.w  20[sp], r10                          ; vfprintf.c:1332
| |||||||   0x001014d4      add   r11, r10                             ; vfprintf.c:1332
| |||||||   0x0010183a      ld.dw 33417[sp], r16
| |||||||   0x00101870      andi  1, r2, r10                           ; vfprintf.c:1337
| |||||||   0x00101874      ld.w  40[sp], r12                          ; vfprintf.c:1338
| |||||||   0x00101880      cmp   0, r10                               ; vfprintf.c:1339
| |||||||   0x0010195a      ld.dw 33417[sp], r16
| --------> 0x00101978      ld.w  40[sp], r10                          ; vfprintf.c:1337
| |||||||   0x00101bee      cmp   0, r11                               ; vfprintf.c:1331
|       `-> 0x00101f46      mov   0, r9                                ; _exit.c:33
| :: |:||   0x001021d4      ld.w  92[sp], r10                          ; dtoa.c:336
| :: |:||   0x001021dc      add   r12, r10                             ; dtoa.c:336
| ::||:||   0x0010225a      ld.dw 33225[sp], r16
| ::||:||   0x001022a4      ld.dw 33481[sp], r16
| ::||:||   0x00102332      ld.dw 28873[sp], r14
| ::||:||   0x00102338            
| ::||:||   0x0010233e      sldh  0[ep] r0
| ::| ,===< 0x001024b2      jr    0x112222, r0                         ; dtoa.c:330
| |:|||||   0x00102534      ld.w  36[sp], r11                          ; dtoa.c:433
| |:|||||   0x00102592      ld.dw 33225[sp], r16
| ========< 0x001025fc      be    0x103366
| |:|||||   0x001026b6      ld.dw 33609[sp], r16
| |:|||||   0x0010272a      st.dw 33615[sp], r16
| |:|||||   0x00102748      st.dw 33231[sp], r16
| |:|||||   0x00102790      ld.dw 33225[sp], r16
| |:|||||   0x001027a0      st.dw 33231[sp], r16
| ========< 0x001027c0      be    0x1033d8
| --------> 0x00102854      ld.dw 33097[sp], r16                       ; dtoa.c:556
| |:|||||   0x001028b0      ld.dw 25033[sp], r12
| |:|||||   0x00102964      sub   r10, r22                             ; dtoa.c:633
| |||||||   0x00102f48      movea 0x31, r0, r10                        ; dtoa.c:833
| ========< 0x00102f56      be    0x10333a
| ========< 0x00102fec      be    0x1033fe
| |||||||   0x00103000      ld.dw 25033[sp], r12
| ========< 0x00103038      be    0x103350
| ========< 0x00103134      be    0x1033ea
| |||||||   0x00103152      ld.dw 33097[sp], r16                       ; dtoa.c:572
| ========< 0x0010320e      be    0x1033ea
| |||||||   0x0010323c      ld.dw 33225[sp], r16
| |||||||   0x00103250      st.dw 33615[sp], r16
| |||||||   0x0010326a      ld.dw 33225[sp], r16
| |||||||   0x00103290      ld.dw 33225[sp], r16
| |||||||   0x00103300      nop   
| |||||||   0x00103302      st.dw 25039[sp], r12
| |||||||   0x00103308            
| |||||||   0x0010330e      sldh  0[ep] r0
| ========< 0x00103310      bne   0x1001023ba
| |||||||   0x00103314      movea 0x30, r0, r14                        ; dtoa.c:526
| --------> 0x00103318      ld.b  -1[r10], r11
| |||||||   0x0010331c      mov   r10, r28
| |||||||   0x0010331e      add   -1, r10
| |||||||   0x00103320      cmp   r14, r11
| ========< 0x00103322      be    0x103318
| |||||||   0x00103324      addi  1, r18, r10
| |||||||   0x00103328      st.w  r10, 36[sp]
| |||||||   0x0010332c      mov   sym.__Bfree, r10
| |||||||   0x00103332      st.w  r10, 28[sp]
| ========< 0x00103336      jr    0x112b0e, r0
| --------> 0x0010333a      ld.w  88[sp], r12                          ; dtoa.c:601
| |||||||   0x0010333e      movea 0x36, r0, r10
| |||||||   0x00103342      mov   r22, r24                             ; dtoa.c:592
| |||||||   0x00103344      mov   r25, r14                             ; dtoa.c:601
| |||||||   0x00103346      sub   r12, r10
| |||||||   0x00103348      add   r10, r26
| |||||||   0x0010334a      add   r10, r22
| ========< 0x0010334c      jr    0x112928, r0
| --------> 0x00103350      ld.w  4[sp], r10
| |||||||   0x00103354      ld.w  8[sp], r11
| |||||||   0x00103358      st.w  r10, 12[sp]
| |||||||   0x0010335c      st.w  r11, 16[sp]
| |||||||   0x00103360      mov   2, r10                               ; dtoa.c:437
| ========< 0x00103362      jr    0x1125d4, r0
| --------> 0x00103366      cmp   0, r28                               ; dtoa.c:467
| ========< 0x00103368      be    0x100102f6a
| |||||||   0x0010336c      ld.w  76[sp], r14                          ; dtoa.c:469
| |||||||   0x00103370      cmp   0, r14
| ========< 0x00103372      ble   0x1001023ba
| |||||||   0x00103376      movhi 16420, r0, r11                       ; dtoa.c:471
| |||||||   0x0010337a      st.w  r0, 28[sp]
| |||||||   0x0010337e      st.w  r11, 32[sp]
| |||||||   0x00103382      ld.dw 24777[sp], r12
| |||||||   0x00103388      ld.dw 33225[sp], r16
| |||||||   0x0010338e      movhi 16412, r0, r11                       ; dtoa.c:476
| |||||||   0x00103392      add   1, r10                               ; dtoa.c:474
| |||||||   0x00103394      st.w  r11, 56[sp]                          ; dtoa.c:476
| |||||||   0x00103398                                                 ; dtoa.c:473
| |||||||   0x0010339e            
| |||||||   0x001033a4      nop   
| |||||||   0x001033a6                                                 ; dtoa.c:476
| |||||||   0x001033ac      sldh  0[ep] r10
| |||||||   0x001033ae      ld.dw 25417[sp], r12
| |||||||   0x001033b4            
| |||||||   0x001033ba      add   r15, r10
| |||||||   0x001033bc      nop   
| |||||||   0x001033be      ld.w  36[sp], r11                          ; dtoa.c:472
| |||||||   0x001033c2      ld.w  32[sp], r10                          ; dtoa.c:477
| |||||||   0x001033c6      ld.w  28[sp], r15                          ; dtoa.c:476
| |||||||   0x001033ca      addi  -1, r11, r18                         ; dtoa.c:472
| |||||||   0x001033ce      movhi 64704, r0, r11                       ; dtoa.c:473
| |||||||   0x001033d2      add   r11, r10
| ========< 0x001033d4      jr    0x112656, r0                         ; dtoa.c:478
| --------> 0x001033d8      ld.w  36[sp], r11                          ; dtoa.c:578
| |||||||   0x001033dc      movea 0x31, r0, r12
| |||||||   0x001033e0      add   1, r11
| |||||||   0x001033e2      st.w  r11, 36[sp]
| ========< 0x001033e6      jr    0x1127d4, r0
| --------> 0x001033ea      movea 0x39, r0, r10                        ; dtoa.c:794
| |||||||   0x001033ee      mov   r29, r27                             ; dtoa.c:795
| |||||||   0x001033f0      movea 0x39, r0, r12
| |||||||   0x001033f4      mov   r26, r29
| |||||||   0x001033f6      st.b  r10, 0[r24]                          ; dtoa.c:794
| ========< 0x001033fa      jr    0x112ac2, r0                         ; dtoa.c:795
| --------> 0x001033fe      mov   0, r25                               ; dtoa.c:480
| ========< 0x00103450      be    0x1033ea
|           0x001036e8      mov   0, r10                               ; findfp.c:334
|           0x001037da      cmp   0, r10                               ; findfp.c:133
|       ,=< 0x001037de      be    0x1037fa                             ; findfp.c:133
|           0x00103912      prepare {r25 - r29, lp}, 0                 ; mallocr.c:3314
|           0x00103918      mov   obj.___malloc_av, r26                ; mallocr.c:3324
|           0x0010391e      mov   r6, r27                              ; mallocr.c:3314
|           0x00103920      jarl  sym.___malloc_lock, lp               ; mallocr.c:3322 ;  __malloc_lock(struct _reent *ptr)
|           0x00103924      ld.w  8[r26], r11                          ; mallocr.c:3324
|           0x00103928      movea 0xfff, r0, r10                       ; mallocr.c:3327
|           0x0010392c      ld.w  4[r11], r28                          ; mallocr.c:3324
|           0x00103934      movea 0xfffff000, r0, r11                  ; mallocr.c:3325
|           0x00103942      cmp   r10, r29                             ; mallocr.c:3327
|       |   0x00103946      mov   0, r7                                ; mallocr.c:3336
|       |   0x00103954      ld.w  8[r26], r11                          ; mallocr.c:3337
|    ..-`-> 0x0010395e      mov   r27, r6                              ; mallocr.c:3329
|    ::|    0x00103964      mov   0, r10                               ; mallocr.c:3330
|    ::|    0x00103966      dispose 0, {r25 - r29, lp}, lp             ; mallocr.c:3373
|    ::`--> 0x0010396a      mov   r29, r7                              ; mallocr.c:3345
|    ::     0x00103974      cmp   -1, r10                              ; mallocr.c:3347
|    :: |   0x00103978      mov   obj.___malloc_current_mallinfo, r11  ; mallocr.c:3365
|    :: |   0x00103982      ld.w  0[r11], r10                          ; mallocr.c:3366
|    :: |   0x00103986      sub   r29, r28                             ; mallocr.c:3365
|    :: |   0x0010398c      mov   r27, r6                              ; mallocr.c:3368
|    :: |   0x0010398e      subr  r10, r29                             ; mallocr.c:3366
|    :: |   0x00103990      st.w  r28, 4[r12]                          ; mallocr.c:3365
|    :: |   0x00103994      st.w  r29, 0[r11]                          ; mallocr.c:3366
|    :: |   0x00103998      jarl  sym.___malloc_unlock, lp             ; mallocr.c:3367 ;  __malloc_unlock(struct _reent *ptr)
|    :: |   0x0010399c      mov   1, r10                               ; mallocr.c:3369
|    :: |   0x0010399e      dispose 0, {r25 - r29, lp}, lp             ; mallocr.c:3373
|    :: `-> 0x001039a2      mov   0, r7                                ; mallocr.c:3350
|    ::     0x001039aa      ld.w  8[r26], r12                          ; mallocr.c:3351
|    ::     0x001039b2      cmp   15, r11                              ; mallocr.c:3352
|     :     0x001039b6      mov   obj.___malloc_sbrk_base, r13         ; mallocr.c:3354
|     :     0x001039bc      ori   1, r11, r11                          ; mallocr.c:3355
|     :     0x001039c0      ld.w  0[r13], r13                          ; mallocr.c:3354
|     :     0x001039c4      st.w  r11, 4[r12]                          ; mallocr.c:3355
|     :     0x001039c8      mov   obj.___malloc_current_mallinfo, r11  ; mallocr.c:3354
\     `===< 0x001039d4      br    0x10395e                             ; mallocr.c:3355
|           0x00103c72      prepare {r25 - r29, lp}, 0                 ; fwalk.c:33
|           0x00103e62      addi  -48, sp, sp                          ; mallocr.c:2333
|           0x00103e6e      st.w  r27, 8[sp]                           ; mallocr.c:2333
|           0x00103e74      st.w  lp, 44[sp]                           ; mallocr.c:2333
| |||:|||   0x00103f94      cmp   15, r10                              ; mallocr.c:2433
| ========< 0x00103fa4      bge   0x10433a                             ; mallocr.c:2447
|  |||:||   0x00104330      addi  8, r28, r10
|  |||:||   0x00104334      shr   3, r14
| ,=======< 0x00104336      jr    0x113eb8, r0
| --------> 0x0010433a      add   r29, r15                             ; mallocr.c:2449
| ||||:||   0x0010433c      mov   r27, r6                              ; mallocr.c:2451
| ||||:||   0x0010433e      ld.w  4[r15], r10                          ; mallocr.c:2449
            ; XREFS: UNKNOWN 0x0010332e  UNKNOWN 0x0010340e  
|           0x001047d8      movhi 65535, r0, r10                       ; mprec.c:233
|           0x001048ee      ld.w  16[r7], r27                          ; mprec.c:337
|           0x001048f8      cmp   r26, r27                             ; mprec.c:337
|       |   0x00104c50      shl   2, r11                               ; mprec.c:533
|       |   0x00104c9c      shl   2, r11                               ; mprec.c:533
|           0x00104e0e      movhi 32752, r0, r11                       ; mprec.c:633
| ,=======< 0x0010531c      be    0x10533e
| |`======< 0x00105330      bne   0x10531a
| | .-----> 0x00105332      st.w  r0, 8[r24]                           ; vfprintf.c:435
| | :|:||   0x00105336      st.w  r0, 4[r24]                           ; vfprintf.c:436
| | :|:||   0x0010533a      dispose 0, {r21 - r29, lp}, lp             ; vfprintf.c:437
| `-------> 0x0010533e      ld.w  8[r24], r10
|   `=====< 0x00105352      br    0x105332
|       `-> 0x00105354      jarl  dbg.__sfvwrite_r, lp                 ; vfprintf.c:433 ; int __sfvwrite_r(struct _reent *ptr, FILE *fp, struct __suio *uio)
| |::||||   0x00105470      add   1, r28                               ; vfprintf.c:933
| |::||||   0x00105494      st.b  r0, 33[sp]                           ; vfprintf.c:939
| |::||||   0x001054c2      st.b  r0, 33[sp]                           ; vfprintf.c:1657
| --------> 0x001054fe      ld.b  33[sp], r17
| |::||||   0x0010550c      addi  33, sp, r10
| |||||||   0x00105e58      ld.b  33[sp], r10                          ; vfprintf.c:410
| |||||||   0x00106248      addi  33, sp, r12
| --------> 0x00106260      st.b  r6, 33[sp]
|           0x00106332      addi  104, sp, r12                         ; vfprintf.c:472
|           0x00106336      movea 0x400, r0, r11                       ; vfprintf.c:473
|           0x0010633a      st.w  r10, 100[sp]                         ; vfprintf.c:466
|           0x0010633e      ld.h  14[r29], r10                         ; vfprintf.c:467
|           0x001065ae      ld.w  4[sp], r8                            ; fiprintf.c:33
|       |   0x00106c5c      cmp   0, r8                                ; mbtowc_r.c:33
|   :|:|`-> 0x00106c7a      cmp   0, r8                                ; mbtowc_r.c:33
|   :|`===< 0x00106c7e      bne   0x106c60                             ; mbtowc_r.c:33
| ========< 0x00107330      be    0x1073aa
| |:||:||   0x00107332      ld.h  12[r29], r10
| |:||:||   0x00107336      andi  1, r10, r10
| |:||:||   0x0010733a      cmp   0, r10
| ========< 0x0010733c      be    0x107342
| |:||:||   0x0010733e      cmp   10, r28
|      `--> 0x00107404      movea 0x8a, r0, r11                        ; wcrtomb.c:33
|     :||   0x001077d6      cmp   r11, r13                             ; fp-bit.c:533
0x100332 (seq (set _adr (+ (var sp) (bv 32 0x7c))) (storew 0 (var _adr) (var r10)))
0x100336 (seq (set _adr (+ (var sp) (bv 32 0x78))) (storew 0 (var _adr) (var r17)))
0x10033a (branch (! (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))))) (seq (set _pc (+ (bv 32 0x10033a) (bv 32 0x9a))) (jmp (var _pc))) nop)
0x10033e (seq (set result (+ (var r29) (bv 32 0x8))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r29)) (! (== (var result) (var r29)))) (&& (sle (var result) (bv 32 0x8)) (! (== (var result) (bv 32 0x8))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r29 (var result)))
0x101330 (set r10 (var r16))
0x101332 (jmp (bv 32 0x110922))
0x101336 (seq (set _adr (+ (var sp) (bv 32 0x20))) (set r8 (loadw 0 32 (var _adr))))
0x10133a (seq (set _adr (+ (var sp) (bv 32 0x24))) (set r9 (loadw 0 32 (var _adr))))
0x10133e (seq (set _adr (+ (var sp) (bv 32 0x14))) (storew 0 (var _adr) (var r11)))
0x101f4e (seq (set lp (+ (bv 32 0x101f4e) (bv 32 0x4))) (set _pc (+ (bv 32 0x101f4e) (bv 32 0x337e))) (jmp (var _pc)))
0x102332 (seq (set _adr (+ (var sp) (bv 32 0xc))) (set _src_v (loadw 0 64 (var _adr))) (set r14 (cast 32 false (var _src_v))) (set r15 (cast 32 false (>> (var _src_v) (bv 32 0x20) false))))
0x102338 (set r12 (var r14))
0x10233e (seq (set _adr (+ (var r0) (bv 32 0x0))) (set ep (let _v (cast 32 false (loadw 0 16 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x10)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)))))))
0x102f5a (seq (set result (+ (var r10) (bv 32 0x433))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (bv 32 0x433)) (! (== (var result) (bv 32 0x433))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x103300 nop
0x103302 (seq (set _adr (+ (var sp) (bv 32 0x1c))) (storew 0 (var _adr) (append (var r13) (var r12))))
0x103308 (set r14 (var r12))
0x10330e (seq (set _adr (+ (var r0) (bv 32 0x0))) (set ep (let _v (cast 32 false (loadw 0 16 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x10)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)))))))
0x103310 (branch (! (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x103310) (bv 32 0xaa))) (jmp (var _pc))) nop)
0x103314 (set r14 (+ (var r0) (bv 32 0x30)))
0x103318 (seq (set _adr (+ (var r10) (bv 32 0xffffffff))) (set r11 (let _v (cast 32 false (loadw 0 8 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x8)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x8)) (bv 32 0x0)) false)))))))
0x10331c (set r28 (var r10))
0x10331e (seq (set result (+ (var r10) (bv 32 0xffffffff))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (bv 32 0xffffffff)) (! (== (var result) (bv 32 0xffffffff))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x103320 (seq (set result (- (var r11) (var r14))) (set PSW (| (| (| (<< (ite (&& (sle (var r14) (var r11)) (! (== (var r14) (var r11)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
0x103322 (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x103322) (bv 32 0xfffffff6))) (jmp (var _pc))) nop)
0x103324 (seq (set result (+ (var r10) (bv 32 0x1))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (bv 32 0x1)) (! (== (var result) (bv 32 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x103328 (seq (set _adr (+ (var sp) (bv 32 0x24))) (storew 0 (var _adr) (var r10)))
0x10332c (set r10 (bv 32 0x104632))
0x103332 (seq (set _adr (+ (var sp) (bv 32 0x1c))) (storew 0 (var _adr) (var r10)))
0x103336 (jmp (bv 32 0x112b0e))
0x10333a (seq (set _adr (+ (var sp) (bv 32 0x58))) (set r12 (loadw 0 32 (var _adr))))
0x10333e (set r10 (+ (var r0) (bv 32 0x36)))
0x103342 (set r24 (var r22))
0x103344 (set r14 (var r25))
0x103346 (seq (set result (- (var r10) (var r12))) (set PSW (| (| (| (<< (ite (&& (sle (var r12) (var r10)) (! (== (var r12) (var r10)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x103348 (seq (set result (+ (var r26) (var r10))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r26)) (! (== (var result) (var r26)))) (&& (sle (var result) (var r10)) (! (== (var result) (var r10))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r26 (var result)))
0x10334a (seq (set result (+ (var r22) (var r10))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r22)) (! (== (var result) (var r22)))) (&& (sle (var result) (var r10)) (! (== (var result) (var r10))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r22 (var result)))
0x10334c (jmp (bv 32 0x112928))
0x103350 (seq (set _adr (+ (var sp) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
0x103354 (seq (set _adr (+ (var sp) (bv 32 0x8))) (set r11 (loadw 0 32 (var _adr))))
0x103358 (seq (set _adr (+ (var sp) (bv 32 0xc))) (storew 0 (var _adr) (var r10)))
0x10335c (seq (set _adr (+ (var sp) (bv 32 0x10))) (storew 0 (var _adr) (var r11)))
0x103360 (set r10 (bv 32 0x2))
0x103362 (jmp (bv 32 0x1125d4))
0x103366 (seq (set result (- (var r28) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r28)) (! (== (bv 32 0x0) (var r28)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
0x103368 (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x103368) (bv 32 0x2))) (jmp (var _pc))) nop)
0x10336c (seq (set _adr (+ (var sp) (bv 32 0x4c))) (set r14 (loadw 0 32 (var _adr))))
0x103370 (seq (set result (- (var r14) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r14)) (! (== (bv 32 0x0) (var r14)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
0x103372 (branch (|| (^^ (! (is_zero (& (>> (var PSW) (bv 32 0x1) false) (bv 32 0x1)))) (! (is_zero (& (>> (var PSW) (bv 32 0x2) false) (bv 32 0x1))))) (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x103372) (bv 32 0x48))) (jmp (var _pc))) nop)
0x103376 (set r11 (+ (var r0) (bv 32 0x40240000)))
0x10337a (seq (set _adr (+ (var sp) (bv 32 0x1c))) (storew 0 (var _adr) (var r0)))
0x10337e (seq (set _adr (+ (var sp) (bv 32 0x20))) (storew 0 (var _adr) (var r11)))
0x103382 (seq (set _adr (+ (var sp) (bv 32 0xc))) (set _src_v (loadw 0 64 (var _adr))) (set r12 (cast 32 false (var _src_v))) (set r13 (cast 32 false (>> (var _src_v) (bv 32 0x20) false))))
0x103388 (seq (set _adr (+ (var sp) (bv 32 0x1c))) (set _src_v (loadw 0 64 (var _adr))) (set r16 (cast 32 false (var _src_v))) (set r17 (cast 32 false (>> (var _src_v) (bv 32 0x20) false))))
0x10338e (set r11 (+ (var r0) (bv 32 0x401c0000)))
0x103392 (seq (set result (+ (var r10) (bv 32 0x1))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (bv 32 0x1)) (! (== (var result) (bv 32 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x103394 (seq (set _adr (+ (var sp) (bv 32 0x38))) (storew 0 (var _adr) (var r11)))
0x103398 (set r16 (var r12))
0x10339e (set r0 (var r21))
0x1033a4 nop
0x1033a6 (set r10 (var r0))
0x1033ac (seq (set _adr (+ (var r20) (bv 32 0x0))) (set ep (let _v (cast 32 false (loadw 0 16 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x10)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)))))))
0x1033ae (seq (set _adr (+ (var sp) (bv 32 0x34))) (set _src_v (loadw 0 64 (var _adr))) (set r12 (cast 32 false (var _src_v))) (set r13 (cast 32 false (>> (var _src_v) (bv 32 0x20) false))))
0x1033b4 (set r12 (var r10))
0x1033ba (seq (set result (+ (var r10) (var r15))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (var r15)) (! (== (var result) (var r15))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x1033bc nop
0x1033be (seq (set _adr (+ (var sp) (bv 32 0x24))) (set r11 (loadw 0 32 (var _adr))))
0x1033c2 (seq (set _adr (+ (var sp) (bv 32 0x20))) (set r10 (loadw 0 32 (var _adr))))
0x1033c6 (seq (set _adr (+ (var sp) (bv 32 0x1c))) (set r15 (loadw 0 32 (var _adr))))
0x1033ca (seq (set result (+ (var r18) (bv 32 0xffffffff))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r18)) (! (== (var result) (var r18)))) (&& (sle (var result) (bv 32 0xffffffff)) (! (== (var result) (bv 32 0xffffffff))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r18 (var result)))
0x1033ce (set r11 (+ (var r0) (bv 32 0xfcc00000)))
0x1033d2 (seq (set result (+ (var r10) (var r11))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (var r11)) (! (== (var result) (var r11))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x1033d4 (jmp (bv 32 0x112656))
0x1033d8 (seq (set _adr (+ (var sp) (bv 32 0x24))) (set r11 (loadw 0 32 (var _adr))))
0x1033dc (set r12 (+ (var r0) (bv 32 0x31)))
0x1033e0 (seq (set result (+ (var r11) (bv 32 0x1))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r11)) (! (== (var result) (var r11)))) (&& (sle (var result) (bv 32 0x1)) (! (== (var result) (bv 32 0x1))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r11 (var result)))
0x1033e2 (seq (set _adr (+ (var sp) (bv 32 0x24))) (storew 0 (var _adr) (var r11)))
0x1033e6 (jmp (bv 32 0x1127d4))
0x1033ea (set r10 (+ (var r0) (bv 32 0x39)))
0x1033ee (set r27 (var r29))
0x1033f0 (set r12 (+ (var r0) (bv 32 0x39)))
0x1033f4 (set r29 (var r26))
0x1033f6 (seq (set _adr (+ (var r24) (bv 32 0x0))) (storew 0 (var _adr) (cast 8 false (var r10))))
0x1033fa (jmp (bv 32 0x112ac2))
0x1033fe (set r25 (bv 32 0x0))
0x104330 (seq (set result (+ (var r10) (bv 32 0x8))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r10)) (! (== (var result) (var r10)))) (&& (sle (var result) (bv 32 0x8)) (! (== (var result) (bv 32 0x8))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x104334 (seq (set result (>> (var r14) (bv 32 0x3) false)) (set PSW (| (| (| (<< (ite (&& (! (is_zero (bv 32 0x3))) (! (is_zero (& (var r14) (- (<< (bv 32 0x1) (bv 32 0x3) false) (bv 32 0x1)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r14 (var result)))
0x104336 (jmp (bv 32 0x113eb8))
0x10433a (seq (set result (+ (var r15) (var r29))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r15)) (! (== (var result) (var r15)))) (&& (sle (var result) (var r29)) (! (== (var result) (var r29))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r15 (var result)))
0x10433c (set r6 (var r27))
0x10433e (seq (set _adr (+ (var r15) (bv 32 0x4))) (set r10 (loadw 0 32 (var _adr))))
0x105330 (branch (! (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1))))) (seq (set _pc (+ (bv 32 0x105330) (bv 32 0xffffffea))) (jmp (var _pc))) nop)
0x105332 (seq (set _adr (+ (var r24) (bv 32 0x8))) (storew 0 (var _adr) (var r0)))
0x105336 (seq (set _adr (+ (var r24) (bv 32 0x4))) (storew 0 (var _adr) (var r0)))
0x10533a (seq (set _tmp (+ (var sp) (<< (bv 32 0x0) (bv 32 0x2) false))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set lp (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r29 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r28 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r27 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r26 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r25 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r24 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r23 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r22 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set _adr (& (var _tmp) (bv 32 0xfffffffc))) (set r21 (loadw 0 32 (var _adr))) (set _tmp (+ (var _tmp) (bv 32 0x4))) (set sp (var _tmp)) (jmp (var lp)))
0x10533e (seq (set _adr (+ (var r24) (bv 32 0x8))) (set r10 (loadw 0 32 (var _adr))))
0x106332 (seq (set result (+ (var r12) (bv 32 0x68))) (set PSW (| (| (| (<< (ite (|| (&& (sle (var result) (var r12)) (! (== (var result) (var r12)))) (&& (sle (var result) (bv 32 0x68)) (! (== (var result) (bv 32 0x68))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r12 (var result)))
0x106336 (set r11 (+ (var r0) (bv 32 0x400)))
0x10633a (seq (set _adr (+ (var sp) (bv 32 0x64))) (storew 0 (var _adr) (var r10)))
0x10633e (seq (set _adr (+ (var r29) (bv 32 0xe))) (set r10 (let _v (cast 32 false (loadw 0 16 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x10)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)))))))
0x107330 (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x107330) (bv 32 0x7a))) (jmp (var _pc))) nop)
0x107332 (seq (set _adr (+ (var r29) (bv 32 0xc))) (set r10 (let _v (cast 32 false (loadw 0 16 (var _adr))) (>> (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)) (- (bv 32 0x20) (bv 32 0x10)) (msb (cast 32 false (<< (var _v) (- (- (bv 32 0x20) (bv 32 0x10)) (bv 32 0x0)) false)))))))
0x107336 (seq (set result (& (var r10) (bv 32 0x1))) (set PSW (| (| (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false) (<< (ite false (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))) (set r10 (var result)))
0x10733a (seq (set result (- (var r10) (bv 32 0x0))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0x0) (var r10)) (! (== (bv 32 0x0) (var r10)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
0x10733c (branch (! (is_zero (& (>> (var PSW) (bv 32 0x0) false) (bv 32 0x1)))) (seq (set _pc (+ (bv 32 0x10733c) (bv 32 0x6))) (jmp (var _pc))) nop)
0x10733e (seq (set result (- (var r28) (bv 32 0xa))) (set PSW (| (| (| (<< (ite (&& (sle (bv 32 0xa) (var r28)) (! (== (bv 32 0xa) (var r28)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x3) false) (<< (ite (let _x (var result) (|| (! (sle (var _x) (bv 32 0x7fffffff))) (&& (sle (var _x) (bv 32 0x80000000)) (! (== (var _x) (bv 32 0x80000000)))))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x2) false)) (<< (ite (&& (sle (var result) (bv 32 0x0)) (! (== (var result) (bv 32 0x0)))) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x1) false)) (<< (ite (is_zero (var result)) (bv 32 0x1) (bv 32 0x0)) (bv 32 0x0) false))))
EOF
RUN

NAME=v850 s main hello-v850e
FILE=bins/v850/hello-v850e
CMDS=<<EOF
s main
s
EOF
EXPECT=<<EOF
0x100090
EOF
RUN

NAME=v850 s main hello-v850e_stripped
FILE=bins/v850/hello-v850e_stripped
CMDS=<<EOF
s main
s
EOF
EXPECT=<<EOF
0x100090
EOF
RUN

NAME=v850 s main ired_v850
FILE=bins/v850/ired_v850
CMDS=<<EOF
s main
s
EOF
EXPECT=<<EOF
0x104adc
EOF
RUN
