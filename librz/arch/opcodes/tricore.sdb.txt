add.a=add address
add.b=add packed byte
add.h=add packed half word
add=add
addc=add with carry
addi=add immediate
addih.a=add immediate high to address
addih=add immediate high
adds.hu=add unsigned packed half word with saturation
adds.u=add unsigned with saturation
adds=add values with signed saturation
addsc.a=add scaled index to address
addsc.at=add bit scaled index to address
addx=add extended
and=bitwise and
call=call indirect
cmov=conditional move
isync=synchronize instructions
j=jump unconditional
ja=jump unsigned absolute
jal=jump and link absolute
jeq.a=jump if equal address
jeq=jump if equal
jge.u=jump if greater than or equal unsigned
jge=jump if greater than or equal
jgez=jump if greater than equal to zero
jgtz=jump if greater than zero
ji=jump indirect
jl=jump and link
jlez=jump if less than or equal to zero
jli=jump and link indirect
jlt.u=jump if less than unsigned
jlt=jump if less than
jltz=jump if less than zero
jne.a=jump if not equal address
jne=jump if not equal
jned=jump if not equal and decrement
jnei=jump if not equal and increment
jnz.a=jump if not equal to zero address
jnz.t=jump if not equal to zero bit
jnz=jump if not equal to zero
jz.a=jump if zero address
jz.t=jump if zero bit
jz=jump if zero
ld.a=load word to address register
ld.b=load byte
ld.bu=load byte unsigned
ld.d=load double world
ld.da=load double word to address register
ld.h=load half word
ld.hu=load half word unsigned
ld.q=load half word signed fraction
ld.w=load word
ldlcx=load lower context
lea=load effective address
mfcr=move from core register
mov.a=move value to address register
mov.aa=move address from address register
mov.d=move address to data register
mov.u=move unsigned
mov=move
movh.a=move high to address
movh=move high
mtcr=move to core register
mul=multiply signed
muls.u=multiply unsigned with saturation
muls=multiply signed with saturation
nop=nop operation
or=bitwise or
ret=return from call
sh=shift
sha=arithmetic shift
st.a=store word from address register
st.b=store byte
st.d=store double word
st.da=store double world from address registers
st.h=store half word
st.q=store half word signed fraction
st.t=store bit
st.w=store word
sub.a=subtract address
sub.b=subtract packed byte
sub.h=subtract packed half word
sub=subtract
subc=subtract with carry
subs.h=subtract packed half word with saturation
subs.hu=subtract packed half word unsigned with saturation
subs.u=subtract unsigned with saturation
subs=subtract signed with saturation
subx=subtract extended
xor=bitwise xor
