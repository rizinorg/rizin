#include <rz_types.h>

typedef enum {
	SPC_OP,
	SPC_ARG8_1,
	SPC_ARG8_2,
	SPC_ARG16
} Spc700OpType;

typedef struct spc700_op_t {
	char *name;
	Spc700OpType type;
} Spc700Op;

static const Spc700Op spc700_op_table[] = {
	{"nop",                     SPC_OP},
	{"call [0xffde]",           SPC_OP},
	{"set1 0x%02x.0",           SPC_ARG8_1},
	{"bbs 0x%02x.0, 0x%02x",    SPC_ARG8_2},
	{"or a, 0x%02x",            SPC_ARG8_1},
	{"or a, !0x%04x",           SPC_ARG16},
	{"or a, (X)",               SPC_OP},
	{"or a, [0x%02x+x]",        SPC_ARG8_1},
	{"or a, #0x%02x",           SPC_ARG8_1},
	{"or 0x%02x, 0x%02x",       SPC_ARG8_2},
	{"or1 C, 0x%02x.0x%02x",    SPC_ARG8_2},
	{"asl 0x%02x",              SPC_ARG8_1},
	{"asl !0x%04x",             SPC_ARG16},
	{"push psw",                SPC_OP},
	{"tset1 !0x%04x",           SPC_ARG16},
	{"brk",                     SPC_OP},
	{"bpl 0x%02x",              SPC_ARG8_1},
	{"call [0xffdc]",           SPC_OP},
	{"clr1 0x%02x, 0",          SPC_ARG8_1},
	{"bbc 0x%02x.0, 0x%02x",    SPC_ARG8_2},
	{"or a, 0x%02x+x",          SPC_ARG8_1},
	{"or a, !0x%04x+x",         SPC_ARG8_1},
	{"or a, !0x%04x+y",         SPC_ARG16},
	{"or a, [0x%02x]+y",        SPC_ARG8_1},
	{"or 0x%02x, #0x%02x",      SPC_ARG8_2},
	{"or (X), (Y)",             SPC_OP},
	{"decw 0x%02x",             SPC_ARG8_1},
	{"asl 0x%02x+x",            SPC_ARG8_1},
	{"asl A",                   SPC_OP},
	{"dec X",                   SPC_OP},
	{"cmp x, !0x%04x",          SPC_ARG16},
	{"jmp [!0x%04x+x]",         SPC_ARG16},
	{"clrp",                    SPC_OP},
	{"call [0xffda]",           SPC_OP},
	{"set1 0x%02x.1",           SPC_ARG8_1},
	{"bbs 0x%02x.1, 0x%02x",    SPC_ARG8_2},
	{"and a, 0x%02x",           SPC_ARG8_1},
	{"and a, !0x%04x",          SPC_ARG16},
	{"and a, (X)",              SPC_OP},
	{"and a, [0x%02x+x]",       SPC_ARG8_1},
	{"and a, #0x%02x",          SPC_ARG8_1},
	{"and 0x%02x, 0x%02x",      SPC_ARG8_2},
	{"or1 C, /0x%02x.0x%02x",   SPC_ARG8_2},
	{"rol 0x%02x",              SPC_ARG8_1},
	{"rol !0x%04x",             SPC_ARG16},
	{"push a",                  SPC_OP},
	{"cbne 0x%02x, 0x%02x",     SPC_ARG8_2},
	{"bra 0x%02x",              SPC_ARG8_1},
	{"bmi 0x%02x",              SPC_ARG8_1},
	{"call [0xffd8]",           SPC_OP},
	{"clr1 0x%02x.1",           SPC_ARG8_1},
	{"bbc 0x%02x.1, 0x%02x",    SPC_ARG8_2},
	{"and a, 0x%02x+x",         SPC_ARG8_1},
	{"and a, !0x%04x+x",        SPC_ARG16},
	{"and a, !0x%04x+y",        SPC_ARG16},
	{"and a, [0x%02x]+y",       SPC_ARG8_1},
	{"and 0x%02x, #0x%02x",     SPC_ARG8_2},
	{"and (X), (Y)",            SPC_OP},
	{"incw 0x%02x",             SPC_ARG8_1},
	{"rol 0x%02x+x",            SPC_ARG8_1},
	{"rol A",                   SPC_OP},
	{"inc X",                   SPC_OP},
	{"cmp x, 0x%02x",           SPC_ARG8_1},
	{"call !0x%04x",            SPC_ARG16},
	{"call [0xffd6]",           SPC_OP},
	{"set1 0x%02x.2",           SPC_ARG8_1},
	{"bbs 0x%02x.2, 0x%02x",    SPC_ARG8_2},
	{"setp",                    SPC_OP},
	{"eor a, 0x%02x",           SPC_ARG8_1},
	{"eor a, !0x%04x",          SPC_ARG16},
	{"eor a, (X)",              SPC_OP},
	{"eor a, [0x%02x+x]",       SPC_ARG8_1},
	{"eor a, #0x%02x",          SPC_ARG8_1},
	{"eor 0x%02x, 0x%02x",      SPC_ARG8_2},
	{"and1 C, 0x%02x.0x%02x",   SPC_ARG8_2},
	{"lsr 0x%02x",              SPC_ARG8_1},
	{"lsr !0x%04x",             SPC_ARG16},
	{"push x",                  SPC_OP},
	{"tclr1 !0x%04x",           SPC_ARG16},
	{"pcall 0x%02x",            SPC_ARG8_1},
	{"bvc 0x%02x",              SPC_ARG8_1},
	{"call [0xffd4]",           SPC_OP},
	{"clr1 0x%02x.2",           SPC_ARG8_1},
	{"bbc 0x%02x.2, 0x%02x",    SPC_ARG8_2},
	{"eor a, 0x%02x+x",         SPC_ARG8_1},
	{"eor a, !0x%04x+x",        SPC_ARG16},
	{"eor a, !0x%04x+y",        SPC_ARG16},
	{"eor a, [0x%02x]+y",       SPC_ARG8_1},
	{"eor 0x%02x, #0x%02x",     SPC_ARG8_2},
	{"eor (x), (y)",            SPC_OP},
	{"cmpw ya, 0x%02x",         SPC_ARG8_1},
	{"lsr 0x%02x+x",            SPC_ARG8_1},
	{"lsr a",                   SPC_OP},
	{"mov x, a",                SPC_OP},
	{"cmp y, !0x%04x",          SPC_ARG16},
	{"jmp !0x%04x",             SPC_ARG16},
	{"clrc",                    SPC_OP},
	{"call [0xffd2]",           SPC_OP},
	{"set1 0x%02x.3",           SPC_ARG8_1},
	{"bbs 0x%02x.3, 0x%02x",    SPC_ARG8_2},
	{"cmp a, 0x%02x",           SPC_ARG8_1},
	{"cmp a, !0x%04x",          SPC_ARG16},
	{"cmp a, (x)",              SPC_OP},
	{"cmp a, [0x%02x+x]",       SPC_ARG8_1},
	{"cmp a, #0x%02x",          SPC_ARG8_1},
	{"cmp 0x%02x, 0x%02x",      SPC_ARG8_2},
	{"and1 c, ~0x%02x.0x%02x",  SPC_ARG8_2},
	{"ror 0x%02x",              SPC_ARG8_1},
	{"ror !0x%04x",             SPC_ARG16},
	{"push y",                  SPC_OP},
	{"dbnz 0x%02x, 0x%02x",     SPC_ARG8_2},
	{"ret",                     SPC_OP},
	{"bvs 0x%02x",              SPC_ARG8_1},
	{"call [0xffd0]",           SPC_OP},
	{"clr1 0x%02x.3",           SPC_ARG8_1},
	{"bbc 0x%02x.3, 0x%02x",    SPC_ARG8_2},
	{"cmp a, 0x%02x+x",         SPC_ARG8_1},
	{"cmp a, !0x%04x+x",        SPC_ARG16},
	{"cmp a, !0x%04x+y",        SPC_ARG16},
	{"cmp a, [0x%02x]+y",       SPC_ARG8_1},
	{"cmp 0x%02x, #0x%02x",     SPC_ARG8_2},
	{"cmp (X), (Y)",            SPC_OP},
	{"addw Ya, 0x%02x",         SPC_ARG8_1},
	{"ror 0x%02x+x",            SPC_ARG8_1},
	{"ror A",                   SPC_OP},
	{"mov a, X",                SPC_OP},
	{"cmp y, 0x%02x",           SPC_ARG8_1},
	{"ret1",                    SPC_OP},
	{"setc",                    SPC_OP},
	{"call [0xffce]",           SPC_OP},
	{"set1 0x%02x.4",           SPC_ARG8_1},
	{"bbs 0x%02x.4, 0x%02x",    SPC_ARG8_2},
	{"adc a, 0x%02x",           SPC_ARG8_1},
	{"adc a, !0x%04x",          SPC_ARG16},
	{"adc a, (x)",              SPC_OP},
	{"adc a, [0x%02x+x]",       SPC_ARG8_1},
	{"adc a, #0x%02x",          SPC_ARG8_1},
	{"adc 0x%02x, 0x%02x",      SPC_ARG8_2},
	{"eor1 C, 0x%02x.0x%02x",   SPC_ARG8_2},
	{"dec 0x%02x",              SPC_ARG8_1},
	{"dec !0x%04x",             SPC_ARG16},
	{"mov y, #0x%02x",          SPC_ARG8_1},
	{"pop psw",                 SPC_OP},
	{"mov 0x%02x, #0x%02x",     SPC_ARG8_2},
	{"bcc 0x%02x",              SPC_ARG8_1},
	{"call [0xffcc]",           SPC_OP},
	{"clr1 0x%02x.4",           SPC_ARG8_1},
	{"bbc 0x%02x.4, 0x%02x",    SPC_ARG8_2},
	{"adc a, 0x%02x+x",         SPC_ARG8_1},
	{"adc a, !0x%04x+x",        SPC_ARG16},
	{"adc a, !0x%04x+y",        SPC_ARG16},
	{"adc a, [0x%02x]+y",       SPC_ARG8_1},
	{"adc 0x%02x, #0x%02x",     SPC_ARG8_2},
	{"adc (X), (Y)",            SPC_OP},
	{"subw Ya, 0x%02x",         SPC_ARG8_1},
	{"dec 0x%02x+x",            SPC_ARG8_1},
	{"dec A",                   SPC_OP},
	{"mov x, SP",               SPC_OP},
	{"div Ya, X",               SPC_OP},
	{"xcn A",                   SPC_OP},
	{"ei",                      SPC_OP},
	{"call [0xffca]",           SPC_OP},
	{"set1 0x%02x.5",           SPC_ARG8_1},
	{"bbs 0x%02x.5, 0x%02x",    SPC_ARG8_2},
	{"sbc a, 0x%02x",           SPC_ARG8_1},
	{"sbc a, !0x%04x",          SPC_ARG16},
	{"sbc a, (X)",              SPC_OP},
	{"sbc a, [0x%02x+x]",       SPC_ARG8_1},
	{"sbc a, #0x%02x",          SPC_ARG8_1},
	{"sbc 0x%02x, 0x%02x",      SPC_ARG8_2},
	{"mov1 c, 0x%02x.0x%02x",   SPC_ARG8_2},
	{"inc 0x%02x",              SPC_ARG8_1},
	{"inc !0x%04x",             SPC_ARG16},
	{"cmp y, #0x%02x",          SPC_ARG8_1},
	{"pop a",                   SPC_OP},
	{"mov (x)+, a",             SPC_OP},
	{"bcs 0x%02x",              SPC_ARG8_1},
	{"call [0xffc8]",           SPC_OP},
	{"clr1 0x%02x.5",           SPC_ARG8_1},
	{"bbc 0x%02x.5, 0x%02x",    SPC_ARG8_2},
	{"sbc a, 0x%02x+x",         SPC_ARG8_1},
	{"sbc a, !0x%04x+x",        SPC_ARG16},
	{"sbc a, !0x%04x+y",        SPC_ARG16},
	{"sbc a, [0x%02x]+y",       SPC_ARG8_1},
	{"sbc 0x%02x, #0x%02x",     SPC_ARG8_2},
	{"sbc (x), (y)",            SPC_OP},
	{"movw ya, 0x%02x",         SPC_ARG8_1},
	{"inc 0x%02x+x",            SPC_ARG8_1},
	{"inc a",                   SPC_OP},
	{"mov sp, x",               SPC_OP},
	{"das",                     SPC_OP},
	{"mov a, (x)+",             SPC_OP},
	{"di",                      SPC_OP},
	{"call [0xffc6]",           SPC_OP},
	{"set1 0x%02x.6",           SPC_ARG8_1},
	{"bbs 0x%02x.6, 0x%02x",    SPC_ARG8_2},
	{"mov 0x%02x, a",           SPC_ARG8_1},
	{"mov !0x%04x, a",          SPC_ARG16},
	{"mov (X), a",              SPC_OP},
	{"mov [0x%02x+x], a",       SPC_ARG8_1},
	{"cmp x, #0x%02x",          SPC_ARG8_1},
	{"mov !0x%04x, x",          SPC_ARG16},
	{"and1 0x%02x.0x%02x, c",   SPC_ARG8_2},
	{"mov 0x%02x, y",           SPC_ARG8_1},
	{"mov !0x%04x, y",          SPC_ARG16},
	{"mov x, #0x%02x",          SPC_ARG8_1},
	{"pop x",                   SPC_OP},
	{"mul ya",                  SPC_OP},
	{"bne 0x%02x",              SPC_ARG8_1},
	{"call [0xffc4]",           SPC_OP},
	{"clr1 0x%02x.6",           SPC_ARG8_1},
	{"bbc 0x%02x.6, 0x%02x",    SPC_ARG8_2},
	{"mov 0x%02x+x, a",         SPC_ARG8_1},
	{"mov !0x%04x+x, a",        SPC_ARG16},
	{"mov !0x%04x+y, a",        SPC_ARG16},
	{"mov [0x%02x]+y, a",       SPC_ARG8_1},
	{"mov 0x%02x, x",           SPC_ARG8_1},
	{"mov 0x%02x+y, x",         SPC_ARG8_1},
	{"movw 0x%02x, ya",         SPC_ARG8_1},
	{"mov 0x%02x+x, y",         SPC_ARG8_1},
	{"dec y",                   SPC_OP},
	{"mov a, y",                SPC_OP},
	{"cbne 0x%02x+x, 0x%02x",   SPC_ARG8_2},
	{"daa",                     SPC_OP},
	{"clrv",                    SPC_OP},
	{"call [0xffc2]",           SPC_OP},
	{"set1 0x%02x.7",           SPC_ARG8_1},
	{"bbs 0x%02x.7, 0x%02x",    SPC_ARG8_2},
	{"mov a, 0x%02x",           SPC_ARG8_1},
	{"mov a, 0x%04x",           SPC_ARG16},
	{"mov a, (x)",              SPC_OP},
	{"mov a, [0x%02x+x]",       SPC_ARG8_1},
	{"mov a, #0x%02x",          SPC_ARG8_1},
	{"mov x, 0x%04x",           SPC_ARG16},
	{"not1 0x%02x.0x%02x",      SPC_ARG8_2},
	{"mov y, 0x%02x",           SPC_ARG8_1},
	{"mov y, !0x%04x",          SPC_ARG16},
	{"notc",                    SPC_OP},
	{"pop y",                   SPC_OP},
	{"sleep",                   SPC_OP},
	{"beq 0x%02x",              SPC_ARG8_1},
	{"call [0xffc0]",           SPC_OP},
	{"clr1 0x%02x.7",           SPC_ARG8_1},
	{"bbc 0x%02x.7, 0x%02x",    SPC_ARG8_2},
	{"mov a, 0x%02x+x",         SPC_ARG8_1},
	{"mov a, !0x%04x+x",        SPC_ARG16},
	{"mov a, !0x%04x+y",        SPC_ARG16},
	{"mov a, [0x%02x]+y",       SPC_ARG8_1},
	{"mov x, 0x%02x",           SPC_ARG8_1},
	{"mov x, 0x%02x+y",         SPC_ARG8_1},
	{"mov 0x%02x, 0x%02x",      SPC_ARG8_2},
	{"mov y, 0x%02x+x",         SPC_ARG8_1},
	{"inc Y",                   SPC_OP},
	{"mov y, A",                SPC_OP},
	{"dbnz y, 0x%02x",          SPC_ARG8_1},
	{"stop",                    SPC_OP}
};
