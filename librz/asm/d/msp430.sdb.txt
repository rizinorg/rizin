adc.b=add carry to destination
adc=add constant
add=add source to destination
addc=add source and carry to destinatio
and=logical and
bic=bit clear
bis=bit set
bit=test bits of source and destination
br=branch to
call=subroutine call
clr.b=clear destination
clr=clear destination
clrn=clear negative bit
clrz=clear zero bit
cmp=compare
dadc.b=decimal add carry to destination
dadc=decimal add carry to destination
dadd=decimal add source to destination (with carry)
dec.b=decrement destination
dec=decrement destination
decd.b=decrement destination twice
decd=decrement destination twice
dint=disable interrupts
eint=enable interrupts
inc.b=increment destination
inc=increment destination
incd.b=increment destination twice
incd=increment destination twice
inv.b=invert bits in destination
inv=invert bits in destination
jc=jump if carry/higher or same
jeq=jump if equal/zero
jge=jump if greater or equal
jl=jump if less
jmp=jump
jn=jump if negative
jnc=jump if no carry/lower
jnz=jump if not equal/zero
mov=move source to destination
nop=no operation
pop.b=pop byte from stack
pop=pop word from stack
push=push value onto stac
ret=return from subroutine
reti=return from interrup
rla.b=rotate left
rla=rotate left
rlc.b=rotate left through carry
rlc=rotate left through carry
rra=rotate right arithmeti—Å
rrc=rotate right through carry
sbc.b=subtract source and borrow
sbc=subtract source and borrow
setc=set carry flag
setn=set negative flag
setz=set zero flag
sub=subtract source from destination
subc=subtract source from destination (with carry)
swpb=swap bytes
sxt=sign extend byte to word
tst.b=test destination
tst=test destination
xor=exclusive or
